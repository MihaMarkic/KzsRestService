#Root#<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
	<!--[if lt IE 7.]>
	<script defer type="text/javascript" src="/js/pngfix.js"></script>
	<![endif]-->

 	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	
	
		<meta property="og:title" content="Dekleta U17">
	
	
	
	
	
		<meta property="og:image" content="http://www.kzs.si/images/project/logo.png">
	

  	








<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="rating" content="General">
<meta name="author" content="Perun Pro">
<meta name="copyright" content="">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<meta name="Language" content="slovenian">
<meta http-equiv="content-Language" content="sl-SI">



<meta name="description" content="">

<meta name="keywords" content="">







    <link rel="shortcut icon" href="/images/favicon.png">	
    <title>KZS | Dekleta U17</title>
    
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    
    <script async="" src="//www.google-analytics.com/analytics.js"></script><script type="text/javascript" src="/js/jquery-3.2.1.min.js"></script>
	<script type="text/javascript" src="/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="/js/jquery.ui/jquery-ui-1.12.1.custom.min.js"></script>
    <script type="text/javascript" src="/js/fancybox/jquery.fancybox.pack.js"></script>
    
    <script type="text/javascript" src="/js/pp-common.js"></script>
    <script type="text/javascript" src="/js/pp-objects.js"></script>
    <script type="text/javascript" src="/js/linkManager.js"></script>
    <script type="text/javascript" src="/js/utf8.js"></script>
    <script type="text/javascript" src="/js/jsp/topnavigation.js"></script>
    <script type="text/javascript" src="/js/lang/ppt_sl.js"></script>
	
	<script type="text/javascript" src="/js/widgets/api.js"></script>
	<script type="text/javascript" src="/js/widgets/new_script.js"></script>
	
	<link rel="stylesheet" href="/css/jquery.ui/jquery-ui-1.12.1.custom.min.css">
	<link rel="stylesheet" href="/css/jquery.ui/jquery-ui-1.12.1.theme.min.css">
    <link rel="stylesheet" href="/css/jquery.fancybox.css">
    <link rel="stylesheet" href="/css/jquery.fancybox-buttons.css">
    <link rel="stylesheet" href="/css/jquery.fancybox-thumbs.css">
    
    
	
	<link rel="stylesheet" href="/css/cookie.css">
    <link rel="stylesheet" href="/css/ie10-viewport-bug-workaround.css">
    <link rel="stylesheet" href="/css/kzs.css">
    <link rel="stylesheet" href="/css/kzs-cms.css">
    <link rel="stylesheet" href="/css/style.css">
    
	<link rel="stylesheet" href="/css/widgets_style_css_main.css" type="text/css" media="all">

    <link href="https://fonts.googleapis.com/css?family=Noto+Sans&amp;subset=latin-ext" rel="stylesheet">
    
    <link rel="canonical" href="http://www.kzs.si/clanek/Tekmovanja/Mlajse-kategorije/Dekleta/Dekleta-U17/cid/106">   
    



<script type="text/javascript">

(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	ga('create', 'UA-23907246-1', 'auto');
	ga('send', 'pageview');
</script>
 
<link rel="stylesheet" type="text/css" media="all" href="https://widgets.baskethotel.com/css.php?api=39f56437f972dc4ca91d2c997f874dcfc232a688&amp;index=0&amp;v=144"></head>	



<body class="news-detail-page">

<script type="text/javascript">
<!--
var CLOSE_ON_CLICK = null;
var CALENDAR_CLOSE_ON_CLICK = null;
var CALENDAR_DATE_FORMAT = '%d.%m.%Y %H:%M';
var URL_LANG = 'sl';

jQuery.ajaxSettings.traditional = true;

//jQuery(function() {jQuery(document).tooltip();});

var SETTINGS = SETTINGS||{};

//-->
</script>


<div id="container" class="article">

	

	



 




<header>
  <div class="container-bootstrap">
    <div class="row">
      <div class="col-sm-2 col-xs-12">
        <a class="navbar-brand" href="/"><img src="/images/project/logo.png"></a>
      </div>
      <div class="col-sm-10 col-xs-12 top-menu">
        <a href="/clanek/Prenosi/cid/142" style="margin-left:0;"><i class="kzs-camera"></i> <span>Prenosi</span></a>
        
        <a style="color:#939394; cursor: default;"><i class="kzs-nkbm"></i> <span>Košarkarska banka</span></a>
        <a href="/clanek/Trgovina/cid/141"><i class="kzs-shop"></i> <span>Trgovina</span></a>
        <a href="/clanek/Vstopnice/cid/151"><i class="kzs-ticket"></i> <span>Vstopnice</span></a>
        <a href="/izbericlanstvo"><i class="kzs-ball"></i> <span>Navijači#mojtim</span></a>
        
			<a href="/prijava"><div class="kzs-profile kzs-profile-unregistered"></div></a>
		
        
      </div>
    </div>
  </div>
  <nav class="navbar navbar-inverse">
    <div class="container-bootstrap">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" onclick="TopNav.toggleMenu(this);">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
      </div>
      <div id="navbar" class="collapse navbar-collapse">
      
		<ul class="nav navbar-nav main-menu"><li class="dropdown"><a class="dropdown-toggle">Novice</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanki/Novice/Tekmovanja/id/41">Tekmovanja</a><ul><li><a href="/clanki/Novice/Tekmovanja/Liga-Nova-KBM/id/29">Liga Nova KBM</a></li><li><a href="/clanki/Novice/Tekmovanja/1.-SKL-za-zenske/id/42">1. SKL za ženske</a></li><li><a href="/clanki/Novice/Tekmovanja/Pokal-Spar/id/46">Pokal Spar</a></li><li><a href="/clanki/Novice/Tekmovanja/Pokal-clanic/id/47">Pokal članic</a></li><li><a href="/clanki/Novice/Tekmovanja/2.-SKL/id/43">2. SKL</a></li><li><a href="/clanki/Novice/Tekmovanja/Mlajse-kategorije/id/50">DP mlajših kategorij</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanki/Novice/Reprezentance/id/30">Reprezentance</a><ul><li><a href="/clanki/Novice/Reprezentance/Clani/id/31">Člani</a></li><li><a href="/clanki/Novice/Reprezentance/Clanice/id/56">Članice</a></li><li><a href="/clanki/Novice/Reprezentance/Fantje-U20/id/51">Fantje U20</a></li><li><a href="/clanki/Novice/Reprezentance/Fantje-U18/id/52">Fantje U18</a></li><li><a href="/clanki/Novice/Reprezentance/Fantje-U16/id/53">Fantje U16</a></li><li><a href="/clanki/Novice/Reprezentance/Dekleta-U20/id/57">Dekleta U20</a></li><li><a href="/clanki/Novice/Reprezentance/Dekleta-U18/id/58">Dekleta U18</a></li><li><a href="/clanki/Novice/Reprezentance/Dekleta-U16/id/59">Dekleta U16</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a>Projekti</a><ul><li><a href="/clanki/Novice/Kosarka-3x3/id/63">Košarka 3x3</a></li><li><a href="/clanki/Novice/Projekti/Tabor-KZS/id/254">Tabor KZS</a></li><li><a href="/clanki/Novice/Projekti/Kosarkarski-Supersolar/id/148">Košarkarski Superšolar</a></li><li><a href="/clanki/Novice/Projekti/U14-Slovenia-Ball/id/234">U14 Slovenia Ball</a></li><li><a href="/clanki/Novice/Projekti/Regijsko-selekcioniranje/id/162">Regijsko selekcioniranje</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanki/Novice/Ostalo/id/64">Ostalo</a></li></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Tekmovanja</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Tekmovanja/Liga-Nova-KBM/cid/66">Liga Nova KBM</a></li><li><a href="/clanek/Tekmovanja/1.-SKL-za-zenske/cid/67">1. SKL za ženske</a></li><li><a href="/clanek/Tekmovanja/2.-SKL/cid/68">2. SKL</a></li><li><a href="/clanek/Tekmovanja/3.-SKL/cid/69">3. SKL</a></li><li><a href="/clanek/Tekmovanja/4.-SKL/cid/70">4. SKL</a></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Tekmovanja/Pokal-Spar/cid/72">Pokal Spar</a></li><li><a href="/clanek/Tekmovanja/Pokal-clanic/cid/73">Pokal Članic</a></li><li><a href="/clanek/Tekmovanja/Superpokal-Slovenije/cid/77">Superpokal Slovenije</a><ul><li><a href="/clanek/Tekmovanja/Razpored-in-rezultati-vseh-tekem/cid/347">Vse tekme</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a>Mlajše kategorije - fantje</a><ul><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U19/cid/99">U19</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U17/cid/100">U17</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U15/cid/101">U15</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U13/cid/102">U13</a></li><li><a href="/clanek/Tekmovanja/Mini-pokal-Spar/cid/74">Mini pokal Spar</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U11/cid/103">U11</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje-in-dekleta-U9/cid/104">U9</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a>Mlajše kategorije - dekleta</a><ul><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Dekleta/Dekleta-U19/cid/105">U19</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Dekleta/Dekleta-U17/cid/106">U17</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Dekleta/Dekleta-U15/cid/107">U15</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Dekleta/Dekleta-U13/cid/108">U13</a></li><li><a href="/clanek/Tekmovanja/Mini-pokal-deklet/cid/75">Mini pokal deklet</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Dekleta/Dekleta-U11/cid/109">U11</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje-in-dekleta-U9/cid/104">U9</a></li></ul></li></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Reprezentance</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Reprezentance/Clani/cid/37">Člani</a></li><li><a href="/clanek/Reprezentance/Clani-B/cid/165">Člani B</a></li><li><a href="/clanek/Reprezentance/Clanice/cid/83">Članice</a></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Reprezentance/Fantje-U20/cid/78">Fantje U20</a></li><li><a href="/clanek/Reprezentance/Fantje-U18/cid/79">Fantje U18</a></li><li><a href="/clanek/Reprezentance/Fantje-U16/cid/80">Fantje U16</a></li><li><a href="/clanek/Reprezentance/Fantje-U14/cid/82">Fantje U14</a></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Reprezentance/Dekleta-U20/cid/84">Dekleta U20</a></li><li><a href="/clanek/Reprezentance/Dekleta-U18/cid/85">Dekleta U18</a></li><li><a href="/clanek/Reprezentance/Dekleta-U16/cid/86">Dekleta U16</a></li><li><a href="/clanek/Reprezentance/Dekleta-U14/cid/88">Dekleta U14</a></li></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Projekti</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6 col-xs-6 event-menu"><div class="row"><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Igriva-kosarka/cid/91"><img src="/binary/showimage/id/6420/rw/200/rh/200/rp/true/rd/true/wm/0/h/727008"><span>Igriva košarka</span></a></div><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Lipko/cid/155"><img src="/binary/showimage/id/6421/rw/200/rh/200/rp/true/rd/true/wm/0/h/ec6bc6"><span>Lipko</span></a></div></div></div><div class="col-md-3 col-sm-6 col-xs-6 event-menu"><div class="row"><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Regijsko-selekcioniranje/cid/93"><img src="/binary/showimage/id/6422/rw/200/rh/200/rp/true/rd/true/wm/0/h/8b3394"><span>Regijsko selekcioniranje</span></a></div><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/KZS-tabor/cid/92"><img src="/binary/showimage/id/6423/rw/200/rh/200/rp/true/rd/true/wm/0/h/7a0e69"><span>Tabori KZS</span></a></div></div></div><div class="col-md-3 col-sm-6 col-xs-6 event-menu"><div class="row"><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Kosarkarski-supersolar/cid/94"><img src="/binary/showimage/id/6424/rw/200/rh/200/rp/true/rd/true/wm/0/h/66b88d"><span>Košarkarski superšolar</span></a></div><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/U14-Slovenia-Ball/cid/95"><img src="/binary/showimage/id/6428/rw/200/rh/200/rp/true/rd/true/wm/0/h/ba783a"><span>U14 Slovenia Ball</span></a></div></div></div><div class="col-md-3 col-sm-6 col-xs-6 event-menu"><div class="row"><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Dan-slovenske-kosarke/cid/96"><img src="/binary/showimage/id/6425/rw/200/rh/200/rp/true/rd/true/wm/0/h/781b90"><span>Dan slovenske košarke</span></a></div><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Pokal-Eurobasket-2017/cid/200"><img src="/binary/showimage/id/6426/rw/200/rh/200/rp/true/rd/true/wm/0/h/251ee0"><span>Pokal Eurobasket 2017</span></a></div></div></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Košarka 3x3</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/3x3/O-3x3/cid/207">O 3x3</a></li><li><a href="/clanek/3x3/Pravila/cid/372">Pravila</a></li><li><a href="/clanek/3x3/Reprezentance/cid/345">Reprezentance</a></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/3x3/Grosbasket-DP/cid/209">Grosbasket DP</a></li><li><a href="https://www.3x3ljubljanachallenger.com/" target="_blank">Ljubljana Challenger</a></li><li><a href="/clanek/3x3/Mednar.-klubska-tekm./cid/360">Mednarodna klubska tekmovanja</a></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/3x3/Lokalci/cid/208">Lokalni turnirji</a></li></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Organizacija</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Organizacija/Vse-o-KZS/cid/125">Vse o KZS</a></li><li><a>Člani in organi</a><ul><li><a href="/clanek/Organizacija/Clani-in-organi/Organi/cid/127">Organi</a></li><li><a href="/clanek/Organizacija/Clani-in-organi/Clani/cid/128">Člani</a></li><li><a href="/clanek/Organizacija/Clani-in-organi/Zdruzenja/cid/129">Združenja</a></li><li><a href="/clanek/Organizacija/Clani-in-organi/Stalne-komisije/cid/143">Stalne komisije</a></li><li><a href="/clanek/Organizacija/Clani-in-organi/Licenciranje/cid/152">Licenciranje</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a>Dokumenti</a><ul><li><a href="/clanek/Organizacija/Dokumenti/Pravilniki/cid/135">Pravilniki</a></li><li><a href="/clanek/Organizacija/Dokumenti/Dokumenti/cid/136">Dokumenti</a></li><li><a href="/clanek/Organizacija/Dokumenti/Obrazci/cid/137">Obrazci</a></li><li><a href="/clanek/Organizacija/Dokumenti/Razpisi/cid/153">Razpisi</a></li><li><a href="/clanek/Organizacija/Dokumenti/Vodenje-statistike/cid/138">Vodenje statistike</a></li><li><a href="/clanek/Organizacija/Dokumenti/Seminarji-za-pomozne-sodnike/cid/410">Seminarji za pomožne sodnike</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Organizacija/Integriteta-in-zascita-igre/cid/400">Integriteta in zaščita igre</a><ul><li><a href="/clanek/Organizacija/Integriteta-in-zascita-igre/Sporocilo-predsednika-KZS/cid/401">Sporočilo predsednika KZS</a></li><li><a href="/clanek/Organizacija/Integriteta-in-zascita-igre/Kodeks-integritete-KZS/cid/402">Kodeks integritete KZS</a></li><li><a href="https://anonimnaprijava.kzs.si/" target="_blank">Anonimna prijava</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Organizacija/Bilteni/cid/132">Bilteni</a></li><li><a href="/clanek/Organizacija/Logotipi/cid/130">Logotipi</a></li><li><a href="/clanek/Organizacija/Povezave/cid/133">Povezave</a></li></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Anon. prijava</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="https://anonimnaprijava.kzs.si/" target="_blank">Anon. prijava</a></li></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">BizBasket 3x3</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/BizBasket-3x3/cid/411">BizBasket 3x3</a></li></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div></div></div></div></li></ul>
		
<script type="text/javascript">
jQuery(document).ready(function() {
	jQuery('ul.nav li.dropdown').hover(function() {
		jQuery(this).find('.dropdown-menu').stop(true, true).delay(100).fadeIn(300);
		}, function() {
			jQuery(this).find('.dropdown-menu').stop(true, true).delay(100).fadeOut(300);
		});
});
</script>
        <div class="input-group header-search">
          <form class="navbar-form navbar-left" role="search" action="/iskanje" method="post">
            <button id="search-button" class="btn btn-default" onclick="return TopNav.onSearchOpenClick(this);"><span class="glyphicon glyphicon-search"></span></button>
            <div id="search-form" class="form-group">
              <div class="input-group">
                <input type="text" class="form-control" name="searchQuery" onkeydown="Common.submitClosestFormOnEnter(this, event, 'search');" placeholder="Iskanje klubov">
                <span id="search-icon" class="input-group-addon" onclick="commonSubmitClosestForm(this, 'search')"><span class="glyphicon glyphicon-search"></span></span>
              </div>
            </div>
          </form>
        </div><!-- /input-group -->

        <ul class="nav navbar-nav social-menu">
          <li><a target="_blank" href="https://www.instagram.com/kzs_si/"><i class="kzs-instagram"></i></a></li>
          <li><a target="_blank" href="https://www.youtube.com/user/kzsslobasket"><i class="kzs-video-alt"></i></a></li>
          <li><a target="_blank" href="https://www.facebook.com/koszveza/"><i class="kzs-facebook"></i></a></li>
          <li><a target="_blank" href="https://twitter.com/kzs_si"><i class="kzs-twitter"></i></a></li>
        </ul>

      </div><!--/.nav-collapse -->
    </div>
  </nav>
</header>

<div class="row"><div class="col-sm-12 image"><img src="/binary/showimage/id/4090/wm/0/h/dcf634"></div></div>
	
	<div id="main" class=""><!--middle parts starts-->
		<div class="">
			<div class="">

				



		
				








<!-- javascript check -->
<noscript>
    &lt;div class="errormessage"&gt;Za pravilno delovanje morate imeti v brskalniku omogočen JavaScript&lt;/div&gt;
</noscript>
<!-- cookies check -->
<script type="text/javascript">
    jQuery(function() {
        if (!areCookiesEnabled()) {
            addErrorMessage('Za pravilno delovanje morate imeti v brskalniku omogočene piškotke (cookies)');
        }
    });
</script>


<div id="infomessage_template" class="infomessage hidden" onclick="jQuery(this).fadeOut()"></div>
<div id="errormessage_template" class="errormessage hidden" onclick="jQuery(this).fadeOut()"></div>

<script type="text/javascript">
function addInfoMessage(message) {
	var infom = jQuery("#infomessage_template").clone().removeClass("hidden").removeAttr("id").html(message);
	jQuery("#infomessage_template").before(infom);
}
function addErrorMessage(message) {
	var errorm = jQuery("#errormessage_template").clone().removeClass("hidden").removeAttr("id").html(message);
	jQuery("#errormessage_template").before(errorm);
}
    
    function createCookie(name, value, days) {
        var expires;
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toGMTString();
        }
        else expires = "";
        document.cookie = name + "=" + value + expires + "; path=/";
    }

    function readCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    function eraseCookie(name) {
        createCookie(name, "", -1);
    }

    function areCookiesEnabled() {
        var r = false;
        createCookie("testing", "Hello", 1);
        if (readCookie("testing") != null) {
            r = true;
            eraseCookie("testing");
        }
        return r;
    }        
</script>

	
			
							

<div class="container-bootstrap"><div class="row "><div class="col-md-12"><h1>Dekleta U17</h1></div></div></div><div class="container-bootstrap"><div class="row"><div class=" art-content"><div class="container">
	<div id="schedule" mbt_widget="303"><div id="mbt-v2-schedule-long" class="mbt-v2-widget">
	<div class="mbt-v2-header">
					Razpored in rezultati
			</div>
	<div class="mbt-v2-widget-content">
		<div id="33-303-mobile-menu" class="mbt-v2-mobile-menu">
			Razpored
		</div>
		<nav id="33-303-mbt-v2-navigation" class="mbt-v2-navigation">
						<div id="33-303-tab-1" data-name="schedule_and_results" data-type="schedule_only" class="mbt-v2-navigation-tab">
				Razpored
			</div>
			<div id="33-303-tab-2" data-name="schedule_and_results" data-type="results_only" class="mbt-v2-navigation-tab-active" prevclassname="mbt-v2-navigation-tab-active">
				Rezultati
			</div>
		</nav>
		<div class="mbt-v2-divider"></div>
		<div id="33-303-mobile-filters-block" class="mbt-v2-mobile-filters-block">
			Filtri
		</div>
		<div id="33-303-filters-block" class="mbt-v2-filters-block">
                            <select id="33-303-filter-season" class="mbt-v2-select">
											<option value="102587" selected="selected">
							2018-2019
						</option>
											<option value="97915">
							2017-2018
						</option>
											<option value="93983">
							2016-2017
						</option>
											<option value="91069">
							2015-2016
						</option>
											<option value="89559">
							2014-2015
						</option>
											<option value="85631">
							2013-2014
						</option>
											<option value="63243">
							2012-2013
						</option>
											<option value="15443">
							2011-2012
						</option>
									</select>
                        				<select id="33-303-filter-stage" data-filter="stage" data-load="get-stages" class="mbt-v2-select">
					<option value="">
						Vsi deli tekmovanja
					</option>
											<option value="209263">
							1. del
						</option>
                                                            <option value="209269">
	                                1. del-Skupina 1
	                            </option>
                                                                                            <option value="209267">
	                                1. del-Skupina 2
	                            </option>
                                                                                            <option value="209265">
	                                1. del-Skupina 3
	                            </option>
                                                            									</select>
										<select id="33-303-filter-game-day" data-filter="game_day" data-load="get-game-days" class="mbt-v2-select">
					<option value="">
						Kolo
					</option>
											<option value="1">
							1
						</option>
											<option value="2">
							2
						</option>
											<option value="3">
							3
						</option>
											<option value="4">
							4
						</option>
											<option value="5">
							5
						</option>
											<option value="6">
							6
						</option>
											<option value="7">
							7
						</option>
											<option value="8">
							8
						</option>
											<option value="9">
							9
						</option>
											<option value="10">
							10
						</option>
									</select>	
										<select id="33-303-filter-team" data-filter="team" data-load="get-teams" class="mbt-v2-select">
					<option value="">
						Ekipa
					</option>
											<option value="196733">
							Akson Ilirija A
						</option>
											<option value="4646257">
							Akson Ilirija B
						</option>
											<option value="196683">
							Cinkarna Celje
						</option>
											<option value="196713">
							Črnomelj
						</option>
											<option value="196723">
							Domžale
						</option>
											<option value="196743">
							Grosuplje
						</option>
											<option value="196773">
							Ines
						</option>
											<option value="196763">
							Ježica A
						</option>
											<option value="4619135">
							Ježica B
						</option>
											<option value="196693">
							Konjice A
						</option>
											<option value="268713">
							Konjice B
						</option>
											<option value="196753">
							Krka
						</option>
											<option value="196673">
							Maribor
						</option>
											<option value="4675157">
							Orli Postojna
						</option>
											<option value="196703">
							Pomurje
						</option>
											<option value="196783">
							Triglav
						</option>
											<option value="4612259">
							Vipava
						</option>
									</select>
						<select id="33-303-filter-month" data-filter="month" data-load="get-months" class="mbt-v2-select">
				<option value="all">
					Mesec
				</option>
									<option value="9">
						september
					</option>
									<option value="10">
						oktober
					</option>
									<option value="11">
						november
					</option>
									<option value="12">
						december
					</option>
									<option value="1">
						januar
					</option>
							</select>
				
		</div>
		<div class="mbt-v2-divider"></div>
		<div id="33-303-container">	<table id="mbt-v2-schedule-table" class="mbt-v2-schedule-long-table mbt-v2-table mbt-v2-vertical-responsive">
			
		<tbody>
							<tr>
											<td data-th="Igralni dan">
							3
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4241015&amp;league_id=undefined&amp;season_id=102587" game_id="4241015" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.889276001541234353" onlyurl="1">22.10.2018 17:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.889276001541234353") === "object") {
                               document.getElementById("a-0.889276001541234353").href = navigateGame(document.getElementById('a-0.889276001541234353').getAttribute('game_id'), document.getElementById('a-0.889276001541234353').getAttribute('season_id'), document.getElementById('a-0.889276001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196703&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196703" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.889372001541234353" onlyurl="1">Pomurje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.889372001541234353") === "object") {
                               document.getElementById("a-0.889372001541234353").href = navigateTeam(document.getElementById('a-0.889372001541234353').getAttribute('team_id'), document.getElementById('a-0.889372001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4241015&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4241015" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.889447001541234353" onlyurl="1">51:<span class="mbt-v2-strong">52</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.889447001541234353") === "object") {
                               document.getElementById("a-0.889447001541234353").href = navigateGame(document.getElementById('a-0.889447001541234353').getAttribute('game_id'), document.getElementById('a-0.889447001541234353').getAttribute('season_id'), document.getElementById('a-0.889447001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4646257&amp;league_id=undefined&amp;season_id=102587" team_id="4646257" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.889509001541234353" onlyurl="1">Akson Ilirija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.889509001541234353") === "object") {
                               document.getElementById("a-0.889509001541234353").href = navigateTeam(document.getElementById('a-0.889509001541234353').getAttribute('team_id'), document.getElementById('a-0.889509001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7273" arena_id="7273" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.889563001541234353" onlyurl="1">OŠ I M. Sobota</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.889563001541234353") === "object") {
                               document.getElementById("a-0.889563001541234353").href = navigateArena(document.getElementById('a-0.889563001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							4
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240897&amp;league_id=undefined&amp;season_id=102587" game_id="4240897" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.889664001541234353" onlyurl="1">20.10.2018 13:30</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.889664001541234353") === "object") {
                               document.getElementById("a-0.889664001541234353").href = navigateGame(document.getElementById('a-0.889664001541234353').getAttribute('game_id'), document.getElementById('a-0.889664001541234353').getAttribute('season_id'), document.getElementById('a-0.889664001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196763&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196763" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.889725001541234353" onlyurl="1">Ježica A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.889725001541234353") === "object") {
                               document.getElementById("a-0.889725001541234353").href = navigateTeam(document.getElementById('a-0.889725001541234353').getAttribute('team_id'), document.getElementById('a-0.889725001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240897&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240897" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.889783001541234353" onlyurl="1">59:<span class="mbt-v2-strong">65</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.889783001541234353") === "object") {
                               document.getElementById("a-0.889783001541234353").href = navigateGame(document.getElementById('a-0.889783001541234353').getAttribute('game_id'), document.getElementById('a-0.889783001541234353').getAttribute('season_id'), document.getElementById('a-0.889783001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196753&amp;league_id=undefined&amp;season_id=102587" team_id="196753" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.889836001541234353" onlyurl="1">Krka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.889836001541234353") === "object") {
                               document.getElementById("a-0.889836001541234353").href = navigateTeam(document.getElementById('a-0.889836001541234353').getAttribute('team_id'), document.getElementById('a-0.889836001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7203" arena_id="7203" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.889884001541234353" onlyurl="1">Ježica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.889884001541234353") === "object") {
                               document.getElementById("a-0.889884001541234353").href = navigateArena(document.getElementById('a-0.889884001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							4
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240959&amp;league_id=undefined&amp;season_id=102587" game_id="4240959" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.889977001541234353" onlyurl="1">20.10.2018 12:15</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.889977001541234353") === "object") {
                               document.getElementById("a-0.889977001541234353").href = navigateGame(document.getElementById('a-0.889977001541234353').getAttribute('game_id'), document.getElementById('a-0.889977001541234353').getAttribute('season_id'), document.getElementById('a-0.889977001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890034001541234353" onlyurl="1">Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890034001541234353") === "object") {
                               document.getElementById("a-0.890034001541234353").href = navigateTeam(document.getElementById('a-0.890034001541234353').getAttribute('team_id'), document.getElementById('a-0.890034001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240959&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240959" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890090001541234353" onlyurl="1">25:<span class="mbt-v2-strong">50</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890090001541234353") === "object") {
                               document.getElementById("a-0.890090001541234353").href = navigateGame(document.getElementById('a-0.890090001541234353').getAttribute('game_id'), document.getElementById('a-0.890090001541234353').getAttribute('season_id'), document.getElementById('a-0.890090001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4612259&amp;league_id=undefined&amp;season_id=102587" team_id="4612259" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890141001541234353" onlyurl="1">Vipava</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890141001541234353") === "object") {
                               document.getElementById("a-0.890141001541234353").href = navigateTeam(document.getElementById('a-0.890141001541234353').getAttribute('team_id'), document.getElementById('a-0.890141001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7183" arena_id="7183" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890188001541234353" onlyurl="1">OŠ Mirana Jarca, Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890188001541234353") === "object") {
                               document.getElementById("a-0.890188001541234353").href = navigateArena(document.getElementById('a-0.890188001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							4
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4241017&amp;league_id=undefined&amp;season_id=102587" game_id="4241017" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890276001541234353" onlyurl="1">20.10.2018 11:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890276001541234353") === "object") {
                               document.getElementById("a-0.890276001541234353").href = navigateGame(document.getElementById('a-0.890276001541234353').getAttribute('game_id'), document.getElementById('a-0.890276001541234353').getAttribute('season_id'), document.getElementById('a-0.890276001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=268713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="268713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890332001541234353" onlyurl="1">Konjice B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890332001541234353") === "object") {
                               document.getElementById("a-0.890332001541234353").href = navigateTeam(document.getElementById('a-0.890332001541234353').getAttribute('team_id'), document.getElementById('a-0.890332001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4241017&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4241017" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890387001541234353" onlyurl="1">44:<span class="mbt-v2-strong">100</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890387001541234353") === "object") {
                               document.getElementById("a-0.890387001541234353").href = navigateGame(document.getElementById('a-0.890387001541234353').getAttribute('game_id'), document.getElementById('a-0.890387001541234353').getAttribute('season_id'), document.getElementById('a-0.890387001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4646257&amp;league_id=undefined&amp;season_id=102587" team_id="4646257" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890437001541234353" onlyurl="1">Akson Ilirija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890437001541234353") === "object") {
                               document.getElementById("a-0.890437001541234353").href = navigateTeam(document.getElementById('a-0.890437001541234353').getAttribute('team_id'), document.getElementById('a-0.890437001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7353" arena_id="7353" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890483001541234353" onlyurl="1">ŠD Slovenske Konjice</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890483001541234353") === "object") {
                               document.getElementById("a-0.890483001541234353").href = navigateArena(document.getElementById('a-0.890483001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							4
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240901&amp;league_id=undefined&amp;season_id=102587" game_id="4240901" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890577001541234353" onlyurl="1">20.10.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890577001541234353") === "object") {
                               document.getElementById("a-0.890577001541234353").href = navigateGame(document.getElementById('a-0.890577001541234353').getAttribute('game_id'), document.getElementById('a-0.890577001541234353').getAttribute('season_id'), document.getElementById('a-0.890577001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196773&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196773" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890632001541234353" onlyurl="1">Ines</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890632001541234353") === "object") {
                               document.getElementById("a-0.890632001541234353").href = navigateTeam(document.getElementById('a-0.890632001541234353').getAttribute('team_id'), document.getElementById('a-0.890632001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240901&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240901" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890686001541234353" onlyurl="1">46:<span class="mbt-v2-strong">68</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890686001541234353") === "object") {
                               document.getElementById("a-0.890686001541234353").href = navigateGame(document.getElementById('a-0.890686001541234353').getAttribute('game_id'), document.getElementById('a-0.890686001541234353').getAttribute('season_id'), document.getElementById('a-0.890686001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196693&amp;league_id=undefined&amp;season_id=102587" team_id="196693" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890736001541234353" onlyurl="1">Konjice A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890736001541234353") === "object") {
                               document.getElementById("a-0.890736001541234353").href = navigateTeam(document.getElementById('a-0.890736001541234353').getAttribute('team_id'), document.getElementById('a-0.890736001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7713" arena_id="7713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890782001541234353" onlyurl="1">ŠD Trata</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890782001541234353") === "object") {
                               document.getElementById("a-0.890782001541234353").href = navigateArena(document.getElementById('a-0.890782001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							4
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240961&amp;league_id=undefined&amp;season_id=102587" game_id="4240961" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890870001541234353" onlyurl="1">20.10.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890870001541234353") === "object") {
                               document.getElementById("a-0.890870001541234353").href = navigateGame(document.getElementById('a-0.890870001541234353').getAttribute('game_id'), document.getElementById('a-0.890870001541234353').getAttribute('season_id'), document.getElementById('a-0.890870001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619135&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4619135" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890926001541234353" onlyurl="1">Ježica B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890926001541234353") === "object") {
                               document.getElementById("a-0.890926001541234353").href = navigateTeam(document.getElementById('a-0.890926001541234353').getAttribute('team_id'), document.getElementById('a-0.890926001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240961&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240961" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.890980001541234353" onlyurl="1">51:<span class="mbt-v2-strong">57</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.890980001541234353") === "object") {
                               document.getElementById("a-0.890980001541234353").href = navigateGame(document.getElementById('a-0.890980001541234353').getAttribute('game_id'), document.getElementById('a-0.890980001541234353').getAttribute('season_id'), document.getElementById('a-0.890980001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196743&amp;league_id=undefined&amp;season_id=102587" team_id="196743" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891029001541234353" onlyurl="1">Grosuplje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891029001541234353") === "object") {
                               document.getElementById("a-0.891029001541234353").href = navigateTeam(document.getElementById('a-0.891029001541234353').getAttribute('team_id'), document.getElementById('a-0.891029001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7303" arena_id="7303" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891114001541234353" onlyurl="1">Gimnazija Bežigrad</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891114001541234353") === "object") {
                               document.getElementById("a-0.891114001541234353").href = navigateArena(document.getElementById('a-0.891114001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							4
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240957&amp;league_id=undefined&amp;season_id=102587" game_id="4240957" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891212001541234353" onlyurl="1">20.10.2018 09:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891212001541234353") === "object") {
                               document.getElementById("a-0.891212001541234353").href = navigateGame(document.getElementById('a-0.891212001541234353').getAttribute('game_id'), document.getElementById('a-0.891212001541234353').getAttribute('season_id'), document.getElementById('a-0.891212001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
													<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196733&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196733" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891270001541234353" onlyurl="1">Akson Ilirija A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891270001541234353") === "object") {
                               document.getElementById("a-0.891270001541234353").href = navigateTeam(document.getElementById('a-0.891270001541234353').getAttribute('team_id'), document.getElementById('a-0.891270001541234353').getAttribute('season_id'));
                            }
                        </script>
															            							</span>
								            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240957&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240957" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891328001541234353" onlyurl="1"><span class="mbt-v2-strong">53</span>:49</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891328001541234353") === "object") {
                               document.getElementById("a-0.891328001541234353").href = navigateGame(document.getElementById('a-0.891328001541234353').getAttribute('game_id'), document.getElementById('a-0.891328001541234353').getAttribute('season_id'), document.getElementById('a-0.891328001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196783&amp;league_id=undefined&amp;season_id=102587" team_id="196783" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891378001541234353" onlyurl="1">Triglav</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891378001541234353") === "object") {
                               document.getElementById("a-0.891378001541234353").href = navigateTeam(document.getElementById('a-0.891378001541234353').getAttribute('team_id'), document.getElementById('a-0.891378001541234353').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7203" arena_id="7203" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891423001541234353" onlyurl="1">Ježica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891423001541234353") === "object") {
                               document.getElementById("a-0.891423001541234353").href = navigateArena(document.getElementById('a-0.891423001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							4
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4241021&amp;league_id=undefined&amp;season_id=102587" game_id="4241021" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891512001541234353" onlyurl="1">19.10.2018 17:30</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891512001541234353") === "object") {
                               document.getElementById("a-0.891512001541234353").href = navigateGame(document.getElementById('a-0.891512001541234353').getAttribute('game_id'), document.getElementById('a-0.891512001541234353').getAttribute('season_id'), document.getElementById('a-0.891512001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
													<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196683&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196683" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891569001541234353" onlyurl="1">Cinkarna Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891569001541234353") === "object") {
                               document.getElementById("a-0.891569001541234353").href = navigateTeam(document.getElementById('a-0.891569001541234353').getAttribute('team_id'), document.getElementById('a-0.891569001541234353').getAttribute('season_id'));
                            }
                        </script>
															            							</span>
								            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4241021&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4241021" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891623001541234353" onlyurl="1"><span class="mbt-v2-strong">93</span>:38</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891623001541234353") === "object") {
                               document.getElementById("a-0.891623001541234353").href = navigateGame(document.getElementById('a-0.891623001541234353').getAttribute('game_id'), document.getElementById('a-0.891623001541234353').getAttribute('season_id'), document.getElementById('a-0.891623001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196723&amp;league_id=undefined&amp;season_id=102587" team_id="196723" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891673001541234353" onlyurl="1">Domžale</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891673001541234353") === "object") {
                               document.getElementById("a-0.891673001541234353").href = navigateTeam(document.getElementById('a-0.891673001541234353').getAttribute('team_id'), document.getElementById('a-0.891673001541234353').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7223" arena_id="7223" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891718001541234353" onlyurl="1">Gimnazija Celje - Center</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891718001541234353") === "object") {
                               document.getElementById("a-0.891718001541234353").href = navigateArena(document.getElementById('a-0.891718001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							3
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4241013&amp;league_id=undefined&amp;season_id=102587" game_id="4241013" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891806001541234353" onlyurl="1">17.10.2018 19:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891806001541234353") === "object") {
                               document.getElementById("a-0.891806001541234353").href = navigateGame(document.getElementById('a-0.891806001541234353').getAttribute('game_id'), document.getElementById('a-0.891806001541234353').getAttribute('season_id'), document.getElementById('a-0.891806001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196723&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196723" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891863001541234353" onlyurl="1">Domžale</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891863001541234353") === "object") {
                               document.getElementById("a-0.891863001541234353").href = navigateTeam(document.getElementById('a-0.891863001541234353').getAttribute('team_id'), document.getElementById('a-0.891863001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4241013&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4241013" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891916001541234353" onlyurl="1">61:<span class="mbt-v2-strong">70</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891916001541234353") === "object") {
                               document.getElementById("a-0.891916001541234353").href = navigateGame(document.getElementById('a-0.891916001541234353').getAttribute('game_id'), document.getElementById('a-0.891916001541234353').getAttribute('season_id'), document.getElementById('a-0.891916001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196673&amp;league_id=undefined&amp;season_id=102587" team_id="196673" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.891967001541234353" onlyurl="1">Maribor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.891967001541234353") === "object") {
                               document.getElementById("a-0.891967001541234353").href = navigateTeam(document.getElementById('a-0.891967001541234353').getAttribute('team_id'), document.getElementById('a-0.891967001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7163" arena_id="7163" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892013001541234353" onlyurl="1">OŠ Venclja Perka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892013001541234353") === "object") {
                               document.getElementById("a-0.892013001541234353").href = navigateArena(document.getElementById('a-0.892013001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							3
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240891&amp;league_id=undefined&amp;season_id=102587" game_id="4240891" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892099001541234353" onlyurl="1">17.10.2018 18:15</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892099001541234353") === "object") {
                               document.getElementById("a-0.892099001541234353").href = navigateGame(document.getElementById('a-0.892099001541234353').getAttribute('game_id'), document.getElementById('a-0.892099001541234353').getAttribute('season_id'), document.getElementById('a-0.892099001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196773&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196773" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892153001541234353" onlyurl="1">Ines</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892153001541234353") === "object") {
                               document.getElementById("a-0.892153001541234353").href = navigateTeam(document.getElementById('a-0.892153001541234353').getAttribute('team_id'), document.getElementById('a-0.892153001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240891&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240891" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892207001541234353" onlyurl="1">41:<span class="mbt-v2-strong">74</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892207001541234353") === "object") {
                               document.getElementById("a-0.892207001541234353").href = navigateGame(document.getElementById('a-0.892207001541234353').getAttribute('game_id'), document.getElementById('a-0.892207001541234353').getAttribute('season_id'), document.getElementById('a-0.892207001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196763&amp;league_id=undefined&amp;season_id=102587" team_id="196763" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892257001541234353" onlyurl="1">Ježica A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892257001541234353") === "object") {
                               document.getElementById("a-0.892257001541234353").href = navigateTeam(document.getElementById('a-0.892257001541234353').getAttribute('team_id'), document.getElementById('a-0.892257001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7713" arena_id="7713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892304001541234353" onlyurl="1">ŠD Trata</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892304001541234353") === "object") {
                               document.getElementById("a-0.892304001541234353").href = navigateArena(document.getElementById('a-0.892304001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							3
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240955&amp;league_id=undefined&amp;season_id=102587" game_id="4240955" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892391001541234353" onlyurl="1">13.10.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892391001541234353") === "object") {
                               document.getElementById("a-0.892391001541234353").href = navigateGame(document.getElementById('a-0.892391001541234353').getAttribute('game_id'), document.getElementById('a-0.892391001541234353').getAttribute('season_id'), document.getElementById('a-0.892391001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4612259&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4612259" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892445001541234353" onlyurl="1">Vipava</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892445001541234353") === "object") {
                               document.getElementById("a-0.892445001541234353").href = navigateTeam(document.getElementById('a-0.892445001541234353').getAttribute('team_id'), document.getElementById('a-0.892445001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240955&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240955" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892499001541234353" onlyurl="1">43:<span class="mbt-v2-strong">92</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892499001541234353") === "object") {
                               document.getElementById("a-0.892499001541234353").href = navigateGame(document.getElementById('a-0.892499001541234353').getAttribute('game_id'), document.getElementById('a-0.892499001541234353').getAttribute('season_id'), document.getElementById('a-0.892499001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196783&amp;league_id=undefined&amp;season_id=102587" team_id="196783" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892548001541234353" onlyurl="1">Triglav</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892548001541234353") === "object") {
                               document.getElementById("a-0.892548001541234353").href = navigateTeam(document.getElementById('a-0.892548001541234353').getAttribute('team_id'), document.getElementById('a-0.892548001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=9133" arena_id="9133" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892594001541234353" onlyurl="1">OŠ Draga Bajca</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892594001541234353") === "object") {
                               document.getElementById("a-0.892594001541234353").href = navigateArena(document.getElementById('a-0.892594001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							3
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240893&amp;league_id=undefined&amp;season_id=102587" game_id="4240893" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892681001541234353" onlyurl="1">13.10.2018 09:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892681001541234353") === "object") {
                               document.getElementById("a-0.892681001541234353").href = navigateGame(document.getElementById('a-0.892681001541234353').getAttribute('game_id'), document.getElementById('a-0.892681001541234353').getAttribute('season_id'), document.getElementById('a-0.892681001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
													<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196693&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196693" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892736001541234353" onlyurl="1">Konjice A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892736001541234353") === "object") {
                               document.getElementById("a-0.892736001541234353").href = navigateTeam(document.getElementById('a-0.892736001541234353').getAttribute('team_id'), document.getElementById('a-0.892736001541234353').getAttribute('season_id'));
                            }
                        </script>
															            							</span>
								            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240893&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240893" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892790001541234353" onlyurl="1"><span class="mbt-v2-strong">113</span>:40</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892790001541234353") === "object") {
                               document.getElementById("a-0.892790001541234353").href = navigateGame(document.getElementById('a-0.892790001541234353').getAttribute('game_id'), document.getElementById('a-0.892790001541234353').getAttribute('season_id'), document.getElementById('a-0.892790001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4675157&amp;league_id=undefined&amp;season_id=102587" team_id="4675157" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892839001541234353" onlyurl="1">Orli Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892839001541234353") === "object") {
                               document.getElementById("a-0.892839001541234353").href = navigateTeam(document.getElementById('a-0.892839001541234353').getAttribute('team_id'), document.getElementById('a-0.892839001541234353').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7353" arena_id="7353" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892885001541234353" onlyurl="1">ŠD Slovenske Konjice</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892885001541234353") === "object") {
                               document.getElementById("a-0.892885001541234353").href = navigateArena(document.getElementById('a-0.892885001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							3
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240953&amp;league_id=undefined&amp;season_id=102587" game_id="4240953" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.892971001541234353" onlyurl="1">13.10.2018 09:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.892971001541234353") === "object") {
                               document.getElementById("a-0.892971001541234353").href = navigateGame(document.getElementById('a-0.892971001541234353').getAttribute('game_id'), document.getElementById('a-0.892971001541234353').getAttribute('season_id'), document.getElementById('a-0.892971001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
													<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196743&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196743" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893027001541234353" onlyurl="1">Grosuplje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893027001541234353") === "object") {
                               document.getElementById("a-0.893027001541234353").href = navigateTeam(document.getElementById('a-0.893027001541234353').getAttribute('team_id'), document.getElementById('a-0.893027001541234353').getAttribute('season_id'));
                            }
                        </script>
															            							</span>
								            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240953&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240953" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893080001541234353" onlyurl="1"><span class="mbt-v2-strong">86</span>:28</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893080001541234353") === "object") {
                               document.getElementById("a-0.893080001541234353").href = navigateGame(document.getElementById('a-0.893080001541234353').getAttribute('game_id'), document.getElementById('a-0.893080001541234353').getAttribute('season_id'), document.getElementById('a-0.893080001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196713&amp;league_id=undefined&amp;season_id=102587" team_id="196713" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893129001541234353" onlyurl="1">Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893129001541234353") === "object") {
                               document.getElementById("a-0.893129001541234353").href = navigateTeam(document.getElementById('a-0.893129001541234353').getAttribute('team_id'), document.getElementById('a-0.893129001541234353').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7553" arena_id="7553" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893174001541234353" onlyurl="1">ŠD Brinje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893174001541234353") === "object") {
                               document.getElementById("a-0.893174001541234353").href = navigateArena(document.getElementById('a-0.893174001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							3
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240951&amp;league_id=undefined&amp;season_id=102587" game_id="4240951" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893259001541234353" onlyurl="1">13.10.2018 09:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893259001541234353") === "object") {
                               document.getElementById("a-0.893259001541234353").href = navigateGame(document.getElementById('a-0.893259001541234353').getAttribute('game_id'), document.getElementById('a-0.893259001541234353').getAttribute('season_id'), document.getElementById('a-0.893259001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619135&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4619135" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893314001541234353" onlyurl="1">Ježica B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893314001541234353") === "object") {
                               document.getElementById("a-0.893314001541234353").href = navigateTeam(document.getElementById('a-0.893314001541234353').getAttribute('team_id'), document.getElementById('a-0.893314001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240951&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240951" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893367001541234353" onlyurl="1">41:<span class="mbt-v2-strong">71</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893367001541234353") === "object") {
                               document.getElementById("a-0.893367001541234353").href = navigateGame(document.getElementById('a-0.893367001541234353').getAttribute('game_id'), document.getElementById('a-0.893367001541234353').getAttribute('season_id'), document.getElementById('a-0.893367001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196733&amp;league_id=undefined&amp;season_id=102587" team_id="196733" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893418001541234353" onlyurl="1">Akson Ilirija A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893418001541234353") === "object") {
                               document.getElementById("a-0.893418001541234353").href = navigateTeam(document.getElementById('a-0.893418001541234353').getAttribute('team_id'), document.getElementById('a-0.893418001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7303" arena_id="7303" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893465001541234353" onlyurl="1">Gimnazija Bežigrad</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893465001541234353") === "object") {
                               document.getElementById("a-0.893465001541234353").href = navigateArena(document.getElementById('a-0.893465001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							2
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240949&amp;league_id=undefined&amp;season_id=102587" game_id="4240949" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893552001541234353" onlyurl="1">11.10.2018 17:30</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893552001541234353") === "object") {
                               document.getElementById("a-0.893552001541234353").href = navigateGame(document.getElementById('a-0.893552001541234353').getAttribute('game_id'), document.getElementById('a-0.893552001541234353').getAttribute('season_id'), document.getElementById('a-0.893552001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893606001541234353" onlyurl="1">Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893606001541234353") === "object") {
                               document.getElementById("a-0.893606001541234353").href = navigateTeam(document.getElementById('a-0.893606001541234353').getAttribute('team_id'), document.getElementById('a-0.893606001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240949&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240949" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893659001541234353" onlyurl="1">25:<span class="mbt-v2-strong">78</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893659001541234353") === "object") {
                               document.getElementById("a-0.893659001541234353").href = navigateGame(document.getElementById('a-0.893659001541234353').getAttribute('game_id'), document.getElementById('a-0.893659001541234353').getAttribute('season_id'), document.getElementById('a-0.893659001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619135&amp;league_id=undefined&amp;season_id=102587" team_id="4619135" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893707001541234353" onlyurl="1">Ježica B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893707001541234353") === "object") {
                               document.getElementById("a-0.893707001541234353").href = navigateTeam(document.getElementById('a-0.893707001541234353').getAttribute('team_id'), document.getElementById('a-0.893707001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7183" arena_id="7183" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893752001541234353" onlyurl="1">OŠ Mirana Jarca, Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893752001541234353") === "object") {
                               document.getElementById("a-0.893752001541234353").href = navigateArena(document.getElementById('a-0.893752001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							3
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4241011&amp;league_id=undefined&amp;season_id=102587" game_id="4241011" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893838001541234353" onlyurl="1">09.10.2018 17:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893838001541234353") === "object") {
                               document.getElementById("a-0.893838001541234353").href = navigateGame(document.getElementById('a-0.893838001541234353').getAttribute('game_id'), document.getElementById('a-0.893838001541234353').getAttribute('season_id'), document.getElementById('a-0.893838001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
													<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196683&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196683" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893894001541234353" onlyurl="1">Cinkarna Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893894001541234353") === "object") {
                               document.getElementById("a-0.893894001541234353").href = navigateTeam(document.getElementById('a-0.893894001541234353').getAttribute('team_id'), document.getElementById('a-0.893894001541234353').getAttribute('season_id'));
                            }
                        </script>
															            							</span>
								            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4241011&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4241011" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893948001541234353" onlyurl="1"><span class="mbt-v2-strong">100</span>:40</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893948001541234353") === "object") {
                               document.getElementById("a-0.893948001541234353").href = navigateGame(document.getElementById('a-0.893948001541234353').getAttribute('game_id'), document.getElementById('a-0.893948001541234353').getAttribute('season_id'), document.getElementById('a-0.893948001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=268713&amp;league_id=undefined&amp;season_id=102587" team_id="268713" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.893997001541234353" onlyurl="1">Konjice B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.893997001541234353") === "object") {
                               document.getElementById("a-0.893997001541234353").href = navigateTeam(document.getElementById('a-0.893997001541234353').getAttribute('team_id'), document.getElementById('a-0.893997001541234353').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7223" arena_id="7223" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894051001541234353" onlyurl="1">Gimnazija Celje - Center</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894051001541234353") === "object") {
                               document.getElementById("a-0.894051001541234353").href = navigateArena(document.getElementById('a-0.894051001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							2
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240945&amp;league_id=undefined&amp;season_id=102587" game_id="4240945" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894140001541234353" onlyurl="1">06.10.2018 13:30</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894140001541234353") === "object") {
                               document.getElementById("a-0.894140001541234353").href = navigateGame(document.getElementById('a-0.894140001541234353').getAttribute('game_id'), document.getElementById('a-0.894140001541234353').getAttribute('season_id'), document.getElementById('a-0.894140001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
													<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196733&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196733" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894196001541234353" onlyurl="1">Akson Ilirija A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894196001541234353") === "object") {
                               document.getElementById("a-0.894196001541234353").href = navigateTeam(document.getElementById('a-0.894196001541234353').getAttribute('team_id'), document.getElementById('a-0.894196001541234353').getAttribute('season_id'));
                            }
                        </script>
															            							</span>
								            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240945&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240945" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894251001541234353" onlyurl="1"><span class="mbt-v2-strong">81</span>:43</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894251001541234353") === "object") {
                               document.getElementById("a-0.894251001541234353").href = navigateGame(document.getElementById('a-0.894251001541234353').getAttribute('game_id'), document.getElementById('a-0.894251001541234353').getAttribute('season_id'), document.getElementById('a-0.894251001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4612259&amp;league_id=undefined&amp;season_id=102587" team_id="4612259" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894300001541234353" onlyurl="1">Vipava</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894300001541234353") === "object") {
                               document.getElementById("a-0.894300001541234353").href = navigateTeam(document.getElementById('a-0.894300001541234353').getAttribute('team_id'), document.getElementById('a-0.894300001541234353').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7203" arena_id="7203" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894345001541234353" onlyurl="1">Ježica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894345001541234353") === "object") {
                               document.getElementById("a-0.894345001541234353").href = navigateArena(document.getElementById('a-0.894345001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							2
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240889&amp;league_id=undefined&amp;season_id=102587" game_id="4240889" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894433001541234353" onlyurl="1">06.10.2018 12:30</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894433001541234353") === "object") {
                               document.getElementById("a-0.894433001541234353").href = navigateGame(document.getElementById('a-0.894433001541234353').getAttribute('game_id'), document.getElementById('a-0.894433001541234353').getAttribute('season_id'), document.getElementById('a-0.894433001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4675157&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4675157" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894487001541234353" onlyurl="1">Orli Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894487001541234353") === "object") {
                               document.getElementById("a-0.894487001541234353").href = navigateTeam(document.getElementById('a-0.894487001541234353').getAttribute('team_id'), document.getElementById('a-0.894487001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240889&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240889" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894541001541234353" onlyurl="1">38:<span class="mbt-v2-strong">74</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894541001541234353") === "object") {
                               document.getElementById("a-0.894541001541234353").href = navigateGame(document.getElementById('a-0.894541001541234353').getAttribute('game_id'), document.getElementById('a-0.894541001541234353').getAttribute('season_id'), document.getElementById('a-0.894541001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196773&amp;league_id=undefined&amp;season_id=102587" team_id="196773" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894598001541234353" onlyurl="1">Ines</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894598001541234353") === "object") {
                               document.getElementById("a-0.894598001541234353").href = navigateTeam(document.getElementById('a-0.894598001541234353').getAttribute('team_id'), document.getElementById('a-0.894598001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7233" arena_id="7233" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894644001541234353" onlyurl="1">ŠC Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894644001541234353") === "object") {
                               document.getElementById("a-0.894644001541234353").href = navigateArena(document.getElementById('a-0.894644001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							2
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4241007&amp;league_id=undefined&amp;season_id=102587" game_id="4241007" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894730001541234353" onlyurl="1">06.10.2018 11:15</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894730001541234353") === "object") {
                               document.getElementById("a-0.894730001541234353").href = navigateGame(document.getElementById('a-0.894730001541234353').getAttribute('game_id'), document.getElementById('a-0.894730001541234353').getAttribute('season_id'), document.getElementById('a-0.894730001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
													<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4646257&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4646257" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894785001541234353" onlyurl="1">Akson Ilirija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894785001541234353") === "object") {
                               document.getElementById("a-0.894785001541234353").href = navigateTeam(document.getElementById('a-0.894785001541234353').getAttribute('team_id'), document.getElementById('a-0.894785001541234353').getAttribute('season_id'));
                            }
                        </script>
															            							</span>
								            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4241007&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4241007" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894838001541234353" onlyurl="1"><span class="mbt-v2-strong">83</span>:58</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894838001541234353") === "object") {
                               document.getElementById("a-0.894838001541234353").href = navigateGame(document.getElementById('a-0.894838001541234353').getAttribute('game_id'), document.getElementById('a-0.894838001541234353').getAttribute('season_id'), document.getElementById('a-0.894838001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196723&amp;league_id=undefined&amp;season_id=102587" team_id="196723" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894887001541234353" onlyurl="1">Domžale</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894887001541234353") === "object") {
                               document.getElementById("a-0.894887001541234353").href = navigateTeam(document.getElementById('a-0.894887001541234353').getAttribute('team_id'), document.getElementById('a-0.894887001541234353').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7203" arena_id="7203" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.894933001541234353" onlyurl="1">Ježica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.894933001541234353") === "object") {
                               document.getElementById("a-0.894933001541234353").href = navigateArena(document.getElementById('a-0.894933001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							2
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240887&amp;league_id=undefined&amp;season_id=102587" game_id="4240887" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895019001541234353" onlyurl="1">06.10.2018 09:30</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895019001541234353") === "object") {
                               document.getElementById("a-0.895019001541234353").href = navigateGame(document.getElementById('a-0.895019001541234353').getAttribute('game_id'), document.getElementById('a-0.895019001541234353').getAttribute('season_id'), document.getElementById('a-0.895019001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196753&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196753" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895103001541234353" onlyurl="1">Krka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895103001541234353") === "object") {
                               document.getElementById("a-0.895103001541234353").href = navigateTeam(document.getElementById('a-0.895103001541234353').getAttribute('team_id'), document.getElementById('a-0.895103001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240887&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240887" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895162001541234353" onlyurl="1">45:<span class="mbt-v2-strong">64</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895162001541234353") === "object") {
                               document.getElementById("a-0.895162001541234353").href = navigateGame(document.getElementById('a-0.895162001541234353').getAttribute('game_id'), document.getElementById('a-0.895162001541234353').getAttribute('season_id'), document.getElementById('a-0.895162001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196693&amp;league_id=undefined&amp;season_id=102587" team_id="196693" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895213001541234353" onlyurl="1">Konjice A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895213001541234353") === "object") {
                               document.getElementById("a-0.895213001541234353").href = navigateTeam(document.getElementById('a-0.895213001541234353').getAttribute('team_id'), document.getElementById('a-0.895213001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7633" arena_id="7633" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895286001541234353" onlyurl="1">Športna dvorana Marof</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895286001541234353") === "object") {
                               document.getElementById("a-0.895286001541234353").href = navigateArena(document.getElementById('a-0.895286001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							2
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240947&amp;league_id=undefined&amp;season_id=102587" game_id="4240947" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895378001541234353" onlyurl="1">06.10.2018 09:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895378001541234353") === "object") {
                               document.getElementById("a-0.895378001541234353").href = navigateGame(document.getElementById('a-0.895378001541234353').getAttribute('game_id'), document.getElementById('a-0.895378001541234353').getAttribute('season_id'), document.getElementById('a-0.895378001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
													<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196783&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895436001541234353" onlyurl="1">Triglav</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895436001541234353") === "object") {
                               document.getElementById("a-0.895436001541234353").href = navigateTeam(document.getElementById('a-0.895436001541234353').getAttribute('team_id'), document.getElementById('a-0.895436001541234353').getAttribute('season_id'));
                            }
                        </script>
															            							</span>
								            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240947&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240947" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895492001541234353" onlyurl="1"><span class="mbt-v2-strong">69</span>:32</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895492001541234353") === "object") {
                               document.getElementById("a-0.895492001541234353").href = navigateGame(document.getElementById('a-0.895492001541234353').getAttribute('game_id'), document.getElementById('a-0.895492001541234353').getAttribute('season_id'), document.getElementById('a-0.895492001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196743&amp;league_id=undefined&amp;season_id=102587" team_id="196743" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895541001541234353" onlyurl="1">Grosuplje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895541001541234353") === "object") {
                               document.getElementById("a-0.895541001541234353").href = navigateTeam(document.getElementById('a-0.895541001541234353').getAttribute('team_id'), document.getElementById('a-0.895541001541234353').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7543" arena_id="7543" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895587001541234353" onlyurl="1">ŠD Planina</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895587001541234353") === "object") {
                               document.getElementById("a-0.895587001541234353").href = navigateArena(document.getElementById('a-0.895587001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							2
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4241005&amp;league_id=undefined&amp;season_id=102587" game_id="4241005" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895674001541234353" onlyurl="1">06.10.2018 09:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895674001541234353") === "object") {
                               document.getElementById("a-0.895674001541234353").href = navigateGame(document.getElementById('a-0.895674001541234353').getAttribute('game_id'), document.getElementById('a-0.895674001541234353').getAttribute('season_id'), document.getElementById('a-0.895674001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=268713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="268713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895727001541234353" onlyurl="1">Konjice B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895727001541234353") === "object") {
                               document.getElementById("a-0.895727001541234353").href = navigateTeam(document.getElementById('a-0.895727001541234353').getAttribute('team_id'), document.getElementById('a-0.895727001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4241005&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4241005" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895780001541234353" onlyurl="1">38:<span class="mbt-v2-strong">57</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895780001541234353") === "object") {
                               document.getElementById("a-0.895780001541234353").href = navigateGame(document.getElementById('a-0.895780001541234353').getAttribute('game_id'), document.getElementById('a-0.895780001541234353').getAttribute('season_id'), document.getElementById('a-0.895780001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196703&amp;league_id=undefined&amp;season_id=102587" team_id="196703" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895830001541234353" onlyurl="1">Pomurje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895830001541234353") === "object") {
                               document.getElementById("a-0.895830001541234353").href = navigateTeam(document.getElementById('a-0.895830001541234353').getAttribute('team_id'), document.getElementById('a-0.895830001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7353" arena_id="7353" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895876001541234353" onlyurl="1">ŠD Slovenske Konjice</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895876001541234353") === "object") {
                               document.getElementById("a-0.895876001541234353").href = navigateArena(document.getElementById('a-0.895876001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240943&amp;league_id=undefined&amp;season_id=102587" game_id="4240943" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.895963001541234353" onlyurl="1">04.10.2018 17:40</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.895963001541234353") === "object") {
                               document.getElementById("a-0.895963001541234353").href = navigateGame(document.getElementById('a-0.895963001541234353').getAttribute('game_id'), document.getElementById('a-0.895963001541234353').getAttribute('season_id'), document.getElementById('a-0.895963001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
													<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196743&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196743" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896017001541234353" onlyurl="1">Grosuplje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896017001541234353") === "object") {
                               document.getElementById("a-0.896017001541234353").href = navigateTeam(document.getElementById('a-0.896017001541234353').getAttribute('team_id'), document.getElementById('a-0.896017001541234353').getAttribute('season_id'));
                            }
                        </script>
															            							</span>
								            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240943&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240943" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896070001541234353" onlyurl="1"><span class="mbt-v2-strong">59</span>:35</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896070001541234353") === "object") {
                               document.getElementById("a-0.896070001541234353").href = navigateGame(document.getElementById('a-0.896070001541234353').getAttribute('game_id'), document.getElementById('a-0.896070001541234353').getAttribute('season_id'), document.getElementById('a-0.896070001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4612259&amp;league_id=undefined&amp;season_id=102587" team_id="4612259" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896120001541234353" onlyurl="1">Vipava</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896120001541234353") === "object") {
                               document.getElementById("a-0.896120001541234353").href = navigateTeam(document.getElementById('a-0.896120001541234353').getAttribute('team_id'), document.getElementById('a-0.896120001541234353').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7553" arena_id="7553" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896165001541234353" onlyurl="1">ŠD Brinje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896165001541234353") === "object") {
                               document.getElementById("a-0.896165001541234353").href = navigateArena(document.getElementById('a-0.896165001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240879&amp;league_id=undefined&amp;season_id=102587" game_id="4240879" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896251001541234353" onlyurl="1">04.10.2018 17:30</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896251001541234353") === "object") {
                               document.getElementById("a-0.896251001541234353").href = navigateGame(document.getElementById('a-0.896251001541234353').getAttribute('game_id'), document.getElementById('a-0.896251001541234353').getAttribute('season_id'), document.getElementById('a-0.896251001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4675157&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4675157" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896304001541234353" onlyurl="1">Orli Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896304001541234353") === "object") {
                               document.getElementById("a-0.896304001541234353").href = navigateTeam(document.getElementById('a-0.896304001541234353').getAttribute('team_id'), document.getElementById('a-0.896304001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240879&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240879" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896358001541234353" onlyurl="1">32:<span class="mbt-v2-strong">77</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896358001541234353") === "object") {
                               document.getElementById("a-0.896358001541234353").href = navigateGame(document.getElementById('a-0.896358001541234353').getAttribute('game_id'), document.getElementById('a-0.896358001541234353').getAttribute('season_id'), document.getElementById('a-0.896358001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196763&amp;league_id=undefined&amp;season_id=102587" team_id="196763" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896407001541234353" onlyurl="1">Ježica A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896407001541234353") === "object") {
                               document.getElementById("a-0.896407001541234353").href = navigateTeam(document.getElementById('a-0.896407001541234353').getAttribute('team_id'), document.getElementById('a-0.896407001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7233" arena_id="7233" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896453001541234353" onlyurl="1">ŠC Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896453001541234353") === "object") {
                               document.getElementById("a-0.896453001541234353").href = navigateArena(document.getElementById('a-0.896453001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240939&amp;league_id=undefined&amp;season_id=102587" game_id="4240939" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896539001541234353" onlyurl="1">04.10.2018 17:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896539001541234353") === "object") {
                               document.getElementById("a-0.896539001541234353").href = navigateGame(document.getElementById('a-0.896539001541234353').getAttribute('game_id'), document.getElementById('a-0.896539001541234353').getAttribute('season_id'), document.getElementById('a-0.896539001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896593001541234353" onlyurl="1">Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896593001541234353") === "object") {
                               document.getElementById("a-0.896593001541234353").href = navigateTeam(document.getElementById('a-0.896593001541234353').getAttribute('team_id'), document.getElementById('a-0.896593001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240939&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240939" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896646001541234353" onlyurl="1">20:<span class="mbt-v2-strong">78</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896646001541234353") === "object") {
                               document.getElementById("a-0.896646001541234353").href = navigateGame(document.getElementById('a-0.896646001541234353').getAttribute('game_id'), document.getElementById('a-0.896646001541234353').getAttribute('season_id'), document.getElementById('a-0.896646001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196733&amp;league_id=undefined&amp;season_id=102587" team_id="196733" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896695001541234353" onlyurl="1">Akson Ilirija A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896695001541234353") === "object") {
                               document.getElementById("a-0.896695001541234353").href = navigateTeam(document.getElementById('a-0.896695001541234353').getAttribute('team_id'), document.getElementById('a-0.896695001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7183" arena_id="7183" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896741001541234353" onlyurl="1">OŠ Mirana Jarca, Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896741001541234353") === "object") {
                               document.getElementById("a-0.896741001541234353").href = navigateArena(document.getElementById('a-0.896741001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4241003&amp;league_id=undefined&amp;season_id=102587" game_id="4241003" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896828001541234353" onlyurl="1">03.10.2018 19:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896828001541234353") === "object") {
                               document.getElementById("a-0.896828001541234353").href = navigateGame(document.getElementById('a-0.896828001541234353').getAttribute('game_id'), document.getElementById('a-0.896828001541234353').getAttribute('season_id'), document.getElementById('a-0.896828001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196723&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196723" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896883001541234353" onlyurl="1">Domžale</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896883001541234353") === "object") {
                               document.getElementById("a-0.896883001541234353").href = navigateTeam(document.getElementById('a-0.896883001541234353').getAttribute('team_id'), document.getElementById('a-0.896883001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4241003&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4241003" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896936001541234353" onlyurl="1">45:<span class="mbt-v2-strong">59</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896936001541234353") === "object") {
                               document.getElementById("a-0.896936001541234353").href = navigateGame(document.getElementById('a-0.896936001541234353').getAttribute('game_id'), document.getElementById('a-0.896936001541234353').getAttribute('season_id'), document.getElementById('a-0.896936001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196703&amp;league_id=undefined&amp;season_id=102587" team_id="196703" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.896985001541234353" onlyurl="1">Pomurje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.896985001541234353") === "object") {
                               document.getElementById("a-0.896985001541234353").href = navigateTeam(document.getElementById('a-0.896985001541234353').getAttribute('team_id'), document.getElementById('a-0.896985001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7163" arena_id="7163" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897031001541234353" onlyurl="1">OŠ Venclja Perka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897031001541234353") === "object") {
                               document.getElementById("a-0.897031001541234353").href = navigateArena(document.getElementById('a-0.897031001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							2
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4241009&amp;league_id=undefined&amp;season_id=102587" game_id="4241009" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897118001541234353" onlyurl="1">03.10.2018 16:30</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897118001541234353") === "object") {
                               document.getElementById("a-0.897118001541234353").href = navigateGame(document.getElementById('a-0.897118001541234353').getAttribute('game_id'), document.getElementById('a-0.897118001541234353').getAttribute('season_id'), document.getElementById('a-0.897118001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196673&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196673" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897172001541234353" onlyurl="1">Maribor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897172001541234353") === "object") {
                               document.getElementById("a-0.897172001541234353").href = navigateTeam(document.getElementById('a-0.897172001541234353').getAttribute('team_id'), document.getElementById('a-0.897172001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4241009&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4241009" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897226001541234353" onlyurl="1">61:<span class="mbt-v2-strong">77</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897226001541234353") === "object") {
                               document.getElementById("a-0.897226001541234353").href = navigateGame(document.getElementById('a-0.897226001541234353').getAttribute('game_id'), document.getElementById('a-0.897226001541234353').getAttribute('season_id'), document.getElementById('a-0.897226001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196683&amp;league_id=undefined&amp;season_id=102587" team_id="196683" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897275001541234353" onlyurl="1">Cinkarna Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897275001541234353") === "object") {
                               document.getElementById("a-0.897275001541234353").href = navigateTeam(document.getElementById('a-0.897275001541234353').getAttribute('team_id'), document.getElementById('a-0.897275001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7013" arena_id="7013" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897322001541234353" onlyurl="1">Dvorana Tabor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897322001541234353") === "object") {
                               document.getElementById("a-0.897322001541234353").href = navigateArena(document.getElementById('a-0.897322001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240941&amp;league_id=undefined&amp;season_id=102587" game_id="4240941" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897410001541234353" onlyurl="1">29.09.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897410001541234353") === "object") {
                               document.getElementById("a-0.897410001541234353").href = navigateGame(document.getElementById('a-0.897410001541234353').getAttribute('game_id'), document.getElementById('a-0.897410001541234353').getAttribute('season_id'), document.getElementById('a-0.897410001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619135&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4619135" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897464001541234353" onlyurl="1">Ježica B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897464001541234353") === "object") {
                               document.getElementById("a-0.897464001541234353").href = navigateTeam(document.getElementById('a-0.897464001541234353').getAttribute('team_id'), document.getElementById('a-0.897464001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240941&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240941" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897519001541234353" onlyurl="1">28:<span class="mbt-v2-strong">75</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897519001541234353") === "object") {
                               document.getElementById("a-0.897519001541234353").href = navigateGame(document.getElementById('a-0.897519001541234353').getAttribute('game_id'), document.getElementById('a-0.897519001541234353').getAttribute('season_id'), document.getElementById('a-0.897519001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196783&amp;league_id=undefined&amp;season_id=102587" team_id="196783" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897569001541234353" onlyurl="1">Triglav</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897569001541234353") === "object") {
                               document.getElementById("a-0.897569001541234353").href = navigateTeam(document.getElementById('a-0.897569001541234353').getAttribute('team_id'), document.getElementById('a-0.897569001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7303" arena_id="7303" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897615001541234353" onlyurl="1">Gimnazija Bežigrad</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897615001541234353") === "object") {
                               document.getElementById("a-0.897615001541234353").href = navigateArena(document.getElementById('a-0.897615001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240999&amp;league_id=undefined&amp;season_id=102587" game_id="4240999" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897702001541234353" onlyurl="1">29.09.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897702001541234353") === "object") {
                               document.getElementById("a-0.897702001541234353").href = navigateGame(document.getElementById('a-0.897702001541234353').getAttribute('game_id'), document.getElementById('a-0.897702001541234353').getAttribute('season_id'), document.getElementById('a-0.897702001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
													<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196673&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196673" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897757001541234353" onlyurl="1">Maribor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897757001541234353") === "object") {
                               document.getElementById("a-0.897757001541234353").href = navigateTeam(document.getElementById('a-0.897757001541234353').getAttribute('team_id'), document.getElementById('a-0.897757001541234353').getAttribute('season_id'));
                            }
                        </script>
															            							</span>
								            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240999&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240999" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897811001541234353" onlyurl="1"><span class="mbt-v2-strong">92</span>:34</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897811001541234353") === "object") {
                               document.getElementById("a-0.897811001541234353").href = navigateGame(document.getElementById('a-0.897811001541234353').getAttribute('game_id'), document.getElementById('a-0.897811001541234353').getAttribute('season_id'), document.getElementById('a-0.897811001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=268713&amp;league_id=undefined&amp;season_id=102587" team_id="268713" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897860001541234353" onlyurl="1">Konjice B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897860001541234353") === "object") {
                               document.getElementById("a-0.897860001541234353").href = navigateTeam(document.getElementById('a-0.897860001541234353').getAttribute('team_id'), document.getElementById('a-0.897860001541234353').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7013" arena_id="7013" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.897907001541234353" onlyurl="1">Dvorana Tabor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.897907001541234353") === "object") {
                               document.getElementById("a-0.897907001541234353").href = navigateArena(document.getElementById('a-0.897907001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240881&amp;league_id=undefined&amp;season_id=102587" game_id="4240881" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.898008001541234353" onlyurl="1">28.09.2018 16:45</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.898008001541234353") === "object") {
                               document.getElementById("a-0.898008001541234353").href = navigateGame(document.getElementById('a-0.898008001541234353').getAttribute('game_id'), document.getElementById('a-0.898008001541234353').getAttribute('season_id'), document.getElementById('a-0.898008001541234353').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196773&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196773" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.898073001541234353" onlyurl="1">Ines</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.898073001541234353") === "object") {
                               document.getElementById("a-0.898073001541234353").href = navigateTeam(document.getElementById('a-0.898073001541234353').getAttribute('team_id'), document.getElementById('a-0.898073001541234353').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            					            						            <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240881&amp;league_id=undefined&amp;season_id=102587" season_id="102587" game_id="4240881" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.898128001541234353" onlyurl="1">41:<span class="mbt-v2-strong">59</span></a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.898128001541234353") === "object") {
                               document.getElementById("a-0.898128001541234353").href = navigateGame(document.getElementById('a-0.898128001541234353').getAttribute('game_id'), document.getElementById('a-0.898128001541234353').getAttribute('season_id'), document.getElementById('a-0.898128001541234353').getAttribute('league_id'));
                            }
                        </script>
					            					            					        			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    							<span class="mbt-v2-strong">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196753&amp;league_id=undefined&amp;season_id=102587" team_id="196753" season_id="102587" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.898177001541234353" onlyurl="1">Krka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.898177001541234353") === "object") {
                               document.getElementById("a-0.898177001541234353").href = navigateTeam(document.getElementById('a-0.898177001541234353').getAttribute('team_id'), document.getElementById('a-0.898177001541234353').getAttribute('season_id'));
                            }
                        </script>
																			</span>
								            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7713" arena_id="7713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.898223001541234353" onlyurl="1">ŠD Trata</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.898223001541234353") === "object") {
                               document.getElementById("a-0.898223001541234353").href = navigateArena(document.getElementById('a-0.898223001541234353').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
					</tbody>	
	</table>
			<div class="mbt-v2-divider"></div>
		<div class="mbt-v2-grid">
							<div class="mbt-v2-col mbt-v2-col-12">
					<ul class="mbt-v2-pagination">
																											<li class="mbt-v2-pagination-active">
																						<span>
									1
								</span>
														</li>
																					<li>	
																						<a href="#" onclick="return false;" id="33-303-page-2">
									2
								</a>
														</li>
																			<li class="mbt-v2-pagination-next">
								<a href="#" onclick="return false;" id="33-303-page-next">
									❯ 
								</a>
							</li>
											</ul>
				</div>
				
							<div class="mbt-v2-col mbt-v2-col-12 mbt-v2-grid-end">
					<a href="#" id="33-303-export" onclick="return false;" class="mbt-v2-export-link">
						Izvozi
					</a>
				</div>
				
		</div>
	
<script type="text/javascript">
//<![CDATA[

    
	var namespace = MBT.API.SafeNames.Container('33-303');

	var gamesCount = 30;

	if (gamesCount == 0 && namespace.activeTab == 0) {
		namespace.tabController[0].setActiveTab(1);
	}

	namespace.onPageClick = function(e, page) {
		
		namespace.filters.page = page;

		var params = {};

	    if(namespace.filters.stage) {
			params.stage_id = namespace.filters.stage;
		}

		if(namespace.filters.season) {
			params.season_id = namespace.filters.season;
		}

		if(namespace.filters.page) {
			params.page = namespace.filters.page;
		}

		params.filter = namespace.filters;
		
		MBT.API.History.setParam('33-303', MBT.API.History.pageIndex, 0, page);

		new MBT.API.Widgets.Widget({
			widgetId: 303,
			container: '33-303-container',
			state: 'MTk1MjA1ODc3OGE6MjA6e3M6MTc6InRlYW1fbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MjA6InNob3dfc2Vhc29uX3NlbGVjdG9yIjtzOjE6IjEiO3M6MTc6ImdhbWVfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTk6InBsYXllcl9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE3OiJ0ZWFtX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVUZWFtIjtzOjE3OiJnYW1lX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVHYW1lIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czoxODoiYXJlbmFfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTU6ImFyZW5hX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE4OiJhcmVuYV9saW5rX2hhbmRsZXIiO3M6MTM6Im5hdmlnYXRlQXJlbmEiO3M6OToibGVhZ3VlX2lkIjtzOjU6IjEwMzYzIjtzOjk6ImdhbWVfZGF5cyI7czoxOiIxIjtzOjE3OiJzaG93X3JlZmVyZWVfY2l0eSI7czoxOiIxIjtzOjEzOiJpdGVtc19vbl9wYWdlIjtzOjI6IjMwIjtzOjIwOiJzdGFnZV9sZXZlbHNfdmlzaWJsZSI7czoxOiIyIjtzOjg6InRlbXBsYXRlIjtzOjI6InYyIjtzOjY6ImZpbHRlciI7YTozOntzOjY6InNlYXNvbiI7czo2OiIxMDI1ODciO3M6NDoidHlwZSI7czoxMjoicmVzdWx0c19vbmx5IjtzOjM6InRhYiI7czoyMDoic2NoZWR1bGVfYW5kX3Jlc3VsdHMiO319',
			params: params
		}).renderPartial(namespace.filters.tab);
	}

	
																	MBT.API.Event.observe('33-303-page-2', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [2, false], 2)); 
										MBT.API.Event.observe('33-303-page-next', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [2, false], 2)); 
			


	namespace.exportSchedule = function() {

		var url = MBT.API.ServiceUrl + "widget-service/export/view/schedule_and_results?api=" + MBT.API.ApiId;

		if (MBT.API.Lang) {
			url += "&lang=" + MBT.API.Lang;
		}

		for(filter in namespace.filters) {
			if(filter == 'season') {
				namespace.filters.season_id = namespace.filters[filter];
				filter = 'season_id';
			}
			url += '&' +filter + '=' + namespace.filters[filter];
		}

		window.location = url;
	}

	MBT.API.Event.observe("33-303-export", "click", MBT.API.Function.createDelegate(namespace.exportSchedule));

		

//]]>
</script>	</div>
	</div>
</div>

<script type="text/javascript">
//<![CDATA[

	
	var namespace = MBT.API.SafeNames.Container('33-303');

	namespace.mobileMenu = new MBT.API.createResponsiveNavigation({
		menuContainer : "33-303-mbt-v2-navigation",
		mobileMenuContainer : "33-303-mobile-menu",
		mobileMenuCloseText: "Izberi",
	});

	namespace.mobileFilters = new MBT.API.createResponsiveNavigation({
		menuContainer : "33-303-filters-block",
		mobileMenuContainer : "33-303-mobile-filters-block",
		filtersMode: true
	});

	namespace.filters = {};

	namespace.filters['season'] = 102587;

	namespace.availableFilters = {};

	var filters = MBT.API.get('33-303-filters-block').childNodes;

	
			

	if(filters) {
		for(var i = 0; i <  filters.length; i++) {
	        if(filters[i].nodeType == 1 && filters[i].getAttribute('data-filter')) {
	        	namespace.availableFilters[filters[i].getAttribute('data-filter')] = filters[i].getAttribute('data-load');

	        }
		}
	}

	namespace.onFilterChange = function(e, filter, needReloadFilters) {

		namespace.filters[filter] = e.target.value;

		var params = {};

		delete namespace.filters.page;
		namespace.reloadFilters(filter, true);

		if(needReloadFilters) {
			MBT.API.History.setParam('33-303', MBT.API.History.pageIndex, 0, null);
		}
	    
	    if(namespace.filters.stage) {
			params.stage_id = namespace.filters.stage;
		}

		if(namespace.filters.season) {
			params.season_id = namespace.filters.season;
		}

		if(namespace.filters.page) {
			params.page = namespace.filters.page;
		}

		params.filter = namespace.filters;

		MBT.API.History.setParam('33-303', MBT.API.History.filterIndex, filter, e.target.value);

		new MBT.API.Widgets.Widget({
			widgetId: 303,
			container: '33-303-container',
			state: 'NDE0NzE1MTgxOWE6MTk6e3M6MTc6InRlYW1fbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MjA6InNob3dfc2Vhc29uX3NlbGVjdG9yIjtzOjE6IjEiO3M6MTc6ImdhbWVfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTk6InBsYXllcl9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE3OiJ0ZWFtX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVUZWFtIjtzOjE3OiJnYW1lX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVHYW1lIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czoxODoiYXJlbmFfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTU6ImFyZW5hX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE4OiJhcmVuYV9saW5rX2hhbmRsZXIiO3M6MTM6Im5hdmlnYXRlQXJlbmEiO3M6OToibGVhZ3VlX2lkIjtzOjU6IjEwMzYzIjtzOjk6ImdhbWVfZGF5cyI7czoxOiIxIjtzOjE3OiJzaG93X3JlZmVyZWVfY2l0eSI7czoxOiIxIjtzOjEzOiJpdGVtc19vbl9wYWdlIjtzOjI6IjMwIjtzOjIwOiJzdGFnZV9sZXZlbHNfdmlzaWJsZSI7czoxOiIyIjtzOjg6InRlbXBsYXRlIjtzOjI6InYyIjt9',
			params: params
		}).renderPartial(namespace.filters.tab);
	}

	namespace.reloadFilters = function(filter, removeHash) {

		for(key in namespace.availableFilters) {
			if(key != filter ) {
				if(key  != 'season') {
					if(removeHash) {
						MBT.API.History.setParam('33-303', MBT.API.History.filterIndex, key, null);
					}
					delete namespace.filters[key];
				}
				var params = {};

			    if(namespace.filters.stage) {
					params.stage_id = namespace.filters.stage;
				}

				if(namespace.filters.season) {
					params.season_id = namespace.filters.season;
				}
				new MBT.API.Widgets.Widget({
					widgetId: 303,
					container: '33-303-container',
					state: 'NDE0NzE1MTgxOWE6MTk6e3M6MTc6InRlYW1fbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MjA6InNob3dfc2Vhc29uX3NlbGVjdG9yIjtzOjE6IjEiO3M6MTc6ImdhbWVfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTk6InBsYXllcl9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE3OiJ0ZWFtX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVUZWFtIjtzOjE3OiJnYW1lX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVHYW1lIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czoxODoiYXJlbmFfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTU6ImFyZW5hX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE4OiJhcmVuYV9saW5rX2hhbmRsZXIiO3M6MTM6Im5hdmlnYXRlQXJlbmEiO3M6OToibGVhZ3VlX2lkIjtzOjU6IjEwMzYzIjtzOjk6ImdhbWVfZGF5cyI7czoxOiIxIjtzOjE3OiJzaG93X3JlZmVyZWVfY2l0eSI7czoxOiIxIjtzOjEzOiJpdGVtc19vbl9wYWdlIjtzOjI6IjMwIjtzOjIwOiJzdGFnZV9sZXZlbHNfdmlzaWJsZSI7czoxOiIyIjtzOjg6InRlbXBsYXRlIjtzOjI6InYyIjt9',
					params: params
				}).renderPartial(namespace.availableFilters[key]);
			}
		}
	}

	namespace.onTabClick = function(tabPanel, index, part, type) {

		namespace.activeTab = index;

		namespace.filters.type = type;
		namespace.filters.tab = part;

		var params = {};

		if(namespace.filters.page) {
			params.page = namespace.filters.page;
		}

		params.filter  =  namespace.filters;

		new MBT.API.Widgets.Widget({
			widgetId: 303,
			container: '33-303-container',
			state: 'NDE0NzE1MTgxOWE6MTk6e3M6MTc6InRlYW1fbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MjA6InNob3dfc2Vhc29uX3NlbGVjdG9yIjtzOjE6IjEiO3M6MTc6ImdhbWVfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTk6InBsYXllcl9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE3OiJ0ZWFtX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVUZWFtIjtzOjE3OiJnYW1lX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVHYW1lIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czoxODoiYXJlbmFfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTU6ImFyZW5hX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE4OiJhcmVuYV9saW5rX2hhbmRsZXIiO3M6MTM6Im5hdmlnYXRlQXJlbmEiO3M6OToibGVhZ3VlX2lkIjtzOjU6IjEwMzYzIjtzOjk6ImdhbWVfZGF5cyI7czoxOiIxIjtzOjE3OiJzaG93X3JlZmVyZWVfY2l0eSI7czoxOiIxIjtzOjEzOiJpdGVtc19vbl9wYWdlIjtzOjI6IjMwIjtzOjIwOiJzdGFnZV9sZXZlbHNfdmlzaWJsZSI7czoxOiIyIjtzOjg6InRlbXBsYXRlIjtzOjI6InYyIjt9',
			params: params
		}).renderPartial(part);
	}

	var tabs = [];
	
	var menuItems = MBT.API.get('33-303-mbt-v2-navigation').childNodes;
	
	for(var i = 0; i <  menuItems.length; i++) {
        if(menuItems[i].nodeType == 1) {
        	tabs.push({
        		tabId: menuItems[i].id,
        		needLoad: MBT.API.Function.createDelegate(namespace.onTabClick, null, [menuItems[i].getAttribute('data-name'), menuItems[i].getAttribute('data-type')], 2),
        	});
        }
	}

	
					var activeTab = 0;
			

	if (typeof (namespace.initConfig) != 'undefined') {	
		if(typeof (namespace.initConfig.filters) != 'undefined') {
			for(var key in namespace.initConfig.filters) {
				namespace.filters[key] = namespace.initConfig.filters[key].value;
				if(key == 'season' || key == 'stage') {
					namespace.reloadFilters(key, false);
				}
			}
		}

		if(typeof (namespace.initConfig.pages) != 'undefined') {
			namespace.filters.page = namespace.initConfig.pages[0].page;
		}

		if(typeof(namespace.initConfig.tabs) != 'undefined') {
			activeTab = namespace.initConfig.tabs[0].activeTab;
		}
	}

	namespace.tabController = [];

	namespace.tabController[0] = new MBT.API.UI.TabPanel({
		parentInstanceId: '33-303',
		container: '33-303-container',
		tabClass: 'mbt-v2-navigation-tab',
        activeTabClass: 'mbt-v2-navigation-tab-active',
        tabs: tabs,
        activeTab: activeTab,
        noCache: true
	});

	MBT.API.Event.observe('33-303-filter-season', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['season', true], 2));
	MBT.API.Event.observe('33-303-filter-stage', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['stage', true], 2));
	MBT.API.Event.observe('33-303-filter-game-day', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['game_day'], 1));
	MBT.API.Event.observe('33-303-filter-team', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['team'], 1));
	MBT.API.Event.observe('33-303-filter-month', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['month'], 1));
	MBT.API.Event.observe('33-303-filter-arena', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['arena'], 1));
    


//]]>
</script></div>
</div>
<div class="container">
	<div id="standings" mbt_widget="301"><div id="mbt-v2-standings-long-widget" class="mbt-v2-widget">
	<div class="mbt-v2-header">
		Lestvica
	</div>
	<div class="mbt-v2-widget-content">
                <div id="33-301-standings-container" class="mbt-v2-33-301-standings-container">									<div class="mbt-v2-table-header-before-table">1. del - Skupina 1</div>
			<div id="33-301-tables-container-1" class="mbt-v2-responsive-table-container">
				
			<div class=" mbt-v2-scrollable-table-container mbt-v2-scrollbar-horizontal" style="margin-left: 121px; height: 213px;"><div class="mbt-v2-scrollbar-track" style="display: block;"><div class="mbt-v2-scrollbar" style="left: 2px; width: 66px;"></div></div><div class="mbt-v2-bar-scroll-content"><div class="mbt-v2-bar-content"><table id="mbt-v2-standings-long-table-1" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th style="display: none;">M</th>
																						<th style="display: none;">Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										1.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196693&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196693" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.461944001541234351" onlyurl="1">Konjice A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.461944001541234351") === "object") {
                               document.getElementById("a-0.461944001541234351").href = navigateTeam(document.getElementById('a-0.461944001541234351').getAttribute('team_id'), document.getElementById('a-0.461944001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        3
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    0
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>6</td>
				                    				                												                    <td>
				                        245<span></span>/<span></span>131
				                    </td>
				                				                				                    <td>
				                        114
				                    </td>
				                												                    <td>
					                    81.7<span></span>/<span></span>43.7					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            113.0<span></span>/<span></span>40.0
				                        				                    </td>
			                    			                    					                <td>66.0<span></span>/<span></span>45.5</td>
				                				                					                <td>3<span></span>/<span></span>0</td>
				                				                					                <td>3<span></span>/<span></span>0</td>
				                				                				                    					                    <td>+3</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										2.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196763&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196763" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.462270001541234351" onlyurl="1">Ježica A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.462270001541234351") === "object") {
                               document.getElementById("a-0.462270001541234351").href = navigateTeam(document.getElementById('a-0.462270001541234351').getAttribute('team_id'), document.getElementById('a-0.462270001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        3
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        210<span></span>/<span></span>138
				                    </td>
				                				                				                    <td>
				                        72
				                    </td>
				                												                    <td>
					                    70.0<span></span>/<span></span>46.0					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            59.0<span></span>/<span></span>65.0
				                        				                    </td>
			                    			                    					                <td>75.5<span></span>/<span></span>36.5</td>
				                				                					                <td>2<span></span>/<span></span>1</td>
				                				                					                <td>2<span></span>/<span></span>1</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										3.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196753&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196753" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.462493001541234351" onlyurl="1">Krka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.462493001541234351") === "object") {
                               document.getElementById("a-0.462493001541234351").href = navigateTeam(document.getElementById('a-0.462493001541234351').getAttribute('team_id'), document.getElementById('a-0.462493001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        3
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        169<span></span>/<span></span>164
				                    </td>
				                				                				                    <td>
				                        5
				                    </td>
				                												                    <td>
					                    56.3<span></span>/<span></span>54.7					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            45.0<span></span>/<span></span>64.0
				                        				                    </td>
			                    			                    					                <td>62.0<span></span>/<span></span>50.0</td>
				                				                					                <td>2<span></span>/<span></span>1</td>
				                				                					                <td>2<span></span>/<span></span>1</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										4.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196773&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196773" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.462694001541234351" onlyurl="1">Ines</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.462694001541234351") === "object") {
                               document.getElementById("a-0.462694001541234351").href = navigateTeam(document.getElementById('a-0.462694001541234351').getAttribute('team_id'), document.getElementById('a-0.462694001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>1</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        202<span></span>/<span></span>239
				                    </td>
				                				                				                    <td>
				                        -37
				                    </td>
				                												                    <td>
					                    50.5<span></span>/<span></span>59.8					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>3				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            42.7<span></span>/<span></span>67.0
				                        				                    </td>
			                    			                    					                <td>74.0<span></span>/<span></span>38.0</td>
				                				                					                <td>1<span></span>/<span></span>3</td>
				                				                					                <td>1<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-2</td>
				                    				                				                					                <td>-3</td>
				                				                					                <td>+1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										5.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4675157&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4675157" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.462885001541234351" onlyurl="1">Orli Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.462885001541234351") === "object") {
                               document.getElementById("a-0.462885001541234351").href = navigateTeam(document.getElementById('a-0.462885001541234351').getAttribute('team_id'), document.getElementById('a-0.462885001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        3
				                    </td>
				                				                				                    				                        <td>0</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>3</td>
				                    				                												                    <td>
				                        110<span></span>/<span></span>264
				                    </td>
				                				                				                    <td>
				                        -154
				                    </td>
				                												                    <td>
					                    36.7<span></span>/<span></span>88.0					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            35.0<span></span>/<span></span>75.5
				                        				                    </td>
			                    			                    					                <td>40.0<span></span>/<span></span>113.0</td>
				                				                					                <td>0<span></span>/<span></span>3</td>
				                				                					                <td>0<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-3</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>-1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
											</tbody>
				</table></div></div></div><div class=" mbt-v2-pinned-table-container"><table class="mbt-v2-table mbt-v2-standings-long-table"><thead><tr style="height: 42px;"><th>M</th><th>Ekipa</th></tr></thead><tbody><tr style="height: 34px;"><td>
										1.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196693&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196693" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.461944001541234351" onlyurl="1">Konjice A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.461944001541234351") === "object") {
                               document.getElementById("a-0.461944001541234351").href = navigateTeam(document.getElementById('a-0.461944001541234351').getAttribute('team_id'), document.getElementById('a-0.461944001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										2.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196763&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196763" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.462270001541234351" onlyurl="1">Ježica A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.462270001541234351") === "object") {
                               document.getElementById("a-0.462270001541234351").href = navigateTeam(document.getElementById('a-0.462270001541234351').getAttribute('team_id'), document.getElementById('a-0.462270001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										3.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196753&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196753" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.462493001541234351" onlyurl="1">Krka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.462493001541234351") === "object") {
                               document.getElementById("a-0.462493001541234351").href = navigateTeam(document.getElementById('a-0.462493001541234351').getAttribute('team_id'), document.getElementById('a-0.462493001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										4.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196773&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196773" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.462694001541234351" onlyurl="1">Ines</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.462694001541234351") === "object") {
                               document.getElementById("a-0.462694001541234351").href = navigateTeam(document.getElementById('a-0.462694001541234351').getAttribute('team_id'), document.getElementById('a-0.462694001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										5.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4675157&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4675157" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.462885001541234351" onlyurl="1">Orli Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.462885001541234351") === "object") {
                               document.getElementById("a-0.462885001541234351").href = navigateTeam(document.getElementById('a-0.462885001541234351').getAttribute('team_id'), document.getElementById('a-0.462885001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr></tbody></table></div></div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-1',
						tablesContainer: '33-301-tables-container-1',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina 2</div>
			<div id="33-301-tables-container-2" class="mbt-v2-responsive-table-container">
				
			<div class=" mbt-v2-scrollable-table-container mbt-v2-scrollbar-horizontal" style="margin-left: 102px; height: 247px;"><div class="mbt-v2-scrollbar-track" style="display: block;"><div class="mbt-v2-scrollbar" style="left: 2px; width: 77px;"></div></div><div class="mbt-v2-bar-scroll-content"><div class="mbt-v2-bar-content"><table id="mbt-v2-standings-long-table-2" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th style="display: none;">M</th>
																						<th style="display: none;">Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										1.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196733&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196733" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.463584001541234351" onlyurl="1">Ilirija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.463584001541234351") === "object") {
                               document.getElementById("a-0.463584001541234351").href = navigateTeam(document.getElementById('a-0.463584001541234351').getAttribute('team_id'), document.getElementById('a-0.463584001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>4</td>
				                    				                    				                        <td>
					                        							                    0
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        283<span></span>/<span></span>153
				                    </td>
				                				                				                    <td>
				                        130
				                    </td>
				                												                    <td>
					                    70.8<span></span>/<span></span>38.3					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            67.0<span></span>/<span></span>46.0
				                        				                    </td>
			                    			                    					                <td>74.5<span></span>/<span></span>30.5</td>
				                				                					                <td>4<span></span>/<span></span>0</td>
				                				                					                <td>4<span></span>/<span></span>0</td>
				                				                				                    					                    <td>+4</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>+2</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										2.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196783&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.463813001541234351" onlyurl="1">Triglav</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.463813001541234351") === "object") {
                               document.getElementById("a-0.463813001541234351").href = navigateTeam(document.getElementById('a-0.463813001541234351').getAttribute('team_id'), document.getElementById('a-0.463813001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        285<span></span>/<span></span>156
				                    </td>
				                				                				                    <td>
				                        129
				                    </td>
				                												                    <td>
					                    71.3<span></span>/<span></span>39.0					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            69.0<span></span>/<span></span>32.0
				                        				                    </td>
			                    			                    					                <td>72.0<span></span>/<span></span>41.3</td>
				                				                					                <td>3<span></span>/<span></span>1</td>
				                				                					                <td>3<span></span>/<span></span>1</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>-1</td>
				                				                				                    <td>0<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										3.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196743&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196743" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.464054001541234351" onlyurl="1">Grosuplje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.464054001541234351") === "object") {
                               document.getElementById("a-0.464054001541234351").href = navigateTeam(document.getElementById('a-0.464054001541234351').getAttribute('team_id'), document.getElementById('a-0.464054001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        234<span></span>/<span></span>183
				                    </td>
				                				                				                    <td>
				                        51
				                    </td>
				                												                    <td>
					                    58.5<span></span>/<span></span>45.8					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            72.5<span></span>/<span></span>31.5
				                        				                    </td>
			                    			                    					                <td>44.5<span></span>/<span></span>60.0</td>
				                				                					                <td>3<span></span>/<span></span>1</td>
				                				                					                <td>3<span></span>/<span></span>1</td>
				                				                				                    					                    <td>+2</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>+1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										4.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619135&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4619135" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.464277001541234351" onlyurl="1">Ježica B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.464277001541234351") === "object") {
                               document.getElementById("a-0.464277001541234351").href = navigateTeam(document.getElementById('a-0.464277001541234351').getAttribute('team_id'), document.getElementById('a-0.464277001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>1</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        198<span></span>/<span></span>228
				                    </td>
				                				                				                    <td>
				                        -30
				                    </td>
				                												                    <td>
					                    49.5<span></span>/<span></span>57.0					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>3				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            40.0<span></span>/<span></span>67.7
				                        				                    </td>
			                    			                    					                <td>78.0<span></span>/<span></span>25.0</td>
				                				                					                <td>1<span></span>/<span></span>3</td>
				                				                					                <td>1<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-2</td>
				                    				                				                					                <td>-3</td>
				                				                					                <td>+1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										5.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4612259&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4612259" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.464469001541234351" onlyurl="1">Vipava</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.464469001541234351") === "object") {
                               document.getElementById("a-0.464469001541234351").href = navigateTeam(document.getElementById('a-0.464469001541234351').getAttribute('team_id'), document.getElementById('a-0.464469001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>1</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        171<span></span>/<span></span>257
				                    </td>
				                				                				                    <td>
				                        -86
				                    </td>
				                												                    <td>
					                    42.8<span></span>/<span></span>64.3					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            43.0<span></span>/<span></span>92.0
				                        				                    </td>
			                    			                    					                <td>42.7<span></span>/<span></span>55.0</td>
				                				                					                <td>1<span></span>/<span></span>3</td>
				                				                					                <td>1<span></span>/<span></span>3</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>+1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										6.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.464686001541234351" onlyurl="1">Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.464686001541234351") === "object") {
                               document.getElementById("a-0.464686001541234351").href = navigateTeam(document.getElementById('a-0.464686001541234351').getAttribute('team_id'), document.getElementById('a-0.464686001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>0</td>
				                    				                    				                        <td>
					                        							                    4
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>4</td>
				                    				                												                    <td>
				                        98<span></span>/<span></span>292
				                    </td>
				                				                				                    <td>
				                        -194
				                    </td>
				                												                    <td>
					                    24.5<span></span>/<span></span>73.0					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>3				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            23.3<span></span>/<span></span>68.7
				                        				                    </td>
			                    			                    					                <td>28.0<span></span>/<span></span>86.0</td>
				                				                					                <td>0<span></span>/<span></span>4</td>
				                				                					                <td>0<span></span>/<span></span>4</td>
				                				                				                    					                    <td>-4</td>
				                    				                				                					                <td>-3</td>
				                				                					                <td>-1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
											</tbody>
				</table></div></div></div><div class=" mbt-v2-pinned-table-container"><table class="mbt-v2-table mbt-v2-standings-long-table"><thead><tr style="height: 42px;"><th>M</th><th>Ekipa</th></tr></thead><tbody><tr style="height: 34px;"><td>
										1.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196733&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196733" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.463584001541234351" onlyurl="1">Ilirija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.463584001541234351") === "object") {
                               document.getElementById("a-0.463584001541234351").href = navigateTeam(document.getElementById('a-0.463584001541234351').getAttribute('team_id'), document.getElementById('a-0.463584001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										2.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196783&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.463813001541234351" onlyurl="1">Triglav</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.463813001541234351") === "object") {
                               document.getElementById("a-0.463813001541234351").href = navigateTeam(document.getElementById('a-0.463813001541234351').getAttribute('team_id'), document.getElementById('a-0.463813001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										3.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196743&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196743" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.464054001541234351" onlyurl="1">Grosuplje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.464054001541234351") === "object") {
                               document.getElementById("a-0.464054001541234351").href = navigateTeam(document.getElementById('a-0.464054001541234351').getAttribute('team_id'), document.getElementById('a-0.464054001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										4.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619135&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4619135" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.464277001541234351" onlyurl="1">Ježica B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.464277001541234351") === "object") {
                               document.getElementById("a-0.464277001541234351").href = navigateTeam(document.getElementById('a-0.464277001541234351').getAttribute('team_id'), document.getElementById('a-0.464277001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										5.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4612259&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4612259" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.464469001541234351" onlyurl="1">Vipava</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.464469001541234351") === "object") {
                               document.getElementById("a-0.464469001541234351").href = navigateTeam(document.getElementById('a-0.464469001541234351').getAttribute('team_id'), document.getElementById('a-0.464469001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										6.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.464686001541234351" onlyurl="1">Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.464686001541234351") === "object") {
                               document.getElementById("a-0.464686001541234351").href = navigateTeam(document.getElementById('a-0.464686001541234351').getAttribute('team_id'), document.getElementById('a-0.464686001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr></tbody></table></div></div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-2',
						tablesContainer: '33-301-tables-container-2',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina 3</div>
			<div id="33-301-tables-container-3" class="mbt-v2-responsive-table-container">
				
			<div class=" mbt-v2-scrollable-table-container mbt-v2-scrollbar-horizontal" style="margin-left: 101px; height: 247px;"><div class="mbt-v2-scrollbar-track" style="display: block;"><div class="mbt-v2-scrollbar" style="left: 2px; width: 78px;"></div></div><div class="mbt-v2-bar-scroll-content"><div class="mbt-v2-bar-content"><table id="mbt-v2-standings-long-table-3" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th style="display: none;">M</th>
																						<th style="display: none;">Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										1.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196683&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196683" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.465353001541234351" onlyurl="1">Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.465353001541234351") === "object") {
                               document.getElementById("a-0.465353001541234351").href = navigateTeam(document.getElementById('a-0.465353001541234351').getAttribute('team_id'), document.getElementById('a-0.465353001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>4</td>
				                    				                    				                        <td>
					                        							                    0
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        345<span></span>/<span></span>172
				                    </td>
				                				                				                    <td>
				                        173
				                    </td>
				                												                    <td>
					                    86.3<span></span>/<span></span>43.0					                </td>
				                				                				                    <td>
				                        3<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            89.3<span></span>/<span></span>37.0
				                        				                    </td>
			                    			                    					                <td>77.0<span></span>/<span></span>61.0</td>
				                				                					                <td>4<span></span>/<span></span>0</td>
				                				                					                <td>4<span></span>/<span></span>0</td>
				                				                				                    					                    <td>+4</td>
				                    				                				                					                <td>+3</td>
				                				                					                <td>+1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										2.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4646257&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4646257" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.465572001541234351" onlyurl="1">Ilirija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.465572001541234351") === "object") {
                               document.getElementById("a-0.465572001541234351").href = navigateTeam(document.getElementById('a-0.465572001541234351').getAttribute('team_id'), document.getElementById('a-0.465572001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        268<span></span>/<span></span>228
				                    </td>
				                				                				                    <td>
				                        40
				                    </td>
				                												                    <td>
					                    67.0<span></span>/<span></span>57.0					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            83.0<span></span>/<span></span>58.0
				                        				                    </td>
			                    			                    					                <td>61.7<span></span>/<span></span>56.7</td>
				                				                					                <td>3<span></span>/<span></span>1</td>
				                				                					                <td>3<span></span>/<span></span>1</td>
				                				                				                    					                    <td>+3</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>+2</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										3.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196673&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196673" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.465761001541234351" onlyurl="1">Maribor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.465761001541234351") === "object") {
                               document.getElementById("a-0.465761001541234351").href = navigateTeam(document.getElementById('a-0.465761001541234351').getAttribute('team_id'), document.getElementById('a-0.465761001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        3
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        223<span></span>/<span></span>172
				                    </td>
				                				                				                    <td>
				                        51
				                    </td>
				                												                    <td>
					                    74.3<span></span>/<span></span>57.3					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            76.5<span></span>/<span></span>55.5
				                        				                    </td>
			                    			                    					                <td>70.0<span></span>/<span></span>61.0</td>
				                				                					                <td>2<span></span>/<span></span>1</td>
				                				                					                <td>2<span></span>/<span></span>1</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>+1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										4.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196703&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196703" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.465968001541234351" onlyurl="1">Pomurje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.465968001541234351") === "object") {
                               document.getElementById("a-0.465968001541234351").href = navigateTeam(document.getElementById('a-0.465968001541234351').getAttribute('team_id'), document.getElementById('a-0.465968001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        3
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        167<span></span>/<span></span>135
				                    </td>
				                				                				                    <td>
				                        32
				                    </td>
				                												                    <td>
					                    55.7<span></span>/<span></span>45.0					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            51.0<span></span>/<span></span>52.0
				                        				                    </td>
			                    			                    					                <td>58.0<span></span>/<span></span>41.5</td>
				                				                					                <td>2<span></span>/<span></span>1</td>
				                				                					                <td>2<span></span>/<span></span>1</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										5.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196723&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196723" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.466170001541234351" onlyurl="1">Domžale</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.466170001541234351") === "object") {
                               document.getElementById("a-0.466170001541234351").href = navigateTeam(document.getElementById('a-0.466170001541234351').getAttribute('team_id'), document.getElementById('a-0.466170001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>0</td>
				                    				                    				                        <td>
					                        							                    4
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>4</td>
				                    				                												                    <td>
				                        202<span></span>/<span></span>305
				                    </td>
				                				                				                    <td>
				                        -103
				                    </td>
				                												                    <td>
					                    50.5<span></span>/<span></span>76.3					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            53.0<span></span>/<span></span>64.5
				                        				                    </td>
			                    			                    					                <td>48.0<span></span>/<span></span>88.0</td>
				                				                					                <td>0<span></span>/<span></span>4</td>
				                				                					                <td>0<span></span>/<span></span>4</td>
				                				                				                    					                    <td>-4</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>-2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr style="height: 34px;">
																	<td style="display: none;">
										6.
																			</td>
									
																	<td style="display: none;">
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=268713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="268713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.466363001541234351" onlyurl="1">Konjice B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.466363001541234351") === "object") {
                               document.getElementById("a-0.466363001541234351").href = navigateTeam(document.getElementById('a-0.466363001541234351').getAttribute('team_id'), document.getElementById('a-0.466363001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>0</td>
				                    				                    				                        <td>
					                        							                    4
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>4</td>
				                    				                												                    <td>
				                        156<span></span>/<span></span>349
				                    </td>
				                				                				                    <td>
				                        -193
				                    </td>
				                												                    <td>
					                    39.0<span></span>/<span></span>87.3					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            41.0<span></span>/<span></span>78.5
				                        				                    </td>
			                    			                    					                <td>37.0<span></span>/<span></span>96.0</td>
				                				                					                <td>0<span></span>/<span></span>4</td>
				                				                					                <td>0<span></span>/<span></span>4</td>
				                				                				                    					                    <td>-4</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>-2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
											</tbody>
				</table></div></div></div><div class=" mbt-v2-pinned-table-container"><table class="mbt-v2-table mbt-v2-standings-long-table"><thead><tr style="height: 42px;"><th>M</th><th>Ekipa</th></tr></thead><tbody><tr style="height: 34px;"><td>
										1.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196683&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196683" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.465353001541234351" onlyurl="1">Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.465353001541234351") === "object") {
                               document.getElementById("a-0.465353001541234351").href = navigateTeam(document.getElementById('a-0.465353001541234351').getAttribute('team_id'), document.getElementById('a-0.465353001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										2.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4646257&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4646257" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.465572001541234351" onlyurl="1">Ilirija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.465572001541234351") === "object") {
                               document.getElementById("a-0.465572001541234351").href = navigateTeam(document.getElementById('a-0.465572001541234351').getAttribute('team_id'), document.getElementById('a-0.465572001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										3.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196673&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196673" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.465761001541234351" onlyurl="1">Maribor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.465761001541234351") === "object") {
                               document.getElementById("a-0.465761001541234351").href = navigateTeam(document.getElementById('a-0.465761001541234351').getAttribute('team_id'), document.getElementById('a-0.465761001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										4.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196703&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196703" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.465968001541234351" onlyurl="1">Pomurje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.465968001541234351") === "object") {
                               document.getElementById("a-0.465968001541234351").href = navigateTeam(document.getElementById('a-0.465968001541234351').getAttribute('team_id'), document.getElementById('a-0.465968001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										5.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196723&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196723" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.466170001541234351" onlyurl="1">Domžale</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.466170001541234351") === "object") {
                               document.getElementById("a-0.466170001541234351").href = navigateTeam(document.getElementById('a-0.466170001541234351').getAttribute('team_id'), document.getElementById('a-0.466170001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr><tr style="height: 34px;"><td>
										6.
																			</td><td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=268713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="268713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.466363001541234351" onlyurl="1">Konjice B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.466363001541234351") === "object") {
                               document.getElementById("a-0.466363001541234351").href = navigateTeam(document.getElementById('a-0.466363001541234351').getAttribute('team_id'), document.getElementById('a-0.466363001541234351').getAttribute('season_id'));
                            }
                        </script>
									</td></tr></tbody></table></div></div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-3',
						tablesContainer: '33-301-tables-container-3',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
				<div id="mbt-v2-standings-long-tiebreakers" style="display:none;">
				   <div class="mbt-v2-subheader">
			   Odločitve na lestvici ob koncu
			   			</div>
			<table class="mbt-v2-table mbt-v2-tiebreakers-table mbt-v2-table-bordered">
			    <thead>
			        <tr>
			            <th>
			                M
			            </th>
			            <th>
			                Ime
			            </th>
			            <th>
			                Opis
			            </th>
			        </tr>
			    </thead>
			    <tbody>
		            		                <tr>
			                			                			                <td>
			                    1.
			                </td>
			                <td>
			                    Točke
			                </td>
			                <td>
			                    Točke
			                </td>
			            </tr>
		            		                <tr>
			                			                			                <td>
			                    2.
			                </td>
			                <td>
			                    Inner points
			                </td>
			                <td>
			                    Points counting the games between tied teams only
			                </td>
			            </tr>
		            		                <tr>
			                			                			                <td>
			                    3.
			                </td>
			                <td>
			                    Inner goal difference
			                </td>
			                <td>
			                    Goal difference between tied teams
			                </td>
			            </tr>
		            		                <tr>
			                			                			                <td>
			                    4.
			                </td>
			                <td>
			                    Inner goals
			                </td>
			                <td>
			                    Goals counting the games between tied teams only
			                </td>
			            </tr>
		            		                <tr>
			                			                			                <td>
			                    5.
			                </td>
			                <td>
			                    Razlika v koših (vse tekme)
			                </td>
			                <td>
			                    Razlika v koših (vse tekme)
			                </td>
			            </tr>
		            		                <tr>
			                			                			                <td>
			                    6.
			                </td>
			                <td>
			                    Total goals
			                </td>
			                <td>
			                    Total goals scored
			                </td>
			            </tr>
		            			    </tbody>
			</table>
			</div>
	</div>
                    <a id="mbt-v2-standings-long-tiebreakers-link" href="#" onclick="return false;">
                Odločitve na lestvici ob koncu »
            </a>
                
    </div>
</div>
<div id="33-301-tmp-container" style="display: none;"></div>


<script type="text/javascript">

//<![CDATA[


var namespace = MBT.API.SafeNames.Container('33-301');

namespace.getSeason = function () {

    var seasonId = 102587;

        

    return seasonId;
}

namespace.loadGroups = function () {

    var widget = new MBT.API.Widgets.Widget({widgetId: 301,
                        container: '33-301-tmp-container',
                        params: {
                            season_id: namespace.getSeason()
                        }});
    widget.setCallback('namespace.loadStandings');
    widget.renderPartial('get-groups'); 

}

namespace.changeSeason = function() {

    
        namespace.loadStandings();
        
}


namespace.showLegend = function() {
	if (MBT.API.get('33-301-tiebreakers')) {
		MBT.API.get('33-301-tiebreakers').style.display = "none";
	}
	if (MBT.API.get('33-301-legend')) {
		MBT.API.get('33-301-legend').style.display = "block";
	}
}

namespace.showTiebreakers = function() {
    var el = MBT.API.get('mbt-v2-standings-long-tiebreakers');
	if (el.style.display == "block") {
        el.style.display = 'none';
	} else {
        el.style.display = 'block';
    }
}



MBT.API.Event.observe('33-301-legend-link', "click", namespace.showLegend);
MBT.API.Event.observe('mbt-v2-standings-long-tiebreakers-link', "click", namespace.showTiebreakers);



namespace.loadStandings = function() {
    new MBT.API.Widgets.Widget({
        widgetId: 301, 
        container: '33-301-standings-container',
        state: 'IDM4MDMwODk3NmE6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMiI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMiI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjI3OiJmdWxsX3N0YW5kaW5nc19saW5rX3Zpc2libGUiO3M6MToiMiI7czoyMDoic3RhZ2VfbGV2ZWxzX3Zpc2libGUiO3M6MToiMiI7czo5OiJsZWFndWVfaWQiO3M6NToiMTAzNjMiO3M6MTQ6InRlYW1fbGlua190eXBlIjtzOjE6IjMiO3M6MTc6InRlYW1fbGlua19oYW5kbGVyIjtzOjEyOiJuYXZpZ2F0ZVRlYW0iO3M6MjQ6ImZ1bGxfc3RhbmRpbmdzX2xpbmtfdHlwZSI7czoxOiIzIjtzOjI3OiJmdWxsX3N0YW5kaW5nc19saW5rX2hhbmRsZXIiO3M6MTc6Im5hdmlnYXRlU3RhbmRpbmdzIjtzOjg6InRlbXBsYXRlIjtzOjI6InYyIjt9',
        params: {
            season_id: namespace.getSeason(),
            showTeamLogo:'',
            teamLogoSize: '20x20'
        }
    }).renderPartial("table");
    
}


namespace.applyFilter = function(pl, newSearch) {
	namespace = MBT.API.SafeNames.Container('33-301');
	namespace.loadStandings();
};

try {
	if (MBT.API.History.notFound[MBT.API.History.filterIndex] && MBT.API.History.notFound[MBT.API.History.filterIndex]['group'] > 0) {
		MBT.API.get('33-301-filter-group').value = MBT.API.History.notFound[MBT.API.History.filterIndex]['group'];
		
	}
} catch (e) {}

namespace.loadStandings();

    MBT.API.Event.observe('33-301-filter-season', "change", namespace.changeSeason );

//]]>	
</script></div>
</div>
<div class="container">
	<div id="standings">
		&nbsp;</div>
</div>
<div class="container">
	<div id="stats-player" mbt_widget="600"><div id="mbt-v2-players-stats" class="mbt-v2-widget">
	<div class="mbt-v2-header">
					Statistika
			
	</div>
	<div class="mbt-v2-widget-content">
		<div id="33-600-mobile-menu" class="mbt-v2-mobile-menu">
			Povprečje
		</div>
		<nav id="33-600-mbt-v2-navigation" class="mbt-v2-navigation">
			<div id="33-600-tab-0" data-name="averages" class="mbt-v2-navigation-tab-active" prevclassname="mbt-v2-navigation-tab-active">
				Povprečje
			</div>
			<div id="33-600-tab-1" data-name="highs" class="mbt-v2-navigation-tab">
				Rekordi
			</div>
		    <div id="33-600-tab-2" data-name="totals" class="mbt-v2-navigation-tab">
				Skupno
			</div>
					</nav>
		<div class="mbt-v2-divider"></div>
		<div id="33-600-mobile-filters-block" class="mbt-v2-mobile-filters-block">
			Filtri
		</div>
		<div id="33-600-filters-block" class="mbt-v2-filters-block">
			<select id="33-600-filter-stats" data-name="stat_cat" class="mbt-v2-select"><option value="pts">Točke</option><option value="rt">Skoki</option><option value="eq">Valorizacija</option><option value="as">Asistence</option><option value="sec">Minute</option><option value="2a">Št. metov za 2 točki</option><option value="2m">Št. zadetih metov za 2 točki</option><option value="2p">% za 2 točki</option><option value="3a">Št. metov za 3 točke</option><option value="3m">Zadeti meti za 3 točke</option><option value="3p">% za 3 točke</option><option value="1a">Izvedeni prosti meti</option><option value="1m">Zadeti prosti meti</option><option value="1p">% prosti meti</option><option value="ro">Napadalni skoki</option><option value="rd">Skoki v obrambi</option><option value="to">Izg. žoge</option><option value="st">Prid. žoge</option><option value="as_to">Asistence/izg. žoge</option><option value="st_to">Prid./izg. žoge</option><option value="dd">Dvojni dvojčki</option><option value="plusminus">+/-</option></select>
		    			    <select id="33-600-filter-season" data-name="season_id" class="mbt-v2-select">
					<option value="">
						Vse sezone
					</option>
													<option value="102587" selected="selected">
								2018-2019
							</option>
													<option value="97915">
								2017-2018
							</option>
													<option value="93983">
								2016-2017
							</option>
													<option value="91069">
								2015-2016
							</option>
													<option value="89559">
								2014-2015
							</option>
													<option value="85631">
								2013-2014
							</option>
													<option value="63243">
								2012-2013
							</option>
													<option value="15443">
								2011-2012
							</option>
										</select>
									<select id="33-600-filter-stage" data-name="stage_id" class="mbt-v2-select">
				<option value="">
					Vsi deli tekmovanji
				</option>
															<option value="209263">
							1. del
						</option>
												</select>
							<select id="33-600-filter-team" data-name="team_id" class="mbt-v2-select">
					<option value="">
						Vse ekipe
					</option>
											<option value="196733">
							Akson Ilirija A
						</option>
											<option value="4646257">
							Akson Ilirija B
						</option>
											<option value="196683">
							Cinkarna Celje
						</option>
											<option value="196713">
							Črnomelj
						</option>
											<option value="196723">
							Domžale
						</option>
											<option value="196743">
							Grosuplje
						</option>
											<option value="196773">
							Ines
						</option>
											<option value="196763">
							Ježica A
						</option>
											<option value="4619135">
							Ježica B
						</option>
											<option value="196693">
							Konjice A
						</option>
											<option value="268713">
							Konjice B
						</option>
											<option value="196753">
							Krka
						</option>
											<option value="196673">
							Maribor
						</option>
											<option value="4675157">
							Orli Postojna
						</option>
											<option value="196703">
							Pomurje
						</option>
											<option value="196783">
							Triglav
						</option>
											<option value="4612259">
							Vipava
						</option>
									</select>
						<select id="33-600-filter-position" data-name="position" class="mbt-v2-select">
				<option value="">
					Vsa igralna mesta
				</option>
									<option value="1">
						Krilo
					</option>
									<option value="2">
						Branilec
					</option>
									<option value="3">
						Center
					</option>
									<option value="4">
						Organizator igre
					</option>
									<option value="5">
						Branilec
					</option>
									<option value="6">
						Krilo
					</option>
									<option value="7">
						Krilni center
					</option>
									<option value="8">
						Branilec/Krilo
					</option>
									<option value="9">
						Krilo/Center
					</option>
									<option value="10">
						PG/SG
					</option>
									<option value="11">
						SG/SF
					</option>
									<option value="12">
						SF/PF
					</option>
									<option value="13">
						PF/C
					</option>
							</select>
		</div>
		<div class="mbt-v2-divider"></div>
	    <div id="33-600-tab-container">	<div class="mbt-v2-divider"></div>
	<div class="mbt-v2-subheader">
		Točke
	</div>
	<div class="mbt-v2-players-stats-top-players">
					<div class="mbt-v2-players-stats-top-players-line">
				<div class="mbt-v2-grid mbt-v2-align-items-vertically">
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
							<div class="mbt-v2-col mbt-v2-col-2">
																	<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=1005943&amp;version=50x70" class="mbt-v2-image" alt="Uma Bobić">
									
							</div>
							<div class="mbt-v2-col mbt-v2-col-7">
								<div class="mbt-v2-players-stats-top-player-category">
									#1
								</div>
								<div class="mbt-v2-players-stats-top-player-name">
									<a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=5562867" season_id="102587" player_id="5562867" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.593647001541234351" onlyurl="1">Uma Bobić</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.593647001541234351") === "object") {
                               document.getElementById("a-0.593647001541234351").href = navigatePlayer(document.getElementById('a-0.593647001541234351').getAttribute('player_id'), document.getElementById('a-0.593647001541234351').getAttribute('season_id'));
                            }
                        </script>
								</div>
								<div class="mbt-v2-players-stats-top-player-bio">
									183 cm,																		15 Let																	</div>
							</div>
															<div class="mbt-v2-col mbt-v2-col-3">
									<div class="mbt-v2-players-stats-top-player-team">
																					<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=543011&amp;version=50x70" class="mbt-v2-image" alt="Krka">
			                            									</div>	
								</div>
								
						</div>
					</div>
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6 mbt-v2-grid-end">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
															<div class="mbt-v2-col mbt-v2-col-4">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
											3
										</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Skupno<br>Tekme
										</div>
									</div>
								</div>
																	<div class="mbt-v2-col mbt-v2-col-4">
										<div class="mbt-v2-players-stats-top-players-stats">
											<div class="mbt-v2-players-stats-top-players-value">
																									64
													
											</div>
											<div class="mbt-v2-players-stats-top-players-value-desc">
												Skupno<br>
		                                         
													Točke
													
											</div>
										</div>
									</div>
									
								<div class="mbt-v2-col mbt-v2-col-4 mbt-v2-grid-end">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
																							21.33
																					</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Povprečje<br>Točke
										</div>
									</div>
								</div>
								
						</div>
					</div>
				</div>
			</div>
					<div class="mbt-v2-players-stats-top-players-line">
				<div class="mbt-v2-grid mbt-v2-align-items-vertically">
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
							<div class="mbt-v2-col mbt-v2-col-2">
																	<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=1181387&amp;version=50x70" class="mbt-v2-image" alt="Jite Sophia Gbemuotor">
									
							</div>
							<div class="mbt-v2-col mbt-v2-col-7">
								<div class="mbt-v2-players-stats-top-player-category">
									#2
								</div>
								<div class="mbt-v2-players-stats-top-player-name">
									<a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=5639733" season_id="102587" player_id="5639733" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.593964001541234351" onlyurl="1">Jite Sophia Gbemuotor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.593964001541234351") === "object") {
                               document.getElementById("a-0.593964001541234351").href = navigatePlayer(document.getElementById('a-0.593964001541234351').getAttribute('player_id'), document.getElementById('a-0.593964001541234351').getAttribute('season_id'));
                            }
                        </script>
								</div>
								<div class="mbt-v2-players-stats-top-player-bio">
																											14 Let																	</div>
							</div>
															<div class="mbt-v2-col mbt-v2-col-3">
									<div class="mbt-v2-players-stats-top-player-team">
																					<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=953695&amp;version=50x70" class="mbt-v2-image" alt="Cinkarna Celje">
			                            									</div>	
								</div>
								
						</div>
					</div>
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6 mbt-v2-grid-end">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
															<div class="mbt-v2-col mbt-v2-col-4">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
											3
										</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Skupno<br>Tekme
										</div>
									</div>
								</div>
																	<div class="mbt-v2-col mbt-v2-col-4">
										<div class="mbt-v2-players-stats-top-players-stats">
											<div class="mbt-v2-players-stats-top-players-value">
																									59
													
											</div>
											<div class="mbt-v2-players-stats-top-players-value-desc">
												Skupno<br>
		                                         
													Točke
													
											</div>
										</div>
									</div>
									
								<div class="mbt-v2-col mbt-v2-col-4 mbt-v2-grid-end">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
																							19.67
																					</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Povprečje<br>Točke
										</div>
									</div>
								</div>
								
						</div>
					</div>
				</div>
			</div>
					<div class="mbt-v2-players-stats-top-players-line">
				<div class="mbt-v2-grid mbt-v2-align-items-vertically">
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
							<div class="mbt-v2-col mbt-v2-col-2">
																	<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=1194229&amp;version=50x70" class="mbt-v2-image" alt="Tina Vide">
									
							</div>
							<div class="mbt-v2-col mbt-v2-col-7">
								<div class="mbt-v2-players-stats-top-player-category">
									#3
								</div>
								<div class="mbt-v2-players-stats-top-player-name">
									<a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4651553" season_id="102587" player_id="4651553" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.594192001541234351" onlyurl="1">Tina Vide</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.594192001541234351") === "object") {
                               document.getElementById("a-0.594192001541234351").href = navigatePlayer(document.getElementById('a-0.594192001541234351').getAttribute('player_id'), document.getElementById('a-0.594192001541234351').getAttribute('season_id'));
                            }
                        </script>
								</div>
								<div class="mbt-v2-players-stats-top-player-bio">
									173 cm,																		16 Let																	</div>
							</div>
															<div class="mbt-v2-col mbt-v2-col-3">
									<div class="mbt-v2-players-stats-top-player-team">
																					<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=922889&amp;version=50x70" class="mbt-v2-image" alt="Grosuplje">
			                            									</div>	
								</div>
								
						</div>
					</div>
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6 mbt-v2-grid-end">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
															<div class="mbt-v2-col mbt-v2-col-4">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
											4
										</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Skupno<br>Tekme
										</div>
									</div>
								</div>
																	<div class="mbt-v2-col mbt-v2-col-4">
										<div class="mbt-v2-players-stats-top-players-stats">
											<div class="mbt-v2-players-stats-top-players-value">
																									76
													
											</div>
											<div class="mbt-v2-players-stats-top-players-value-desc">
												Skupno<br>
		                                         
													Točke
													
											</div>
										</div>
									</div>
									
								<div class="mbt-v2-col mbt-v2-col-4 mbt-v2-grid-end">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
																							19.00
																					</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Povprečje<br>Točke
										</div>
									</div>
								</div>
								
						</div>
					</div>
				</div>
			</div>
			</div>	
		
	<div class="mbt-v2-divider"></div>
	<div id="mbt-v2-player-stats-table-averages-container" class="mbt-v2-responsive-table-container">
    <table id="mbt-v2-player-stats-averages-table" class="mbt-v2-table mbt-v2-player-stats-table">
        <thead>
            <tr>
                <th>Št.</th>
                                                            <th>Igralec</th>
                                                                                                            <th>Ekipa</th>
                            
                                                                                <th>Tekme</th>
                                                                                <th>TOČ</th>
                                                                                <th>Povprečje</th>
                                                </tr>
        </thead>
        <tbody>
                            <tr>
                    <td>
                        1.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=5562867" season_id="102587" player_id="5562867" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.596390001541234351" onlyurl="1">Uma Bobić</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.596390001541234351") === "object") {
                               document.getElementById("a-0.596390001541234351").href = navigatePlayer(document.getElementById('a-0.596390001541234351').getAttribute('player_id'), document.getElementById('a-0.596390001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=5562867" season_id="102587" player_id="5562867" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.596450001541234351" onlyurl="1">U.Bobić</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.596450001541234351") === "object") {
                               document.getElementById("a-0.596450001541234351").href = navigatePlayer(document.getElementById('a-0.596450001541234351').getAttribute('player_id'), document.getElementById('a-0.596450001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196753&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196753" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.596493001541234351" onlyurl="1">Krka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.596493001541234351") === "object") {
                               document.getElementById("a-0.596493001541234351").href = navigateTeam(document.getElementById('a-0.596493001541234351').getAttribute('team_id'), document.getElementById('a-0.596493001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                64
                            </td>
                                                                                                                                <td>
                                    21.33
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        2.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=5639733" season_id="102587" player_id="5639733" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.596631001541234351" onlyurl="1">Jite Sophia Gbemuotor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.596631001541234351") === "object") {
                               document.getElementById("a-0.596631001541234351").href = navigatePlayer(document.getElementById('a-0.596631001541234351').getAttribute('player_id'), document.getElementById('a-0.596631001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=5639733" season_id="102587" player_id="5639733" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.596671001541234351" onlyurl="1">J.Gbemuotor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.596671001541234351") === "object") {
                               document.getElementById("a-0.596671001541234351").href = navigatePlayer(document.getElementById('a-0.596671001541234351').getAttribute('player_id'), document.getElementById('a-0.596671001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196683&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196683" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.596705001541234351" onlyurl="1">Cinkarna Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.596705001541234351") === "object") {
                               document.getElementById("a-0.596705001541234351").href = navigateTeam(document.getElementById('a-0.596705001541234351').getAttribute('team_id'), document.getElementById('a-0.596705001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                59
                            </td>
                                                                                                                                <td>
                                    19.67
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        3.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4651553" season_id="102587" player_id="4651553" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.596825001541234351" onlyurl="1">Tina Vide</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.596825001541234351") === "object") {
                               document.getElementById("a-0.596825001541234351").href = navigatePlayer(document.getElementById('a-0.596825001541234351').getAttribute('player_id'), document.getElementById('a-0.596825001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4651553" season_id="102587" player_id="4651553" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.596927001541234351" onlyurl="1">T.Vide</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.596927001541234351") === "object") {
                               document.getElementById("a-0.596927001541234351").href = navigatePlayer(document.getElementById('a-0.596927001541234351').getAttribute('player_id'), document.getElementById('a-0.596927001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196743&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196743" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.596965001541234351" onlyurl="1">Grosuplje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.596965001541234351") === "object") {
                               document.getElementById("a-0.596965001541234351").href = navigateTeam(document.getElementById('a-0.596965001541234351').getAttribute('team_id'), document.getElementById('a-0.596965001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                76
                            </td>
                                                                                                                                <td>
                                    19.00
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        4.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1170613" season_id="102587" player_id="1170613" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597086001541234351" onlyurl="1">Blaža Čeh</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597086001541234351") === "object") {
                               document.getElementById("a-0.597086001541234351").href = navigatePlayer(document.getElementById('a-0.597086001541234351').getAttribute('player_id'), document.getElementById('a-0.597086001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1170613" season_id="102587" player_id="1170613" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597121001541234351" onlyurl="1">B.Čeh</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597121001541234351") === "object") {
                               document.getElementById("a-0.597121001541234351").href = navigatePlayer(document.getElementById('a-0.597121001541234351').getAttribute('player_id'), document.getElementById('a-0.597121001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196683&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196683" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597152001541234351" onlyurl="1">Cinkarna Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597152001541234351") === "object") {
                               document.getElementById("a-0.597152001541234351").href = navigateTeam(document.getElementById('a-0.597152001541234351').getAttribute('team_id'), document.getElementById('a-0.597152001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                73
                            </td>
                                                                                                                                <td>
                                    18.25
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        5.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1100053" season_id="102587" player_id="1100053" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597262001541234351" onlyurl="1">Tia Šporar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597262001541234351") === "object") {
                               document.getElementById("a-0.597262001541234351").href = navigatePlayer(document.getElementById('a-0.597262001541234351').getAttribute('player_id'), document.getElementById('a-0.597262001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1100053" season_id="102587" player_id="1100053" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597297001541234351" onlyurl="1">T.Šporar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597297001541234351") === "object") {
                               document.getElementById("a-0.597297001541234351").href = navigatePlayer(document.getElementById('a-0.597297001541234351').getAttribute('player_id'), document.getElementById('a-0.597297001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196693&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196693" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597329001541234351" onlyurl="1">Konjice A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597329001541234351") === "object") {
                               document.getElementById("a-0.597329001541234351").href = navigateTeam(document.getElementById('a-0.597329001541234351').getAttribute('team_id'), document.getElementById('a-0.597329001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                53
                            </td>
                                                                                                                                <td>
                                    17.67
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        6.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4857835" season_id="102587" player_id="4857835" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597435001541234351" onlyurl="1">Hana Sambolić</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597435001541234351") === "object") {
                               document.getElementById("a-0.597435001541234351").href = navigatePlayer(document.getElementById('a-0.597435001541234351').getAttribute('player_id'), document.getElementById('a-0.597435001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4857835" season_id="102587" player_id="4857835" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597470001541234351" onlyurl="1">H.Sambolić</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597470001541234351") === "object") {
                               document.getElementById("a-0.597470001541234351").href = navigatePlayer(document.getElementById('a-0.597470001541234351').getAttribute('player_id'), document.getElementById('a-0.597470001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=4646257&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4646257" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597760001541234351" onlyurl="1">Akson Ilirija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597760001541234351") === "object") {
                               document.getElementById("a-0.597760001541234351").href = navigateTeam(document.getElementById('a-0.597760001541234351').getAttribute('team_id'), document.getElementById('a-0.597760001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                67
                            </td>
                                                                                                                                <td>
                                    16.75
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        7.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4858435" season_id="102587" player_id="4858435" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597896001541234351" onlyurl="1">Mia Žekš</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597896001541234351") === "object") {
                               document.getElementById("a-0.597896001541234351").href = navigatePlayer(document.getElementById('a-0.597896001541234351').getAttribute('player_id'), document.getElementById('a-0.597896001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4858435" season_id="102587" player_id="4858435" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597933001541234351" onlyurl="1">M.Žekš</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597933001541234351") === "object") {
                               document.getElementById("a-0.597933001541234351").href = navigatePlayer(document.getElementById('a-0.597933001541234351').getAttribute('player_id'), document.getElementById('a-0.597933001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196703&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196703" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.597966001541234351" onlyurl="1">Pomurje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.597966001541234351") === "object") {
                               document.getElementById("a-0.597966001541234351").href = navigateTeam(document.getElementById('a-0.597966001541234351').getAttribute('team_id'), document.getElementById('a-0.597966001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                45
                            </td>
                                                                                                                                <td>
                                    15.00
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        8.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4861553" season_id="102587" player_id="4861553" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598071001541234351" onlyurl="1">Hana Ivanuša</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598071001541234351") === "object") {
                               document.getElementById("a-0.598071001541234351").href = navigatePlayer(document.getElementById('a-0.598071001541234351').getAttribute('player_id'), document.getElementById('a-0.598071001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4861553" season_id="102587" player_id="4861553" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598105001541234351" onlyurl="1">H.Ivanuša</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598105001541234351") === "object") {
                               document.getElementById("a-0.598105001541234351").href = navigatePlayer(document.getElementById('a-0.598105001541234351').getAttribute('player_id'), document.getElementById('a-0.598105001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=4646257&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4646257" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598135001541234351" onlyurl="1">Akson Ilirija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598135001541234351") === "object") {
                               document.getElementById("a-0.598135001541234351").href = navigateTeam(document.getElementById('a-0.598135001541234351').getAttribute('team_id'), document.getElementById('a-0.598135001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                58
                            </td>
                                                                                                                                <td>
                                    14.50
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        9.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1281103" season_id="102587" player_id="1281103" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598336001541234351" onlyurl="1">Zala Jenko</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598336001541234351") === "object") {
                               document.getElementById("a-0.598336001541234351").href = navigatePlayer(document.getElementById('a-0.598336001541234351').getAttribute('player_id'), document.getElementById('a-0.598336001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1281103" season_id="102587" player_id="1281103" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598376001541234351" onlyurl="1">Z.Jenko</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598376001541234351") === "object") {
                               document.getElementById("a-0.598376001541234351").href = navigatePlayer(document.getElementById('a-0.598376001541234351').getAttribute('player_id'), document.getElementById('a-0.598376001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196783&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598480001541234351" onlyurl="1">Triglav</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598480001541234351") === "object") {
                               document.getElementById("a-0.598480001541234351").href = navigateTeam(document.getElementById('a-0.598480001541234351').getAttribute('team_id'), document.getElementById('a-0.598480001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                57
                            </td>
                                                                                                                                <td>
                                    14.25
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        10.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4958065" season_id="102587" player_id="4958065" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598604001541234351" onlyurl="1">Emilija Vrunč</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598604001541234351") === "object") {
                               document.getElementById("a-0.598604001541234351").href = navigatePlayer(document.getElementById('a-0.598604001541234351').getAttribute('player_id'), document.getElementById('a-0.598604001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4958065" season_id="102587" player_id="4958065" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598639001541234351" onlyurl="1">E.Vrunč</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598639001541234351") === "object") {
                               document.getElementById("a-0.598639001541234351").href = navigatePlayer(document.getElementById('a-0.598639001541234351').getAttribute('player_id'), document.getElementById('a-0.598639001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196673&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196673" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598671001541234351" onlyurl="1">Maribor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598671001541234351") === "object") {
                               document.getElementById("a-0.598671001541234351").href = navigateTeam(document.getElementById('a-0.598671001541234351').getAttribute('team_id'), document.getElementById('a-0.598671001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                42
                            </td>
                                                                                                                                <td>
                                    14.00
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        11.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1206883" season_id="102587" player_id="1206883" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598776001541234351" onlyurl="1">Nastja Emeršič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598776001541234351") === "object") {
                               document.getElementById("a-0.598776001541234351").href = navigatePlayer(document.getElementById('a-0.598776001541234351').getAttribute('player_id'), document.getElementById('a-0.598776001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1206883" season_id="102587" player_id="1206883" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598851001541234351" onlyurl="1">N.Emeršič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598851001541234351") === "object") {
                               document.getElementById("a-0.598851001541234351").href = navigatePlayer(document.getElementById('a-0.598851001541234351').getAttribute('player_id'), document.getElementById('a-0.598851001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196773&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196773" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.598893001541234351" onlyurl="1">Ines</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.598893001541234351") === "object") {
                               document.getElementById("a-0.598893001541234351").href = navigateTeam(document.getElementById('a-0.598893001541234351').getAttribute('team_id'), document.getElementById('a-0.598893001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                56
                            </td>
                                                                                                                                <td>
                                    14.00
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        12.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4646463" season_id="102587" player_id="4646463" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599006001541234351" onlyurl="1">Mojca Jelenc</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599006001541234351") === "object") {
                               document.getElementById("a-0.599006001541234351").href = navigatePlayer(document.getElementById('a-0.599006001541234351').getAttribute('player_id'), document.getElementById('a-0.599006001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4646463" season_id="102587" player_id="4646463" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599041001541234351" onlyurl="1">M.Jelenc</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599041001541234351") === "object") {
                               document.getElementById("a-0.599041001541234351").href = navigatePlayer(document.getElementById('a-0.599041001541234351').getAttribute('player_id'), document.getElementById('a-0.599041001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196683&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196683" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599113001541234351" onlyurl="1">Cinkarna Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599113001541234351") === "object") {
                               document.getElementById("a-0.599113001541234351").href = navigateTeam(document.getElementById('a-0.599113001541234351').getAttribute('team_id'), document.getElementById('a-0.599113001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                55
                            </td>
                                                                                                                                <td>
                                    13.75
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        13.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1281093" season_id="102587" player_id="1281093" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599230001541234351" onlyurl="1">Vanja Manojlović</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599230001541234351") === "object") {
                               document.getElementById("a-0.599230001541234351").href = navigatePlayer(document.getElementById('a-0.599230001541234351').getAttribute('player_id'), document.getElementById('a-0.599230001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1281093" season_id="102587" player_id="1281093" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599264001541234351" onlyurl="1">V.Manojlović</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599264001541234351") === "object") {
                               document.getElementById("a-0.599264001541234351").href = navigatePlayer(document.getElementById('a-0.599264001541234351').getAttribute('player_id'), document.getElementById('a-0.599264001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196783&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599295001541234351" onlyurl="1">Triglav</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599295001541234351") === "object") {
                               document.getElementById("a-0.599295001541234351").href = navigateTeam(document.getElementById('a-0.599295001541234351').getAttribute('team_id'), document.getElementById('a-0.599295001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                54
                            </td>
                                                                                                                                <td>
                                    13.50
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        14.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4697331" season_id="102587" player_id="4697331" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599400001541234351" onlyurl="1">Neža Blaznik</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599400001541234351") === "object") {
                               document.getElementById("a-0.599400001541234351").href = navigatePlayer(document.getElementById('a-0.599400001541234351').getAttribute('player_id'), document.getElementById('a-0.599400001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4697331" season_id="102587" player_id="4697331" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599434001541234351" onlyurl="1">N.Blaznik</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599434001541234351") === "object") {
                               document.getElementById("a-0.599434001541234351").href = navigatePlayer(document.getElementById('a-0.599434001541234351').getAttribute('player_id'), document.getElementById('a-0.599434001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196673&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196673" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599466001541234351" onlyurl="1">Maribor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599466001541234351") === "object") {
                               document.getElementById("a-0.599466001541234351").href = navigateTeam(document.getElementById('a-0.599466001541234351').getAttribute('team_id'), document.getElementById('a-0.599466001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                39
                            </td>
                                                                                                                                <td>
                                    13.00
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        15.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1170603" season_id="102587" player_id="1170603" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599567001541234351" onlyurl="1">Bruna Čeh</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599567001541234351") === "object") {
                               document.getElementById("a-0.599567001541234351").href = navigatePlayer(document.getElementById('a-0.599567001541234351').getAttribute('player_id'), document.getElementById('a-0.599567001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1170603" season_id="102587" player_id="1170603" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599602001541234351" onlyurl="1">B.Čeh</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599602001541234351") === "object") {
                               document.getElementById("a-0.599602001541234351").href = navigatePlayer(document.getElementById('a-0.599602001541234351').getAttribute('player_id'), document.getElementById('a-0.599602001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196703&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196703" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599633001541234351" onlyurl="1">Pomurje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599633001541234351") === "object") {
                               document.getElementById("a-0.599633001541234351").href = navigateTeam(document.getElementById('a-0.599633001541234351').getAttribute('team_id'), document.getElementById('a-0.599633001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                38
                            </td>
                                                                                                                                <td>
                                    12.67
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        16.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4857485" season_id="102587" player_id="4857485" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599736001541234351" onlyurl="1">Ema Žnidarič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599736001541234351") === "object") {
                               document.getElementById("a-0.599736001541234351").href = navigatePlayer(document.getElementById('a-0.599736001541234351').getAttribute('player_id'), document.getElementById('a-0.599736001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4857485" season_id="102587" player_id="4857485" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599770001541234351" onlyurl="1">E.Žnidarič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599770001541234351") === "object") {
                               document.getElementById("a-0.599770001541234351").href = navigatePlayer(document.getElementById('a-0.599770001541234351').getAttribute('player_id'), document.getElementById('a-0.599770001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=4675157&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4675157" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599801001541234351" onlyurl="1">Orli Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599801001541234351") === "object") {
                               document.getElementById("a-0.599801001541234351").href = navigateTeam(document.getElementById('a-0.599801001541234351').getAttribute('team_id'), document.getElementById('a-0.599801001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                37
                            </td>
                                                                                                                                <td>
                                    12.33
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        17.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=5027483" season_id="102587" player_id="5027483" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599953001541234351" onlyurl="1">Kaja Pavše Grabrijan</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599953001541234351") === "object") {
                               document.getElementById("a-0.599953001541234351").href = navigatePlayer(document.getElementById('a-0.599953001541234351').getAttribute('player_id'), document.getElementById('a-0.599953001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=5027483" season_id="102587" player_id="5027483" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.599990001541234351" onlyurl="1">K.Pavše Grabrijan</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.599990001541234351") === "object") {
                               document.getElementById("a-0.599990001541234351").href = navigatePlayer(document.getElementById('a-0.599990001541234351').getAttribute('player_id'), document.getElementById('a-0.599990001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.600022001541234351" onlyurl="1">Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.600022001541234351") === "object") {
                               document.getElementById("a-0.600022001541234351").href = navigateTeam(document.getElementById('a-0.600022001541234351').getAttribute('team_id'), document.getElementById('a-0.600022001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                49
                            </td>
                                                                                                                                <td>
                                    12.25
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        18.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4857833" season_id="102587" player_id="4857833" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.600129001541234351" onlyurl="1">Sara Sambolić</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.600129001541234351") === "object") {
                               document.getElementById("a-0.600129001541234351").href = navigatePlayer(document.getElementById('a-0.600129001541234351').getAttribute('player_id'), document.getElementById('a-0.600129001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=4857833" season_id="102587" player_id="4857833" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.600163001541234351" onlyurl="1">S.Sambolić</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.600163001541234351") === "object") {
                               document.getElementById("a-0.600163001541234351").href = navigatePlayer(document.getElementById('a-0.600163001541234351').getAttribute('player_id'), document.getElementById('a-0.600163001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=4646257&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4646257" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.600194001541234351" onlyurl="1">Akson Ilirija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.600194001541234351") === "object") {
                               document.getElementById("a-0.600194001541234351").href = navigateTeam(document.getElementById('a-0.600194001541234351').getAttribute('team_id'), document.getElementById('a-0.600194001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                49
                            </td>
                                                                                                                                <td>
                                    12.25
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        19.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1100063" season_id="102587" player_id="1100063" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.600398001541234351" onlyurl="1">Tori Šporar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.600398001541234351") === "object") {
                               document.getElementById("a-0.600398001541234351").href = navigatePlayer(document.getElementById('a-0.600398001541234351').getAttribute('player_id'), document.getElementById('a-0.600398001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=1100063" season_id="102587" player_id="1100063" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.600437001541234351" onlyurl="1">T.Šporar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.600437001541234351") === "object") {
                               document.getElementById("a-0.600437001541234351").href = navigatePlayer(document.getElementById('a-0.600437001541234351').getAttribute('player_id'), document.getElementById('a-0.600437001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196693&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196693" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.600472001541234351" onlyurl="1">Konjice A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.600472001541234351") === "object") {
                               document.getElementById("a-0.600472001541234351").href = navigateTeam(document.getElementById('a-0.600472001541234351').getAttribute('team_id'), document.getElementById('a-0.600472001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                36
                            </td>
                                                                                                                                <td>
                                    12.00
                                </td>
                                                                            
                </tr>
                            <tr>
                    <td>
                        20.
                    </td>
                                                                        <td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=5777803" season_id="102587" player_id="5777803" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.600649001541234351" onlyurl="1">Marta Ostojić</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.600649001541234351") === "object") {
                               document.getElementById("a-0.600649001541234351").href = navigatePlayer(document.getElementById('a-0.600649001541234351').getAttribute('player_id'), document.getElementById('a-0.600649001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102587&amp;league_id=undefined&amp;player_id=5777803" season_id="102587" player_id="5777803" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.600720001541234351" onlyurl="1">M.Ostojić</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.600720001541234351") === "object") {
                               document.getElementById("a-0.600720001541234351").href = navigatePlayer(document.getElementById('a-0.600720001541234351').getAttribute('player_id'), document.getElementById('a-0.600720001541234351').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196683&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196683" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.600756001541234351" onlyurl="1">Cinkarna Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.600756001541234351") === "object") {
                               document.getElementById("a-0.600756001541234351").href = navigateTeam(document.getElementById('a-0.600756001541234351').getAttribute('team_id'), document.getElementById('a-0.600756001541234351').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                48
                            </td>
                                                                                                                                <td>
                                    12.00
                                </td>
                                                                            
                </tr>
                    </tbody>
    </table>
</div>

	<div class="mbt-v2-divider"></div>
	<div class="mbt-v2-grid">
		<div class="mbt-v2-col mbt-v2-col-12">
			<ul class="mbt-v2-pagination">
																			<li class="mbt-v2-pagination-active">
																<span>
							1
						</span>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-2">
							2
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-3">
							3
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-4">
							4
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-5">
							5
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-6">
							6
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-7">
							7
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-8">
							8
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-9">
							9
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-10">
							10
						</a>
										</li>
													<li class="mbt-v2-pagination-next">
						<a href="#" onclick="return false;" id="33-600-page-next">
							❯ 
						</a>
					</li>
							</ul>
		</div>
	</div>

<script type="text/javascript">
//<![CDATA[

	var namespace = MBT.API.SafeNames.Container('33-600');
	
	namespace.onPageClick = function(e, page) {

		namespace.params.page = page;
		
		new MBT.API.Widgets.Widget({
			widgetId: 600,
			container: '33-600-tab-container',
			state: 'MzM1MzY3MzU2OWE6MTU6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM2MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7czoxOToidXNlX2FkdmFuY2VkX2ZpbHRlciI7czo0OiJ0cnVlIjtzOjY6ImZpbHRlciI7YTo1OntzOjg6InN0YXRfY2F0IjtzOjM6InB0cyI7czo5OiJzZWFzb25faWQiO3M6NjoiMTAyNTg3IjtzOjg6InN0YWdlX2lkIjtzOjA6IiI7czo3OiJ0ZWFtX2lkIjtzOjA6IiI7czo4OiJwb3NpdGlvbiI7czowOiIiO31zOjQ6InBhZ2UiO3M6MToiMCI7fQ==',
			params: namespace.params
		}).renderPartial(namespace.partial);
	}

																	MBT.API.Event.observe('33-600-page-2', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [2], 1)); 
												MBT.API.Event.observe('33-600-page-3', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [3], 1)); 
												MBT.API.Event.observe('33-600-page-4', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [4], 1)); 
												MBT.API.Event.observe('33-600-page-5', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [5], 1)); 
												MBT.API.Event.observe('33-600-page-6', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [6], 1)); 
												MBT.API.Event.observe('33-600-page-7', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [7], 1)); 
												MBT.API.Event.observe('33-600-page-8', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [8], 1)); 
												MBT.API.Event.observe('33-600-page-9', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [9], 1)); 
												MBT.API.Event.observe('33-600-page-10', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [10], 1)); 
										MBT.API.Event.observe('33-600-page-next', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [2], 1)); 
			//]]>
</script>
    <p class="mbt-v2-info-text">
        Igralec je uvrščen v to kategorijo, če je igral na najmanj 50% tekmah
    </p>
   

<script type="text/javascript">
//<![CDATA[

    new MBT.API.responsiveTable ({
        table: 'mbt-v2-player-stats-averages-table',
        tablesContainer: 'mbt-v2-player-stats-table-averages-container',
        columnsToPin: 2
    }).watchTable();

//]]>
</script></div>
	</div>
</div>

<script type="text/javascript">
//<![CDATA[
	
	var namespace = MBT.API.SafeNames.Container('33-600');

	namespace.mobileMenu = new MBT.API.createResponsiveNavigation({
		menuContainer : "33-600-mbt-v2-navigation",
		mobileMenuContainer : "33-600-mobile-menu",
		mobileMenuCloseText: "Izberi",
	});

	namespace.mobileFilters = new MBT.API.createResponsiveNavigation({
		menuContainer : "33-600-filters-block",
		mobileMenuContainer : "33-600-mobile-filters-block",
		filtersMode: true
	});

	namespace.params = {};

	namespace.params.use_advanced_filter = true;

	namespace.params.filter = {};

	namespace.availableFilters = MBT.API.get('33-600-filters-block').childNodes;

	for(key in namespace.availableFilters) {
		if(namespace.availableFilters[key].nodeType == 1) {
			namespace.params.filter[namespace.availableFilters[key].getAttribute('data-name')] = namespace.availableFilters[key].value;
		}
	}

	namespace.onFilterChange = function(e, filter) {

		namespace.params.filter[filter] = e.target.value;

		namespace.params.page = 0;

		if(filter == 'season_id' || filter == 'stage_id') {
			if(namespace.params.filter.team_id) {
				delete namespace.params.filter.team_id;
				if(filter == 'season_id') {
					delete namespace.params.filter.stage_id;
				}
				new MBT.API.Widgets.Widget({
					widgetId: 600,
					container: '33-600-filter-team',
					state: 'IDkwOTk3Njk5N2E6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM2MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
					params: {
						season_id: namespace.params.filter.season_id,
						stage_id: namespace.params.filter.stage_id
					}
				}).renderPartial('get-teams');
			}

			if(filter != 'stage_id') {
				new MBT.API.Widgets.Widget({
					widgetId: 600,
					container: '33-600-filter-stage',
					state: 'IDkwOTk3Njk5N2E6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM2MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
					params: {
						season_id: namespace.params.filter.season_id
					}
				}).renderPartial('get-stages');
			}
		}

		new MBT.API.Widgets.Widget({
			widgetId: 600,
			container: '33-600-tab-container',
			state: 'IDkwOTk3Njk5N2E6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM2MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
			params: namespace.params
		}).renderPartial(namespace.partial);
	}

	namespace.onTabClick = function(tabPanel, index, part) {

		namespace.params.page = 0;

		for(key in namespace.availableFilters) {
			if(namespace.availableFilters[key].nodeType == 1) {
				if(namespace.availableFilters[key].getAttribute('data-name') == 'season_id') {
					if(namespace.availableFilters[key].options[0].value == "") {
						namespace.availableFilters[key].selectedIndex = 1;
						namespace.params.filter.season_id = namespace.availableFilters[key].options[1].value;
					} else {
					    namespace.availableFilters['key'].selectedIndex = 1;
					    namespace.params.filter.season_id = namespace.availableFilters[key].options[1].value;
					}
				} else {
					namespace.availableFilters[key].selectedIndex =0;
					namespace.params.filter[namespace.availableFilters[key].getAttribute('data-name')] = namespace.availableFilters[key].options[0].value;
				}
			}
		}

		namespace.partial = part;

		new MBT.API.Widgets.Widget({
				widgetId: 600,
				container: '33-600-filter-stats',
				state: 'IDkwOTk3Njk5N2E6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM2MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
				params: {
					tab: part
				}
			}).renderPartial('get-stat-categories');

		new MBT.API.Widgets.Widget({
			widgetId: 600,
			container: '33-600-tab-container',
			state: 'IDkwOTk3Njk5N2E6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM2MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
			params: namespace.params
		}).renderPartial(namespace.partial);
	}

	namespace.tabs = [];

	namespace.menuItems = MBT.API.get('33-600-mbt-v2-navigation').childNodes;

	for(var i = 0; i <  namespace.menuItems.length; i++) {
        if(namespace.menuItems[i].nodeType == 1) {
        	namespace.tabs.push({
        		tabId: namespace.menuItems[i].id,
        		needLoad: MBT.API.Function.createDelegate(namespace.onTabClick, null, namespace.menuItems[i].getAttribute('data-name'), 2),
        	});
        }
	}

	namespace.TabController = new MBT.API.UI.TabPanel({
		container: '33-600-tab-container',
		tabClass: 'mbt-v2-navigation-tab',
        activeTabClass: 'mbt-v2-navigation-tab-active',
        tabs: namespace.tabs,
        noCache: true,
		activeTab: 0
	});

	namespace.TabController.activeTab = 0;

	switch (namespace.TabController.activeTab) {
		case 0:
			namespace.partial = 'averages';
			break;
		case 1:
			namespace.partial = 'highs';
			break;
	    case 2:
			namespace.partial = 'totals';
			break;
		case 3:
			namespace.partial = '40min';
			break;
	}

	MBT.API.Event.observe('33-600-filter-season', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['season_id'], 1));
	MBT.API.Event.observe('33-600-filter-stats', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['stat_cat'], 1));
	MBT.API.Event.observe('33-600-filter-month', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['month_id'], 1));
	MBT.API.Event.observe('33-600-filter-stage', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['stage_id'], 1));
	MBT.API.Event.observe('33-600-filter-team', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['team_id'], 1));
	MBT.API.Event.observe('33-600-filter-position', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['position'], 1));

	

	//]]>
</script></div>
</div>
<div class="container">
	<div id="stats-team" mbt_widget="601"><div id="mbt-v2-teams-stats" class="mbt-v2-widget">
	<div class="mbt-v2-header">
					Statistika
			
	</div>
	<div class="mbt-v2-widget-content">
					<div id="33-601-mobile-menu" class="mbt-v2-mobile-menu">
				Povprečje
			</div>
			<nav id="33-601-mbt-v2-navigation" class="mbt-v2-navigation">
				<div id="33-601-tab-0" data-name="averages" class="mbt-v2-navigation-tab-active" prevclassname="mbt-v2-navigation-tab-active">
					Povprečje
				</div>
				<div id="33-601-tab-1" data-name="highs" class="mbt-v2-navigation-tab">
					Največ
				</div>
				<div id="33-601-tab-2" data-name="totals" class="mbt-v2-navigation-tab">
					Skupno
				</div>
			</nav>
			<div class="mbt-v2-divider"></div>
			
		<div id="33-601-filters-block" class="mbt-v2-filters-block_">
			<select id="33-601-category-selector" class="mbt-v2-select" data-name="stat_cat">
									<option value="pts" selected="selected">
						Točke
					</option>
									<option value="rt">
						Skoki
					</option>
									<option value="eq">
						Valorizacija
					</option>
									<option value="as">
						Asistence
					</option>
									<option value="2a">
						Št. metov za 2 točki
					</option>
									<option value="2m">
						Št. zadetih metov za 2 točki
					</option>
									<option value="2p">
						% za 2 točki
					</option>
									<option value="3a">
						Št. metov za 3 točke
					</option>
									<option value="3m">
						Zadeti meti za 3 točke
					</option>
									<option value="3p">
						% za 3 točke
					</option>
									<option value="1a">
						Izvedeni prosti meti
					</option>
									<option value="1m">
						Zadeti prosti meti
					</option>
									<option value="1p">
						% prosti meti
					</option>
									<option value="ro">
						Napadalni skoki
					</option>
									<option value="rd">
						Skoki v obrambi
					</option>
									<option value="to">
						Izg. žoge
					</option>
									<option value="st">
						Prid. žoge
					</option>
									<option value="as_to">
						Asistence/izg. žoge
					</option>
									<option value="st_to">
						Prid./izg. žoge
					</option>
									<option value="attnd">
						Gledalcev
					</option>
							</select>
							<select id="33-601-season-selector" class="mbt-v2-select" data-name="season_id">
				    <option value="">Vse sezone</option>
	                    		                    <option value="102587" selected="selected">
			                    2018-2019
		                    </option>
		                		                    <option value="97915">
			                    2017-2018
		                    </option>
		                		                    <option value="93983">
			                    2016-2017
		                    </option>
		                		                    <option value="91069">
			                    2015-2016
		                    </option>
		                		                    <option value="89559">
			                    2014-2015
		                    </option>
		                		                    <option value="85631">
			                    2013-2014
		                    </option>
		                		                    <option value="63243">
			                    2012-2013
		                    </option>
		                		                    <option value="15443">
			                    2011-2012
		                    </option>
		                 
				</select>
						<select id="33-601-stage-selector" class="mbt-v2-select" data-name="stage_id">
				<option value="">
					Vsi deli tekmovanja
				</option>
									<option value="209263">
						1. del
					</option>
							</select> 
		</div>
		<div class="mbt-v2-divider"></div>
		<div id="33-601-tab-container">	<div id="mbt-v2-teams-stats-table-averages-container" class="mbt-v2-responsive-table-container">
	<table id="mbt-v2-teams-stats-averages-table" class="mbt-v2-table mbt-v2-teams-stats-table">
		<thead>
			<tr>
				<th>
					Št.
				</th>
				                                            <th>
	                        Ekipa
                        </th>
                                                                                <th>
	                        Tekme
	                    </th>
                                                                                <th>
	                        TOČ
                        </th>
                                                                                <th>
	                        Povprečje
                        </th>
                                    			</tr>
		</thead>
		<tbody>
							<tr>
					<td>
						1.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196683&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196683" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.079553001541234351" onlyurl="1">Cinkarna Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.079553001541234351") === "object") {
                               document.getElementById("a-0.079553001541234351").href = navigateTeam(document.getElementById('a-0.079553001541234351').getAttribute('team_id'), document.getElementById('a-0.079553001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        345
		                    </td>
	                    	                	                    	                        	                            <td>
		                            86.25
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						2.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196693&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196693" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.079627001541234351" onlyurl="1">Konjice A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.079627001541234351") === "object") {
                               document.getElementById("a-0.079627001541234351").href = navigateTeam(document.getElementById('a-0.079627001541234351').getAttribute('team_id'), document.getElementById('a-0.079627001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        3
		                    </td>
	                    	                	                    	                        <td>
		                        245
		                    </td>
	                    	                	                    	                        	                            <td>
		                            81.67
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						3.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196673&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196673" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.079683001541234351" onlyurl="1">Maribor</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.079683001541234351") === "object") {
                               document.getElementById("a-0.079683001541234351").href = navigateTeam(document.getElementById('a-0.079683001541234351').getAttribute('team_id'), document.getElementById('a-0.079683001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        3
		                    </td>
	                    	                	                    	                        <td>
		                        223
		                    </td>
	                    	                	                    	                        	                            <td>
		                            74.33
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						4.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196783&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.079733001541234351" onlyurl="1">Triglav</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.079733001541234351") === "object") {
                               document.getElementById("a-0.079733001541234351").href = navigateTeam(document.getElementById('a-0.079733001541234351').getAttribute('team_id'), document.getElementById('a-0.079733001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        285
		                    </td>
	                    	                	                    	                        	                            <td>
		                            71.25
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						5.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196733&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196733" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.079781001541234351" onlyurl="1">Akson Ilirija A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.079781001541234351") === "object") {
                               document.getElementById("a-0.079781001541234351").href = navigateTeam(document.getElementById('a-0.079781001541234351').getAttribute('team_id'), document.getElementById('a-0.079781001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        283
		                    </td>
	                    	                	                    	                        	                            <td>
		                            70.75
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						6.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196763&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196763" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.079828001541234351" onlyurl="1">Ježica A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.079828001541234351") === "object") {
                               document.getElementById("a-0.079828001541234351").href = navigateTeam(document.getElementById('a-0.079828001541234351').getAttribute('team_id'), document.getElementById('a-0.079828001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        3
		                    </td>
	                    	                	                    	                        <td>
		                        210
		                    </td>
	                    	                	                    	                        	                            <td>
		                            70.00
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						7.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=4646257&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4646257" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.079876001541234351" onlyurl="1">Akson Ilirija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.079876001541234351") === "object") {
                               document.getElementById("a-0.079876001541234351").href = navigateTeam(document.getElementById('a-0.079876001541234351').getAttribute('team_id'), document.getElementById('a-0.079876001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        268
		                    </td>
	                    	                	                    	                        	                            <td>
		                            67.00
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						8.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196743&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196743" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.079923001541234351" onlyurl="1">Grosuplje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.079923001541234351") === "object") {
                               document.getElementById("a-0.079923001541234351").href = navigateTeam(document.getElementById('a-0.079923001541234351').getAttribute('team_id'), document.getElementById('a-0.079923001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        234
		                    </td>
	                    	                	                    	                        	                            <td>
		                            58.50
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						9.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196753&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196753" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.079969001541234351" onlyurl="1">Krka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.079969001541234351") === "object") {
                               document.getElementById("a-0.079969001541234351").href = navigateTeam(document.getElementById('a-0.079969001541234351').getAttribute('team_id'), document.getElementById('a-0.079969001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        3
		                    </td>
	                    	                	                    	                        <td>
		                        169
		                    </td>
	                    	                	                    	                        	                            <td>
		                            56.33
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						10.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196703&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196703" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.080016001541234351" onlyurl="1">Pomurje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.080016001541234351") === "object") {
                               document.getElementById("a-0.080016001541234351").href = navigateTeam(document.getElementById('a-0.080016001541234351').getAttribute('team_id'), document.getElementById('a-0.080016001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        3
		                    </td>
	                    	                	                    	                        <td>
		                        167
		                    </td>
	                    	                	                    	                        	                            <td>
		                            55.67
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						11.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196723&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196723" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.080063001541234351" onlyurl="1">Domžale</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.080063001541234351") === "object") {
                               document.getElementById("a-0.080063001541234351").href = navigateTeam(document.getElementById('a-0.080063001541234351').getAttribute('team_id'), document.getElementById('a-0.080063001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        202
		                    </td>
	                    	                	                    	                        	                            <td>
		                            50.50
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						12.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196773&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196773" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.080109001541234351" onlyurl="1">Ines</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.080109001541234351") === "object") {
                               document.getElementById("a-0.080109001541234351").href = navigateTeam(document.getElementById('a-0.080109001541234351').getAttribute('team_id'), document.getElementById('a-0.080109001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        202
		                    </td>
	                    	                	                    	                        	                            <td>
		                            50.50
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						13.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=4619135&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4619135" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.080158001541234351" onlyurl="1">Ježica B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.080158001541234351") === "object") {
                               document.getElementById("a-0.080158001541234351").href = navigateTeam(document.getElementById('a-0.080158001541234351').getAttribute('team_id'), document.getElementById('a-0.080158001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        198
		                    </td>
	                    	                	                    	                        	                            <td>
		                            49.50
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						14.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=4612259&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4612259" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.080205001541234351" onlyurl="1">Vipava</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.080205001541234351") === "object") {
                               document.getElementById("a-0.080205001541234351").href = navigateTeam(document.getElementById('a-0.080205001541234351').getAttribute('team_id'), document.getElementById('a-0.080205001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        171
		                    </td>
	                    	                	                    	                        	                            <td>
		                            42.75
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						15.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=268713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="268713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.080251001541234351" onlyurl="1">Konjice B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.080251001541234351") === "object") {
                               document.getElementById("a-0.080251001541234351").href = navigateTeam(document.getElementById('a-0.080251001541234351').getAttribute('team_id'), document.getElementById('a-0.080251001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        156
		                    </td>
	                    	                	                    	                        	                            <td>
		                            39.00
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						16.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=4675157&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="4675157" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.080296001541234351" onlyurl="1">Orli Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.080296001541234351") === "object") {
                               document.getElementById("a-0.080296001541234351").href = navigateTeam(document.getElementById('a-0.080296001541234351').getAttribute('team_id'), document.getElementById('a-0.080296001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        3
		                    </td>
	                    	                	                    	                        <td>
		                        110
		                    </td>
	                    	                	                    	                        	                            <td>
		                            36.67
	                            </td>
	                        	                    	                				</tr>
							<tr>
					<td>
						17.
					</td>
						                    	                        <td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196713&amp;league_id=undefined&amp;season_id=102587" season_id="102587" team_id="196713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.080342001541234351" onlyurl="1">Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.080342001541234351") === "object") {
                               document.getElementById("a-0.080342001541234351").href = navigateTeam(document.getElementById('a-0.080342001541234351').getAttribute('team_id'), document.getElementById('a-0.080342001541234351').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        98
		                    </td>
	                    	                	                    	                        	                            <td>
		                            24.50
	                            </td>
	                        	                    	                				</tr>
					</tbody>
	</table>
</div>


<script type="text/javascript">
//<![CDATA[

	var namespace = MBT.API.SafeNames.Container('33-601');
	
	namespace.onPageClick = function(e, page) {

		namespace.params.page = page;
		
		new MBT.API.Widgets.Widget({
			widgetId: 601,
			container: '33-601-tab-container',
			state: 'ICA1NDQ3NTU2MmE6MTM6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM2MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7czo5OiJzZWFzb25faWQiO3M6NjoiMTAyNTg3Ijt9',
			params: namespace.params
		}).renderPartial(namespace.partial);
	}

	//]]>
</script>
<p class="mbt-v2-info-text">
    
</p>

<script type="text/javascript">
//<![CDATA[

    new MBT.API.responsiveTable ({
        table: 'mbt-v2-teams-stats-averages-table',
        tablesContainer: 'mbt-v2-teams-stats-table-averages-container',
        columnsToPin: 2
    }).watchTable();

//]]>
</script></div>
	</div>
</div>

<script type="text/javascript">
//<![CDATA[
	
		var namespace = MBT.API.SafeNames.Container('33-601');

		namespace.params = {};
		namespace.partial = 'highs';

		
					namespace.params.teamMode = false;
				 

		namespace.params.filter = {};
		namespace.params.use_advanced_filter = true;

		namespace.availableFilters = MBT.API.get('33-601-filters-block').childNodes;

		namespace.onFilterChange = function(e, filter) {
			
			namespace.params.filter[filter] = e.target.value;
			namespace.params.page = 0;

			if(filter == 'season_id') {
				delete namespace.params.filter.stage_id;
				new MBT.API.Widgets.Widget({
					widgetId: 601,
					container: '33-601-stage-selector',
					state: 'IDkwOTk3Njk5N2E6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM2MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
					params: {
						season_id: namespace.params.filter.season_id
					}
				}).renderPartial('get-stages');
			}

			new MBT.API.Widgets.Widget({
				widgetId: 601,
				container: '33-601-tab-container',
				state: 'IDkwOTk3Njk5N2E6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM2MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
				params: namespace.params
			}).renderPartial(namespace.partial);
		}

		for(key in namespace.availableFilters) {
			if(namespace.availableFilters[key].nodeType == 1) {
				namespace.params.filter[namespace.availableFilters[key].getAttribute('data-name')] = namespace.availableFilters[key].value;
	            MBT.API.Event.observe(namespace.availableFilters[key], 'change', MBT.API.Function.createDelegate(namespace.onFilterChange, null, [namespace.availableFilters[key].getAttribute('data-name')], 1));
			}
		}

		if(!namespace.params.teamMode) {
			namespace.onTabClick = function(tabPanel, index, part) {

				namespace.partial = part;
				namespace.params.page = 0;

				for(key in namespace.availableFilters) {
					if(namespace.availableFilters[key].nodeType == 1) {
						if(namespace.availableFilters[key].getAttribute('data-name') == 'season_id') {
							if(namespace.availableFilters[key].options[0].value == "") {
								namespace.availableFilters[key].selectedIndex = 1;
								namespace.params.filter.season_id = namespace.availableFilters[key].options[1].value;
							} else {
							    namespace.availableFilters['key'].selectedIndex = 1;
							    namespace.params.filter.season_id = namespace.availableFilters[key].options[1].value;
							}
						} else {
							namespace.availableFilters[key].selectedIndex =0;
							namespace.params.filter[namespace.availableFilters[key].getAttribute('data-name')] = namespace.availableFilters[key].options[0].value;
						}
					}
				}

		        new MBT.API.Widgets.Widget({
		        	widgetId: 601, 
					container: '33-601-tab-container',
					state: 'IDkwOTk3Njk5N2E6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM2MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
					params: {
						season_id: '102587'
					}
				}).renderPartial(part);
		    }

			namespace.tabs = [];

			namespace.menuItems = MBT.API.get('33-601-mbt-v2-navigation').childNodes;

			for(var i = 0; i <  namespace.menuItems.length; i++) {
		        if(namespace.menuItems[i].nodeType == 1) {
		        	namespace.tabs.push({
		        		tabId: namespace.menuItems[i].id,
		        		needLoad: MBT.API.Function.createDelegate(namespace.onTabClick, null, namespace.menuItems[i].getAttribute('data-name'), 2),
		        	});
		        }
			}

			namespace.TabController = new MBT.API.UI.TabPanel({
				container: '33-601-tab-container',
				tabClass: 'mbt-v2-navigation-tab',
		        activeTabClass: 'mbt-v2-navigation-tab-active',
		        tabs: namespace.tabs,
		        noCache: true,
		        activeTab: 0
			});
		} else {
			new MBT.API.Widgets.Widget({
	        	widgetId: 601, 
				container: '33-601-tab-container',
				state: 'IDkwOTk3Njk5N2E6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM2MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
				params: {
					season_id: '102587'
				}
			}).renderPartial(namespace.partial);
		}

	    if(!namespace.params.teamMode) {
		    namespace.mobileNav = new MBT.API.createResponsiveNavigation({
				menuContainer : "33-601-mbt-v2-navigation",
				mobileMenuContainer : "33-601-mobile-menu",
				mobileMenuOpenedClass : 'mbt-v2-mobile-menu-opened',
				mobileMenuCloseText: 'Izberi'
			});
	    }
	
//]]>
</script>	</div>
</div>
<script>
        var league = 10363;
    </script><!-- Need for schedule widget --><!-- Load schedule widget --><script>

        var request = new MBT.API.Widgets.RenderRequest();
        var widget = new MBT.API.Widgets.Widget();
        widget.setContainer('schedule');
        widget.setWidgetId(MBT.API.Widgets.SEASON_SCHEDULE_LONG_WIDGET);
        widget.setParam('team_link_visible', 1);
        widget.setParam('show_season_selector', 1);
        widget.setParam('game_link_visible', 1);
        widget.setParam('player_link_visible', 1);
        widget.setParam('team_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('game_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('player_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('team_link_handler', 'navigateTeam');
        widget.setParam('game_link_handler', 'navigateGame');
        widget.setParam('player_link_handler', 'navigatePlayer');
        widget.setParam('arena_link_visible', 1);
        widget.setParam('arena_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('arena_link_handler', 'navigateArena');
        widget.setParam('league_id', league);
        widget.setParam('season_id', season);
        widget.setParam('game_days', 1 );
        widget.setParam('show_referee_city', '1');
        widget.setParam('items_on_page', '30');
        widget.setParam('stage_levels_visible', 2);
        widget.setParam('template', 'v2');
        request.addWidget(widget);
        request.render();
    </script><!-- Need for standings widget --><!-- Load standings widget --><script>
        var request = new MBT.API.Widgets.RenderRequest();
        var widget = new MBT.API.Widgets.Widget();
        widget.setContainer('standings');
        widget.setWidgetId(MBT.API.Widgets.SEASON_STANDINGS_LONG_WIDGET);
        widget.setParam('league_link_visible', 2);
        widget.setParam('team_link_visible', 1);
        widget.setParam('game_link_visible', 2);
        widget.setParam('player_link_visible', 1);
        widget.setParam('full_standings_link_visible', 2);
        widget.setParam("stage_levels_visible", 2);
        widget.setParam('league_id', league);
        widget.setParam('season_id', season);
        widget.setParam('team_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('team_link_handler', 'navigateTeam');
        widget.setParam('full_standings_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('full_standings_link_handler', 'navigateStandings');
        widget.setParam('template', 'v2');
        request.addWidget(widget);
        request.render();
    </script><!-- Need for standings widget --><script>
        var request = new MBT.API.Widgets.RenderRequest();
        var widget = new MBT.API.Widgets.Widget();
        widget.setContainer('standings');
        widget.setWidgetId(MBT.API.Widgets.SEASON_STANDINGS_LONG_WIDGET);
        widget.setParam('league_link_visible', 2);
        widget.setParam('team_link_visible', 1);
        widget.setParam('game_link_visible', 2);
        widget.setParam('player_link_visible', 1);
        widget.setParam('full_standings_link_visible', 2);
        widget.setParam("stage_levels_visible", 2);
        widget.setParam('league_id', league);
        widget.setParam('season_id', season);
        widget.setParam('team_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('team_link_handler', 'navigateTeam');
        widget.setParam('full_standings_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('full_standings_link_handler', 'navigateStandings');
        widget.setParam('template', 'v2');
        request.addWidget(widget);
        request.render();
    </script><!-- Load player stats widget --><script>
        var request = new MBT.API.Widgets.RenderRequest();
        widget = new MBT.API.Widgets.Widget();
        widget.setContainer('stats-player');
        widget.setWidgetId(MBT.API.Widgets.STATISTICS_PLAYERS_WIDGET);
        widget.setParam('league_link_visible', 1);
        widget.setParam('team_link_visible', 1);
        widget.setParam('game_link_visible', 1);
        widget.setParam('player_link_visible', 1);
        widget.setParam('league_id', league);
        widget.setParam('season_id', season);
        widget.setParam('game_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('game_link_handler', 'navigateGame');
        widget.setParam('team_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('team_link_handler', 'navigateTeam');
        widget.setParam('player_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('player_link_handler', 'navigatePlayer');
        widget.setParam('template', 'v2');
        request.addWidget(widget);
        request.render();
    </script><!-- Load team stats widget --><script>
        var request = new MBT.API.Widgets.RenderRequest();
        var widget = new MBT.API.Widgets.Widget();
        widget.setContainer('stats-team');
        widget.setWidgetId(MBT.API.Widgets.STATISTICS_TEAMS_WIDGET);
        widget.setParam('league_link_visible', 1);
        widget.setParam('team_link_visible', 1);
        widget.setParam('game_link_visible', 1);
        widget.setParam('player_link_visible', 1);
        widget.setParam('league_id', league);
        widget.setParam('season_id', season);
        widget.setParam('game_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('game_link_handler', 'navigateGame');
        widget.setParam('team_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('team_link_handler', 'navigateTeam');
        widget.setParam('player_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('player_link_handler', 'navigatePlayer');
        widget.setParam('template', 'v2');
        request.addWidget(widget);
        request.render();
    </script></div></div></div><div class="container-bootstrap banner-h"><div class="row"><div class="col-md-12 text-center"><script language="JavaScript" type="text/javascript" src="https://oglasi.kzs.si/adx.js"></script><script language="JavaScript" type="text/javascript"><!--
if (!document.phpAds_used) document.phpAds_used = ',';phpAds_random = new String (Math.random()); phpAds_random = phpAds_random.substring(2,11);document.write ("<" + "script language='JavaScript' type='text/javascript' src='");document.write ("https://oglasi.kzs.si/adjs.php?n=" + phpAds_random);document.write ("&amp;what=zone:3");document.write ("&amp;exclude=" + document.phpAds_used);if (document.referrer)document.write ("&amp;referer=" + escape(document.referrer));document.write ("'><" + "/script>");
//--></script><script language="JavaScript" type="text/javascript" src="https://oglasi.kzs.si/adjs.php?n=901366220&amp;what=zone:3&amp;exclude=,"></script><a href="https://oglasi.kzs.si/adclick.php?bannerid=604&amp;zoneid=3&amp;source=&amp;dest=https%3A%2F%2Fwww.e-stave.com%2F" target="_blank"><img src="https://oglasi.kzs.si/adimage.php?filename=banner-kzs-710x90.jpg&amp;contenttype=jpeg" width="710" height="90" alt="" title="" border="0"></a><div id="beacon_604" style="position: absolute; left: 0px; top: 0px; visibility: hidden;"><img src="https://oglasi.kzs.si/adlog.php?bannerid=604&amp;clientid=360&amp;zoneid=3&amp;source=&amp;block=0&amp;capping=0&amp;cb=82392b0b9c192c4b2e24e395cb2736c7" width="0" height="0" alt="" style="width: 0px; height: 0px;"></div></div></div></div>

<script type="text/javascript" src="/js/fancybox/jquery.fancybox.pack.js"></script>
<script type="text/javascript" src="/js/fancybox/jquery.fancybox-buttons.js"></script>
<script type="text/javascript" src="/js/fancybox/jquery.fancybox-media.js"></script>
<script type="text/javascript" src="/js/fancybox/jquery.fancybox-thumbs.js"></script>

<script type="text/javascript">
<!--
jQuery(document).ready(function() {
	jQuery('.agal').fancybox({
		type : 'image',
		padding: 0,
		helpers : {
	     media : {}
	    }
    });
});
//-->
</script>
						
				<div style="clear: both;"></div>
			</div>
		</div>
	</div><!--middle parts ends-->
</div><!--container parts ends-->
		








<div class="container-fluid sponsor-container"><div class="divider"></div><div class="row"><div class="col-md-12 sponsor-container-inner"><div id="sponsors" class="carousel slide" data-ride="carousel" data-interval="7000"><div class="row general-sponsors"><div class="col-md-offset-2 col-md-4  col-sm-6 col-xs-6 col-xxs-12 g-sp-right spon-gen"><a class="spon-gen-transform"></a><a href="https://telemach.si/" target="_blank" title="Telemach"><img src="/binary/showimage/id/8073/rw/220/rp/true/h/35abd8"></a><p class="gen-spon">Generalni sponzor</p></div><div class="col-md-4  col-sm-6 col-xs-6 col-xxs-12 g-sp-left spon-plat"><a href="http://www.adidas.com" target="_blank" title="Adidas"><img src="/binary/showimage/id/4452/rw/220/rp/true/h/591ad9"></a><a href="http://www.spar.si/" target="_blank" title="Spar"><img src="/binary/showimage/id/7024/rw/220/rp/true/h/def40f"></a><p>Platinasta sponzorja</p></div></div><div class="carousel-inner" role="listbox"><div class="item active"><div class="slider-inner"><div class="sponsors golden"><div class="logos"><a href="http://www.nkbm.si/" target="_blank" title="NKBM"><img src="/binary/showimage/id/4698/rw/154/rp/true/h/6b1296"></a><a href="http://www.petrol.si/" target="_blank" title="Petrol"><img src="/binary/showimage/id/4697/rw/154/rp/true/h/a005d6"></a></div><p>Zlati sponzorji</p></div><div class="sponsors silver"><div class="logos"><a href="http://www.a-cosmos.si/" target="_blank" title="A-Cosmos"><img src="/binary/showimage/id/14395/rw/154/rp/true/h/664c2e"></a><a href="http://www.pivo-lasko.si/slo/" target="_blank" title="Laško"><img src="/binary/showimage/id/15052/rw/154/rp/true/h/a27a92"></a><a href="http://www.spalding.si/" target="_blank" title="Spalding"><img src="/binary/showimage/id/5059/rw/154/rp/true/h/127dbc"></a><a href="http://www.sony.si/section/zacetna-stran" target="_blank" title="Sony"><img src="/binary/showimage/id/5063/rw/154/rp/true/h/4b33e7"></a></div><p>Srebrni sponzorji</p></div></div></div><div class="item "><div class="slider-inner"><div class="sponsors golden"><div class="logos"><a href="http://www.kompas.si/" target="_blank" title="Kompas"><img src="/binary/showimage/id/4700/rw/154/rp/true/h/ccb5be"></a><a href="https://www.dm-drogeriemarkt.si/" title="DM"><img src="/binary/showimage/id/5053/rw/154/rp/true/h/e72f0f"></a></div><p>Srebrni sponzorji</p></div><div class="sponsors silver"><div class="logos"><a href="https://www.e-stave.com/" target="_blank" title="Športna loterija"><img src="/binary/showimage/id/14249/rw/154/rp/true/h/f8f4a0"></a><a href="http://www.elektro-gorenjska.si/" target="_blank" title="Elektro Gorenjska"><img src="/binary/showimage/id/5054/rw/154/rp/true/h/143214"></a><a href="http://loterija.si/" target="_blank" title="Loterija Slovenije"><img src="/binary/showimage/id/5813/rw/154/rp/true/h/9478b8"></a><a href="http://www.hse.si/si/" title="HSE"><img src="/binary/showimage/id/5327/rw/154/rp/true/h/fdec53"></a></div><p>Bronasti sponzorji</p></div></div></div><div class="item "><div class="slider-inner"><div class="sponsors golden"><div class="logos"><a href="http://www.gorenje.si/" target="_blank" title="Gorenje"><img src="/binary/showimage/id/5069/rw/154/rp/true/h/08e47e"></a><a href="http://www.knaufinsulation.si/" target="_blank" title="Knauf"><img src="/binary/showimage/id/5065/rw/154/rp/true/h/4ef2ac"></a><a href="http://www.slo-zeleznice.si/sl/" target="_blank" title="Slovenske železnice"><img src="/binary/showimage/id/5055/rw/154/rp/true/h/9637da"></a><a href="http://www.gen-energija.si/" target="_blank" title="GEN-I"><img src="/binary/showimage/id/5066/rw/154/rp/true/h/102b2e"></a></div><p>Bronasti sponzorji</p></div><div class="sponsors silver"><div class="logos"><a href="https://www.austria-trend.at/en/hotels/ljubljana" target="_blank" title="ATH"><img src="/binary/showimage/id/7503/rw/154/rp/true/h/229c00"></a><a href="http://www.fundacijazasport.org/" target="_blank" title="Fundacija za šport"><img src="/binary/showimage/id/4883/rw/154/rp/true/h/9d9a7a"></a></div><p>Partnerji</p></div></div></div><div class="item "><div class="slider-inner"><div class="sponsors golden"><div class="logos"><a href="http://www.mss.gov.si/" target="_blank" title="MIZS"><img src="/binary/showimage/id/5068/rw/154/rp/true/h/75d6d3"></a><a href="http://www.europlakat.si/" target="_blank" title="Europlakat"><img src="/binary/showimage/id/5815/rw/154/rp/true/h/dafc3b"></a><a href="http://www.vzivo.si/" target="_blank" title="V živo"><img src="/binary/showimage/id/5814/rw/154/rp/true/h/4db0b8"></a><a href="http://www.arspharmae.com/" target="_blank" title="Arspharmae"><img src="/binary/showimage/id/5064/rw/154/rp/true/h/4caeb9"></a><a href="http://www.prometmesec.si/" target="_blank" title="Nomago"><img src="/binary/showimage/id/6911/rw/154/rp/true/h/0a5523"></a><a href="http://eventim.si/" target="_blank" title="Eventim"><img src="/binary/showimage/id/5057/rw/154/rp/true/h/deab95"></a></div><p>Partnerji</p></div></div></div><div class="item "><div class="slider-inner"><div class="sponsors golden"><div class="logos"><a href="https://www.modiana.si/" target="_blank" title="Modiana"><img src="/binary/showimage/id/5145/rw/154/rp/true/h/5b102f"></a></div><p>Partnerji</p></div><div class="sponsors silver"><div class="logos"><a href="https://www.grosbasket.com/sl" target="_blank" title="Grosbasket"><img src="/binary/showimage/id/7025/rw/154/rp/true/h/54a275"></a></div><p>Generalni sponzor DP 3x3</p></div></div></div></div><a class="left carousel-control" href="#sponsors" role="button" data-slide="prev"><span class="glyphicon glyphicon-triangle-left" aria-hidden="true"></span><span class="sr-only">Nazaj</span></a><a class="right carousel-control" href="#sponsors" role="button" data-slide="next"><span class="glyphicon glyphicon-triangle-right" aria-hidden="true"></span><span class="sr-only">Naprej</span></a></div></div></div></div>
<div class="footer">
  <div class="container-bootstrap">
    <div class="row">
      <div class="col-md-10 col-md-offset-1 col-sm-12">
        <div class="row">
		  <div class="col-md-3 col-sm-3 col-xs-3 col-xxs-6"><h3>Medijsko središče</h3><ul><li><a href="http://cms.dag-files.com/akreditacije">Akreditacije</a></li><li><a href="http://cms.dag-files.com/clanek/Organizacija/Logotipi/cid/130">Logotipi</a></li><li><a href="http://cms.dag-files.com/clanek/Organizacija/Vse-o-KZS/cid/125">Kontakt</a></li><li><a href="http://cms.dag-files.com/clanek/Vstopnice/cid/151">Vstopnice</a></li><li><a href="http://cms.dag-files.com/clanek/Prenosi/cid/142">Prenosi</a></li></ul></div>
		  <div class="col-md-3 col-sm-3 col-xs-3 col-xxs-6"><h3>KZS</h3><ul><li><a href="http://cms.dag-files.com/clanek/Organizacija/Dokumenti/cid/131">Dokumenti</a></li><li><a href="http://cms.dag-files.com/article/id/531">Sodniški iskalnik</a></li><li><a href="http://www.kosarkarski-trenerji.com/" target="_blank">ZKTS</a></li><li><a href="http://cms.dag-files.com/clanek/Trgovina/cid/141">Trgovina</a></li><li><a href="http://old.kzs.si/" target="_blank">Arhiv KZS</a></li></ul></div>
		  <div class="col-md-3 col-sm-3 col-xs-3 col-xxs-6"><h3>Reprezentance</h3><ul><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Clani/cid/37">Člani</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Clanice/cid/83">Članice</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Fantje-U20/cid/78">Fantje U20</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Dekleta-U20/cid/84">Dekleta U20</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Fantje-U18/cid/79">Fantje U18</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Dekleta-U18/cid/85">Dekleta U18</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Fantje-U16/cid/80">Fantje U16</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Dekleta-U16/cid/86">Dekleta U16</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Fantje-U14/cid/82">Fantje U14</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Dekleta-U14/cid/88">Dekleta U14</a></li></ul></div>
		  <div class="col-md-3 col-sm-3 col-xs-3 col-xxs-6"><h3>Projekti in tekmovanja</h3><ul><li><a href="http://cms.dag-files.com/clanek/Projekti/Igriva-kosarka/cid/91">Igriva košarka</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/Lipko/cid/155">Lipko</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/Regijsko-selekcioniranje/cid/93">Regijsko selekcioniranje</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/KZS-tabor/cid/92">Tabori</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/Kosarkarski-supersolar/cid/94">Košarkarski Superšolar</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/U14-slovenia-ball/cid/95">U14 Slovenia Ball</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/All-Stars/cid/96">All stars</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/Pokal-Eurobasket-2017/cid/200">Pokal Eurobasket 2017</a></li><li><a href="http://cms.dag-files.com/clanek/Tekmovanja/Liga-Nova-KBM/cid/66">Liga Nova KBM</a></li><li><a href="http://cms.dag-files.com/clanek/Tekmovanja/1.-SKL-za-zenske/cid/67">1. SKL za ženske</a></li><li><a href="http://cms.dag-files.com/clanek/Tekmovanja/Pokal-Spar/cid/72#mbt:33-303$t&amp;0=1">Pokal Spar</a></li><li><a href="http://cms.dag-files.com/clanek/3x3/Samsung-drzavno-prvenstvo/cid/209">Košarka 3x3</a></li></ul></div>
		  <div class="cb"></div>
        </div>
      </div>
    </div>
  </div>
</div>		


 




<div class="cookieCont" id="cookidiot"><div class="moreInfoCont">Ta spletna stran uporablja piškotke z namenom, da vam ponudimo najboljšo možno uporabniško izkušnjo na naših spletnih straneh. <a href="/clanek/Piskotki/cid/280">Več</a></div><a class="agreeLink" id="ci_agree" onclick="CookieIdiot.onAgreeLinkClick(this, true);">Strinjam se</a><a class="disagreeLink" id="ci_notagree" onclick="CookieIdiot.onAgreeLinkClick(this, false);">Ne strinjam se</a><div class="lm" id="cookIdiotLm" style="display:none;"></div></div>

<script type="text/javascript">
var CookieIdiot = CookieIdiot||{};
(function() {
	CookieIdiot.onAgreeLinkClick = function(sender, agree) {
		var requestData = {};
		requestData['m'] = 'ta';

		if(agree === true) {
			var trackCheck = jQuery(sender).closest('#cookidiot').find('#trackCheck');
			if(trackCheck.length == 0) {
				requestData['ag'] = agree===true?'1':'0';
			} else {
				requestData['ag'] = trackCheck.get(0).checked===true?'1':'0';
			}
		} else {
			requestData['ag'] = agree===true?'1':'0';
		}
		
		jQuery.ajax({
			url: '/ajax/cookieidiot',
			data: (requestData),
			dataType: 'xml',
			_cookieOnSuc: requestData['ag']=='1',
			success: function(xml) {
				if(jQuery(xml).find('status').text() == '1' && !!this._cookieOnSuc) {
					var name = 'ccidiot', value='1';
					var expires = "";
			        var date = new Date();
			        date.setTime(date.getTime() + (365*24*60*60*1000)); //1 year
			        expires = "; expires=" + date.toUTCString();
				    document.cookie = name + "=" + (value || "")  + expires + "; path=/";
				}
			}
		});

		jQuery(sender).closest('#cookidiot').slideUp();		
	};

	CookieIdiot.onLearnMoreLinkClick = function(sender) {
		var requestData = {};
		requestData['m'] = 'lm';
		
		jQuery.ajax({
			snd: sender,
			url: '/ajax/cookieidiot',
			data: (requestData),
			dataType: 'xml',
			error: function(){_onLearnMoreError(this.snd, null);},
			success: function(xml) {
				if(jQuery(xml).find('status').text() == '1') {
					var cidiot = jQuery(this.snd).closest('#cookidiot');
					cidiot.find('#ci_agree,#ci_notagree').remove();
					cidiot.find('#cookIdiotLm').html(jQuery(xml).find('lmhtml').text()).show();
					jQuery(this.snd).remove();
				} else {
					_onLearnMoreError(this.snd, jQuery(xml).find('lmhtml').text());
				}
			}
		});
	};

	var _onLearnMoreError = function(sender, msg) {
		var lmDiv = jQuery(sender).closest('#cookidiot').find('#cookIdiotLm');
		if(msg == null) {
			lmDiv.html('<div class="formerror">'+Utf8.Zh+'al je pri'+Utf8.sh+'lo do napake pri pridobivanju podatkov.</div>');
		} else {
			lmDiv.html(msg);
		}
		lmDiv.show();
	};
})();
</script>		
<script type="text/javascript">
<!--
jQuery(document).ready(function() {
	jQuery(document).click(function() {Common.showGivenDivAndCloseOthers(null);});
});
//-->
</script>



<hidden id="mbt-widget-history-container"></hidden></body></html> #