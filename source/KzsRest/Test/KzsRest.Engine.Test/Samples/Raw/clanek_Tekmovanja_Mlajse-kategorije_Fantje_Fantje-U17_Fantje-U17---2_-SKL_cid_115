#Root#<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
	<!--[if lt IE 7.]>
	<script defer type="text/javascript" src="/js/pngfix.js"></script>
	<![endif]-->

 	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	
	
		<meta property="og:title" content="Fantje U17 - 2. SKL">
	
	
	
	
	
		<meta property="og:image" content="http://www.kzs.si/images/project/logo.png">
	

  	








<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="rating" content="General">
<meta name="author" content="Perun Pro">
<meta name="copyright" content="">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<meta name="Language" content="slovenian">
<meta http-equiv="content-Language" content="sl-SI">



<meta name="description" content="">

<meta name="keywords" content="">







    <link rel="shortcut icon" href="/images/favicon.png">	
    <title>KZS | Fantje U17 - 2. SKL</title>
    
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    
    <script async="" src="//www.google-analytics.com/analytics.js"></script><script type="text/javascript" src="/js/jquery-3.2.1.min.js"></script>
	<script type="text/javascript" src="/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="/js/jquery.ui/jquery-ui-1.12.1.custom.min.js"></script>
    <script type="text/javascript" src="/js/fancybox/jquery.fancybox.pack.js"></script>
    
    <script type="text/javascript" src="/js/pp-common.js"></script>
    <script type="text/javascript" src="/js/pp-objects.js"></script>
    <script type="text/javascript" src="/js/linkManager.js"></script>
    <script type="text/javascript" src="/js/utf8.js"></script>
    <script type="text/javascript" src="/js/jsp/topnavigation.js"></script>
    <script type="text/javascript" src="/js/lang/ppt_sl.js"></script>
	
	<script type="text/javascript" src="/js/widgets/api.js"></script>
	<script type="text/javascript" src="/js/widgets/new_script.js"></script>
	
	<link rel="stylesheet" href="/css/jquery.ui/jquery-ui-1.12.1.custom.min.css">
	<link rel="stylesheet" href="/css/jquery.ui/jquery-ui-1.12.1.theme.min.css">
    <link rel="stylesheet" href="/css/jquery.fancybox.css">
    <link rel="stylesheet" href="/css/jquery.fancybox-buttons.css">
    <link rel="stylesheet" href="/css/jquery.fancybox-thumbs.css">
    
    
	
	<link rel="stylesheet" href="/css/cookie.css">
    <link rel="stylesheet" href="/css/ie10-viewport-bug-workaround.css">
    <link rel="stylesheet" href="/css/kzs.css">
    <link rel="stylesheet" href="/css/kzs-cms.css">
    <link rel="stylesheet" href="/css/style.css">
    
	<link rel="stylesheet" href="/css/widgets_style_css_main.css" type="text/css" media="all">

    <link href="https://fonts.googleapis.com/css?family=Noto+Sans&amp;subset=latin-ext" rel="stylesheet">
    
    <link rel="canonical" href="http://www.kzs.si/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U17/Fantje-U17---2.-SKL/cid/115">   
    



<script type="text/javascript">

(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	ga('create', 'UA-23907246-1', 'auto');
	ga('send', 'pageview');
</script>
 
<link rel="stylesheet" type="text/css" media="all" href="https://widgets.baskethotel.com/css.php?api=39f56437f972dc4ca91d2c997f874dcfc232a688&amp;index=0&amp;v=144"></head>	



<body class="news-detail-page">

<script type="text/javascript">
<!--
var CLOSE_ON_CLICK = null;
var CALENDAR_CLOSE_ON_CLICK = null;
var CALENDAR_DATE_FORMAT = '%d.%m.%Y %H:%M';
var URL_LANG = 'sl';

jQuery.ajaxSettings.traditional = true;

//jQuery(function() {jQuery(document).tooltip();});

var SETTINGS = SETTINGS||{};

//-->
</script>


<div id="container" class="article">

	

	



 




<header>
  <div class="container-bootstrap">
    <div class="row">
      <div class="col-sm-2 col-xs-12">
        <a class="navbar-brand" href="/"><img src="/images/project/logo.png"></a>
      </div>
      <div class="col-sm-10 col-xs-12 top-menu">
        <a href="/clanek/Prenosi/cid/142" style="margin-left:0;"><i class="kzs-camera"></i> <span>Prenosi</span></a>
        
        <a style="color:#939394; cursor: default;"><i class="kzs-nkbm"></i> <span>Košarkarska banka</span></a>
        <a href="/clanek/Trgovina/cid/141"><i class="kzs-shop"></i> <span>Trgovina</span></a>
        <a href="/clanek/Vstopnice/cid/151"><i class="kzs-ticket"></i> <span>Vstopnice</span></a>
        <a href="/izbericlanstvo"><i class="kzs-ball"></i> <span>Navijači#mojtim</span></a>
        
			<a href="/prijava"><div class="kzs-profile kzs-profile-unregistered"></div></a>
		
        
      </div>
    </div>
  </div>
  <nav class="navbar navbar-inverse">
    <div class="container-bootstrap">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" onclick="TopNav.toggleMenu(this);">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
      </div>
      <div id="navbar" class="collapse navbar-collapse">
      
		<ul class="nav navbar-nav main-menu"><li class="dropdown"><a class="dropdown-toggle">Novice</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanki/Novice/Tekmovanja/id/41">Tekmovanja</a><ul><li><a href="/clanki/Novice/Tekmovanja/Liga-Nova-KBM/id/29">Liga Nova KBM</a></li><li><a href="/clanki/Novice/Tekmovanja/1.-SKL-za-zenske/id/42">1. SKL za ženske</a></li><li><a href="/clanki/Novice/Tekmovanja/Pokal-Spar/id/46">Pokal Spar</a></li><li><a href="/clanki/Novice/Tekmovanja/Pokal-clanic/id/47">Pokal članic</a></li><li><a href="/clanki/Novice/Tekmovanja/2.-SKL/id/43">2. SKL</a></li><li><a href="/clanki/Novice/Tekmovanja/Mlajse-kategorije/id/50">DP mlajših kategorij</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanki/Novice/Reprezentance/id/30">Reprezentance</a><ul><li><a href="/clanki/Novice/Reprezentance/Clani/id/31">Člani</a></li><li><a href="/clanki/Novice/Reprezentance/Clanice/id/56">Članice</a></li><li><a href="/clanki/Novice/Reprezentance/Fantje-U20/id/51">Fantje U20</a></li><li><a href="/clanki/Novice/Reprezentance/Fantje-U18/id/52">Fantje U18</a></li><li><a href="/clanki/Novice/Reprezentance/Fantje-U16/id/53">Fantje U16</a></li><li><a href="/clanki/Novice/Reprezentance/Dekleta-U20/id/57">Dekleta U20</a></li><li><a href="/clanki/Novice/Reprezentance/Dekleta-U18/id/58">Dekleta U18</a></li><li><a href="/clanki/Novice/Reprezentance/Dekleta-U16/id/59">Dekleta U16</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a>Projekti</a><ul><li><a href="/clanki/Novice/Kosarka-3x3/id/63">Košarka 3x3</a></li><li><a href="/clanki/Novice/Projekti/Tabor-KZS/id/254">Tabor KZS</a></li><li><a href="/clanki/Novice/Projekti/Kosarkarski-Supersolar/id/148">Košarkarski Superšolar</a></li><li><a href="/clanki/Novice/Projekti/U14-Slovenia-Ball/id/234">U14 Slovenia Ball</a></li><li><a href="/clanki/Novice/Projekti/Regijsko-selekcioniranje/id/162">Regijsko selekcioniranje</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanki/Novice/Ostalo/id/64">Ostalo</a></li></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Tekmovanja</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Tekmovanja/Liga-Nova-KBM/cid/66">Liga Nova KBM</a></li><li><a href="/clanek/Tekmovanja/1.-SKL-za-zenske/cid/67">1. SKL za ženske</a></li><li><a href="/clanek/Tekmovanja/2.-SKL/cid/68">2. SKL</a></li><li><a href="/clanek/Tekmovanja/3.-SKL/cid/69">3. SKL</a></li><li><a href="/clanek/Tekmovanja/4.-SKL/cid/70">4. SKL</a></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Tekmovanja/Pokal-Spar/cid/72">Pokal Spar</a></li><li><a href="/clanek/Tekmovanja/Pokal-clanic/cid/73">Pokal Članic</a></li><li><a href="/clanek/Tekmovanja/Superpokal-Slovenije/cid/77">Superpokal Slovenije</a><ul><li><a href="/clanek/Tekmovanja/Razpored-in-rezultati-vseh-tekem/cid/347">Vse tekme</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a>Mlajše kategorije - fantje</a><ul><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U19/cid/99">U19</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U17/cid/100">U17</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U15/cid/101">U15</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U13/cid/102">U13</a></li><li><a href="/clanek/Tekmovanja/Mini-pokal-Spar/cid/74">Mini pokal Spar</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U11/cid/103">U11</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje-in-dekleta-U9/cid/104">U9</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a>Mlajše kategorije - dekleta</a><ul><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Dekleta/Dekleta-U19/cid/105">U19</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Dekleta/Dekleta-U17/cid/106">U17</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Dekleta/Dekleta-U15/cid/107">U15</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Dekleta/Dekleta-U13/cid/108">U13</a></li><li><a href="/clanek/Tekmovanja/Mini-pokal-deklet/cid/75">Mini pokal deklet</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Dekleta/Dekleta-U11/cid/109">U11</a></li><li><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje-in-dekleta-U9/cid/104">U9</a></li></ul></li></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Reprezentance</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Reprezentance/Clani/cid/37">Člani</a></li><li><a href="/clanek/Reprezentance/Clani-B/cid/165">Člani B</a></li><li><a href="/clanek/Reprezentance/Clanice/cid/83">Članice</a></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Reprezentance/Fantje-U20/cid/78">Fantje U20</a></li><li><a href="/clanek/Reprezentance/Fantje-U18/cid/79">Fantje U18</a></li><li><a href="/clanek/Reprezentance/Fantje-U16/cid/80">Fantje U16</a></li><li><a href="/clanek/Reprezentance/Fantje-U14/cid/82">Fantje U14</a></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Reprezentance/Dekleta-U20/cid/84">Dekleta U20</a></li><li><a href="/clanek/Reprezentance/Dekleta-U18/cid/85">Dekleta U18</a></li><li><a href="/clanek/Reprezentance/Dekleta-U16/cid/86">Dekleta U16</a></li><li><a href="/clanek/Reprezentance/Dekleta-U14/cid/88">Dekleta U14</a></li></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Projekti</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6 col-xs-6 event-menu"><div class="row"><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Igriva-kosarka/cid/91"><img src="/binary/showimage/id/6420/rw/200/rh/200/rp/true/rd/true/wm/0/h/727008"><span>Igriva košarka</span></a></div><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Lipko/cid/155"><img src="/binary/showimage/id/6421/rw/200/rh/200/rp/true/rd/true/wm/0/h/ec6bc6"><span>Lipko</span></a></div></div></div><div class="col-md-3 col-sm-6 col-xs-6 event-menu"><div class="row"><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Regijsko-selekcioniranje/cid/93"><img src="/binary/showimage/id/6422/rw/200/rh/200/rp/true/rd/true/wm/0/h/8b3394"><span>Regijsko selekcioniranje</span></a></div><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/KZS-tabor/cid/92"><img src="/binary/showimage/id/6423/rw/200/rh/200/rp/true/rd/true/wm/0/h/7a0e69"><span>Tabori KZS</span></a></div></div></div><div class="col-md-3 col-sm-6 col-xs-6 event-menu"><div class="row"><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Kosarkarski-supersolar/cid/94"><img src="/binary/showimage/id/6424/rw/200/rh/200/rp/true/rd/true/wm/0/h/66b88d"><span>Košarkarski superšolar</span></a></div><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/U14-Slovenia-Ball/cid/95"><img src="/binary/showimage/id/6428/rw/200/rh/200/rp/true/rd/true/wm/0/h/ba783a"><span>U14 Slovenia Ball</span></a></div></div></div><div class="col-md-3 col-sm-6 col-xs-6 event-menu"><div class="row"><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Dan-slovenske-kosarke/cid/96"><img src="/binary/showimage/id/6425/rw/200/rh/200/rp/true/rd/true/wm/0/h/781b90"><span>Dan slovenske košarke</span></a></div><div class="col-xxs-12 col-xs-6 col-sm-6 col-md-6"><a class="menu-img" href="/clanek/Projekti/Pokal-Eurobasket-2017/cid/200"><img src="/binary/showimage/id/6426/rw/200/rh/200/rp/true/rd/true/wm/0/h/251ee0"><span>Pokal Eurobasket 2017</span></a></div></div></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Košarka 3x3</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/3x3/O-3x3/cid/207">O 3x3</a></li><li><a href="/clanek/3x3/Pravila/cid/372">Pravila</a></li><li><a href="/clanek/3x3/Reprezentance/cid/345">Reprezentance</a></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/3x3/Grosbasket-DP/cid/209">Grosbasket DP</a></li><li><a href="https://www.3x3ljubljanachallenger.com/" target="_blank">Ljubljana Challenger</a></li><li><a href="/clanek/3x3/Mednar.-klubska-tekm./cid/360">Mednarodna klubska tekmovanja</a></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/3x3/Lokalci/cid/208">Lokalni turnirji</a></li></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Organizacija</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Organizacija/Vse-o-KZS/cid/125">Vse o KZS</a></li><li><a>Člani in organi</a><ul><li><a href="/clanek/Organizacija/Clani-in-organi/Organi/cid/127">Organi</a></li><li><a href="/clanek/Organizacija/Clani-in-organi/Clani/cid/128">Člani</a></li><li><a href="/clanek/Organizacija/Clani-in-organi/Zdruzenja/cid/129">Združenja</a></li><li><a href="/clanek/Organizacija/Clani-in-organi/Stalne-komisije/cid/143">Stalne komisije</a></li><li><a href="/clanek/Organizacija/Clani-in-organi/Licenciranje/cid/152">Licenciranje</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a>Dokumenti</a><ul><li><a href="/clanek/Organizacija/Dokumenti/Pravilniki/cid/135">Pravilniki</a></li><li><a href="/clanek/Organizacija/Dokumenti/Dokumenti/cid/136">Dokumenti</a></li><li><a href="/clanek/Organizacija/Dokumenti/Obrazci/cid/137">Obrazci</a></li><li><a href="/clanek/Organizacija/Dokumenti/Razpisi/cid/153">Razpisi</a></li><li><a href="/clanek/Organizacija/Dokumenti/Vodenje-statistike/cid/138">Vodenje statistike</a></li><li><a href="/clanek/Organizacija/Dokumenti/Seminarji-za-pomozne-sodnike/cid/410">Seminarji za pomožne sodnike</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Organizacija/Integriteta-in-zascita-igre/cid/400">Integriteta in zaščita igre</a><ul><li><a href="/clanek/Organizacija/Integriteta-in-zascita-igre/Sporocilo-predsednika-KZS/cid/401">Sporočilo predsednika KZS</a></li><li><a href="/clanek/Organizacija/Integriteta-in-zascita-igre/Kodeks-integritete-KZS/cid/402">Kodeks integritete KZS</a></li><li><a href="https://anonimnaprijava.kzs.si/" target="_blank">Anonimna prijava</a></li></ul></li></ul></div><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/Organizacija/Bilteni/cid/132">Bilteni</a></li><li><a href="/clanek/Organizacija/Logotipi/cid/130">Logotipi</a></li><li><a href="/clanek/Organizacija/Povezave/cid/133">Povezave</a></li></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">Anon. prijava</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="https://anonimnaprijava.kzs.si/" target="_blank">Anon. prijava</a></li></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div></div></div></div></li><li class="dropdown"><a class="dropdown-toggle">BizBasket 3x3</a><div class="dropdown-menu"><div class="container-bootstrap"><div class="row"><div class="col-md-3 col-sm-6"><ul><li><a href="/clanek/BizBasket-3x3/cid/411">BizBasket 3x3</a></li></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div><div class="col-md-3 col-sm-6"><ul></ul></div></div></div></div></li></ul>
		
<script type="text/javascript">
jQuery(document).ready(function() {
	jQuery('ul.nav li.dropdown').hover(function() {
		jQuery(this).find('.dropdown-menu').stop(true, true).delay(100).fadeIn(300);
		}, function() {
			jQuery(this).find('.dropdown-menu').stop(true, true).delay(100).fadeOut(300);
		});
});
</script>
        <div class="input-group header-search">
          <form class="navbar-form navbar-left" role="search" action="/iskanje" method="post">
            <button id="search-button" class="btn btn-default" onclick="return TopNav.onSearchOpenClick(this);"><span class="glyphicon glyphicon-search"></span></button>
            <div id="search-form" class="form-group">
              <div class="input-group">
                <input type="text" class="form-control" name="searchQuery" onkeydown="Common.submitClosestFormOnEnter(this, event, 'search');" placeholder="Iskanje klubov">
                <span id="search-icon" class="input-group-addon" onclick="commonSubmitClosestForm(this, 'search')"><span class="glyphicon glyphicon-search"></span></span>
              </div>
            </div>
          </form>
        </div><!-- /input-group -->

        <ul class="nav navbar-nav social-menu">
          <li><a target="_blank" href="https://www.instagram.com/kzs_si/"><i class="kzs-instagram"></i></a></li>
          <li><a target="_blank" href="https://www.youtube.com/user/kzsslobasket"><i class="kzs-video-alt"></i></a></li>
          <li><a target="_blank" href="https://www.facebook.com/koszveza/"><i class="kzs-facebook"></i></a></li>
          <li><a target="_blank" href="https://twitter.com/kzs_si"><i class="kzs-twitter"></i></a></li>
        </ul>

      </div><!--/.nav-collapse -->
    </div>
  </nav>
</header>

<div class="row"><div class="col-sm-12 image"><img src="/binary/showimage/id/4090/wm/0/h/dcf634"></div></div><div class="container-fluid"><div class="row"><nav class="navbar navbar-inverse navbar-second" style="margin-top:10px;"><div class=""><div class="navbar-header"><button type="button" class="navbar-toggle collapsed" onclick="TopNav.toggleMenu2(this);"><span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button></div><div id="navbar-two" class="collapse navbar-collapse"><ul class="nav navbar-nav main-menu" id="menu"><li class="dropdown"><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U17/Fantje-U17---1.-SKL/cid/177#menu" class="dropdown-toggle">Fantje U17 - 1. SKL</a></li><li class="dropdown active"><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U17/Fantje-U17---2.-SKL/cid/115#menu" class="dropdown-toggle">Fantje U17 - 2. SKL</a></li><li class="dropdown"><a href="/clanek/Tekmovanja/Mlajse-kategorije/Fantje/Fantje-U17/Fantje-U17---kval.-za-1.-SKL/cid/116#menu" class="dropdown-toggle">Fantje U17 - kval. za 1. SKL</a></li></ul></div></div></nav></div></div>
	
	<div id="main" class=""><!--middle parts starts-->
		<div class="">
			<div class="">

				



		
				








<!-- javascript check -->
<noscript>
    &lt;div class="errormessage"&gt;Za pravilno delovanje morate imeti v brskalniku omogočen JavaScript&lt;/div&gt;
</noscript>
<!-- cookies check -->
<script type="text/javascript">
    jQuery(function() {
        if (!areCookiesEnabled()) {
            addErrorMessage('Za pravilno delovanje morate imeti v brskalniku omogočene piškotke (cookies)');
        }
    });
</script>


<div id="infomessage_template" class="infomessage hidden" onclick="jQuery(this).fadeOut()"></div>
<div id="errormessage_template" class="errormessage hidden" onclick="jQuery(this).fadeOut()"></div>

<script type="text/javascript">
function addInfoMessage(message) {
	var infom = jQuery("#infomessage_template").clone().removeClass("hidden").removeAttr("id").html(message);
	jQuery("#infomessage_template").before(infom);
}
function addErrorMessage(message) {
	var errorm = jQuery("#errormessage_template").clone().removeClass("hidden").removeAttr("id").html(message);
	jQuery("#errormessage_template").before(errorm);
}
    
    function createCookie(name, value, days) {
        var expires;
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toGMTString();
        }
        else expires = "";
        document.cookie = name + "=" + value + expires + "; path=/";
    }

    function readCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    function eraseCookie(name) {
        createCookie(name, "", -1);
    }

    function areCookiesEnabled() {
        var r = false;
        createCookie("testing", "Hello", 1);
        if (readCookie("testing") != null) {
            r = true;
            eraseCookie("testing");
        }
        return r;
    }        
</script>

	
			
							

<div class="container-bootstrap"><div class="row "><div class="col-md-12"><h1>Fantje U17 - 2. SKL</h1></div></div></div><div class="container-bootstrap"><div class="row"><div class=" art-content"><div class="container">
	<div id="schedule" mbt_widget="303"><div id="mbt-v2-schedule-long" class="mbt-v2-widget">
	<div class="mbt-v2-header">
					Razpored in rezultati
			</div>
	<div class="mbt-v2-widget-content">
		<div id="33-303-mobile-menu" class="mbt-v2-mobile-menu">
			Razpored
		</div>
		<nav id="33-303-mbt-v2-navigation" class="mbt-v2-navigation">
						<div id="33-303-tab-1" data-name="schedule_and_results" data-type="schedule_only" class="mbt-v2-navigation-tab-active" prevclassname="mbt-v2-navigation-tab-active">
				Razpored
			</div>
			<div id="33-303-tab-2" data-name="schedule_and_results" data-type="results_only" class="mbt-v2-navigation-tab">
				Rezultati
			</div>
		</nav>
		<div class="mbt-v2-divider"></div>
		<div id="33-303-mobile-filters-block" class="mbt-v2-mobile-filters-block">
			Filtri
		</div>
		<div id="33-303-filters-block" class="mbt-v2-filters-block">
                            <select id="33-303-filter-season" class="mbt-v2-select">
											<option value="102585" selected="selected">
							2018-2019
						</option>
											<option value="97929">
							2017-2018
						</option>
											<option value="93981">
							2016-2017
						</option>
											<option value="91067">
							2015-2016
						</option>
											<option value="89563">
							2014-2015
						</option>
											<option value="85461">
							2013-2014
						</option>
											<option value="63283">
							2012-2013
						</option>
											<option value="15433">
							2011-2012
						</option>
									</select>
                        				<select id="33-303-filter-stage" data-filter="stage" data-load="get-stages" class="mbt-v2-select">
					<option value="">
						Vsi deli tekmovanja
					</option>
											<option value="206897">
							1. del
						</option>
                                                            <option value="209317">
	                                1. del-Skupina A
	                            </option>
                                                                                            <option value="209315">
	                                1. del-Skupina B
	                            </option>
                                                                                            <option value="209313">
	                                1. del-Skupina C
	                            </option>
                                                                                            <option value="209311">
	                                1. del-Skupina D
	                            </option>
                                                                                            <option value="209309">
	                                1. del-Skupina E
	                            </option>
                                                                                            <option value="209307">
	                                1. del-Skupina F
	                            </option>
                                                                                            <option value="209305">
	                                1. del-Skupina G
	                            </option>
                                                                                            <option value="209303">
	                                1. del-Skupina H
	                            </option>
                                                                                            <option value="209301">
	                                1. del-Skupina I
	                            </option>
                                                                                            <option value="209299">
	                                1. del-Skupina J
	                            </option>
                                                                                            <option value="209297">
	                                1. del-Skupina K
	                            </option>
                                                                                            <option value="209295">
	                                1. del-Skupina L
	                            </option>
                                                                                            <option value="209293">
	                                1. del-Skupina M
	                            </option>
                                                                                            <option value="209291">
	                                1. del-Skupina N
	                            </option>
                                                            									</select>
										<select id="33-303-filter-game-day" data-filter="game_day" data-load="get-game-days" class="mbt-v2-select">
					<option value="">
						Kolo
					</option>
											<option value="1">
							1
						</option>
											<option value="2">
							2
						</option>
											<option value="3">
							3
						</option>
											<option value="4">
							4
						</option>
											<option value="5">
							5
						</option>
											<option value="6">
							6
						</option>
									</select>	
										<select id="33-303-filter-team" data-filter="team" data-load="get-teams" class="mbt-v2-select">
					<option value="">
						Ekipa
					</option>
											<option value="307703">
							Ajdas Lenart
						</option>
											<option value="269283">
							Ajdovščina
						</option>
											<option value="4672567">
							Ajdovščina B
						</option>
											<option value="196043">
							Borut Besedič - Čiro
						</option>
											<option value="196223">
							Celje
						</option>
											<option value="196433">
							Cerknica
						</option>
											<option value="196343">
							Chilli Jesenice
						</option>
											<option value="196063">
							Drava U17
						</option>
											<option value="165563">
							Dravograd Koroška
						</option>
											<option value="4612373">
							ECE Triglav B
						</option>
											<option value="195943">
							Elektra Šoštanj
						</option>
											<option value="196463">
							Globus
						</option>
											<option value="269243">
							Grosuplje B
						</option>
											<option value="269253">
							Helios Suns B
						</option>
											<option value="4596641">
							Helios Suns C
						</option>
											<option value="165603">
							Hopsi Polzela
						</option>
											<option value="196353">
							Ilirija
						</option>
											<option value="196173">
							Input Nazarje
						</option>
											<option value="4619103">
							Ivančna Gorica
						</option>
											<option value="195953">
							Janče Ljubljana A
						</option>
											<option value="4619105">
							Janče Ljubljana B
						</option>
											<option value="196393">
							Ježica
						</option>
											<option value="196183">
							Keleja
						</option>
											<option value="196283">
							Kolpa
						</option>
											<option value="196373">
							Komenda
						</option>
											<option value="4612375">
							KOŠ Primorska B
						</option>
											<option value="196383">
							Krško
						</option>
											<option value="196313">
							Krvavec Botana
						</option>
											<option value="196163">
							Lastovka
						</option>
											<option value="195963">
							Litija
						</option>
											<option value="269233">
							Ljubljana B
						</option>
											<option value="269263">
							Logatec
						</option>
											<option value="196073">
							Lovrenc
						</option>
											<option value="196503">
							Mesarija Prunk
						</option>
											<option value="4596651">
							Nova Gorica mladi B
						</option>
											<option value="196253">
							Parklji B
						</option>
											<option value="195983">
							Petrol Olimpija B
						</option>
											<option value="269273">
							Pivka
						</option>
											<option value="165533">
							Portorož
						</option>
											<option value="165673">
							Postojna
						</option>
											<option value="31613">
							Radenska Creativ Sobota
						</option>
											<option value="196303">
							Radovljica
						</option>
											<option value="165713">
							Rogaška
						</option>
											<option value="269213">
							Rudar
						</option>
											<option value="196263">
							ŠD Šentvid - Ljubljana
						</option>
											<option value="4619111">
							ŠD Šentvid - Ljubljana B
						</option>
											<option value="196093">
							Šentjur Tajfun
						</option>
											<option value="4596671">
							Slovan B
						</option>
											<option value="4596551">
							Soperga
						</option>
											<option value="196493">
							Tera Tolmin
						</option>
											<option value="4646255">
							Troti
						</option>
											<option value="196103">
							Vojnik Gradbena trgovina G7
						</option>
											<option value="4596591">
							Vrani Vransko
						</option>
											<option value="196423">
							Vrhnika
						</option>
											<option value="196213">
							Zlatorog B
						</option>
									</select>
						<select id="33-303-filter-month" data-filter="month" data-load="get-months" class="mbt-v2-select">
				<option value="all">
					Mesec
				</option>
									<option value="9">
						september
					</option>
									<option value="10">
						oktober
					</option>
									<option value="11">
						november
					</option>
							</select>
				
		</div>
		<div class="mbt-v2-divider"></div>
		<div id="33-303-container">	<table id="mbt-v2-schedule-table" class="mbt-v2-schedule-long-table mbt-v2-table mbt-v2-vertical-responsive">
			
		<tbody>
							<tr>
											<td data-th="Igralni dan">
							2
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240549&amp;league_id=undefined&amp;season_id=102585" game_id="4240549" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.607476001541234321" onlyurl="1">03.11.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.607476001541234321") === "object") {
                               document.getElementById("a-0.607476001541234321").href = navigateGame(document.getElementById('a-0.607476001541234321').getAttribute('game_id'), document.getElementById('a-0.607476001541234321').getAttribute('season_id'), document.getElementById('a-0.607476001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4596551&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4596551" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.607592001541234321" onlyurl="1">Soperga</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.607592001541234321") === "object") {
                               document.getElementById("a-0.607592001541234321").href = navigateTeam(document.getElementById('a-0.607592001541234321').getAttribute('team_id'), document.getElementById('a-0.607592001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240549&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240549" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.607712001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.607712001541234321") === "object") {
                               document.getElementById("a-0.607712001541234321").href = navigateGame(document.getElementById('a-0.607712001541234321').getAttribute('game_id'), document.getElementById('a-0.607712001541234321').getAttribute('season_id'), document.getElementById('a-0.607712001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196213&amp;league_id=undefined&amp;season_id=102585" team_id="196213" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.607779001541234321" onlyurl="1">Zlatorog B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.607779001541234321") === "object") {
                               document.getElementById("a-0.607779001541234321").href = navigateTeam(document.getElementById('a-0.607779001541234321').getAttribute('team_id'), document.getElementById('a-0.607779001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=13523" arena_id="13523" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.607836001541234321" onlyurl="1">ŠD Vinka Canjka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.607836001541234321") === "object") {
                               document.getElementById("a-0.607836001541234321").href = navigateArena(document.getElementById('a-0.607836001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							3
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240553&amp;league_id=undefined&amp;season_id=102585" game_id="4240553" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.607945001541234321" onlyurl="1">04.11.2018 13:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.607945001541234321") === "object") {
                               document.getElementById("a-0.607945001541234321").href = navigateGame(document.getElementById('a-0.607945001541234321').getAttribute('game_id'), document.getElementById('a-0.607945001541234321').getAttribute('season_id'), document.getElementById('a-0.607945001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=307703&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="307703" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608011001541234321" onlyurl="1">Ajdas Lenart</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608011001541234321") === "object") {
                               document.getElementById("a-0.608011001541234321").href = navigateTeam(document.getElementById('a-0.608011001541234321').getAttribute('team_id'), document.getElementById('a-0.608011001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240553&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240553" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608100001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608100001541234321") === "object") {
                               document.getElementById("a-0.608100001541234321").href = navigateGame(document.getElementById('a-0.608100001541234321').getAttribute('game_id'), document.getElementById('a-0.608100001541234321').getAttribute('season_id'), document.getElementById('a-0.608100001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4596551&amp;league_id=undefined&amp;season_id=102585" team_id="4596551" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608156001541234321" onlyurl="1">Soperga</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608156001541234321") === "object") {
                               document.getElementById("a-0.608156001541234321").href = navigateTeam(document.getElementById('a-0.608156001541234321').getAttribute('team_id'), document.getElementById('a-0.608156001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=8563" arena_id="8563" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608208001541234321" onlyurl="1">ŠD Lenart</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608208001541234321") === "object") {
                               document.getElementById("a-0.608208001541234321").href = navigateArena(document.getElementById('a-0.608208001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							5
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240583&amp;league_id=undefined&amp;season_id=102585" game_id="4240583" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608305001541234321" onlyurl="1">07.11.2018 19:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608305001541234321") === "object") {
                               document.getElementById("a-0.608305001541234321").href = navigateGame(document.getElementById('a-0.608305001541234321').getAttribute('game_id'), document.getElementById('a-0.608305001541234321').getAttribute('season_id'), document.getElementById('a-0.608305001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=195943&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195943" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608367001541234321" onlyurl="1">Elektra Šoštanj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608367001541234321") === "object") {
                               document.getElementById("a-0.608367001541234321").href = navigateTeam(document.getElementById('a-0.608367001541234321').getAttribute('team_id'), document.getElementById('a-0.608367001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240583&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240583" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608452001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608452001541234321") === "object") {
                               document.getElementById("a-0.608452001541234321").href = navigateGame(document.getElementById('a-0.608452001541234321').getAttribute('game_id'), document.getElementById('a-0.608452001541234321').getAttribute('season_id'), document.getElementById('a-0.608452001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=165563&amp;league_id=undefined&amp;season_id=102585" team_id="165563" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608506001541234321" onlyurl="1">Dravograd Koroška</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608506001541234321") === "object") {
                               document.getElementById("a-0.608506001541234321").href = navigateTeam(document.getElementById('a-0.608506001541234321').getAttribute('team_id'), document.getElementById('a-0.608506001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7033" arena_id="7033" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608555001541234321" onlyurl="1">ŠD Šoštanj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608555001541234321") === "object") {
                               document.getElementById("a-0.608555001541234321").href = navigateArena(document.getElementById('a-0.608555001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							6
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4244481&amp;league_id=undefined&amp;season_id=102585" game_id="4244481" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608651001541234321" onlyurl="1">07.11.2018 20:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608651001541234321") === "object") {
                               document.getElementById("a-0.608651001541234321").href = navigateGame(document.getElementById('a-0.608651001541234321').getAttribute('game_id'), document.getElementById('a-0.608651001541234321').getAttribute('season_id'), document.getElementById('a-0.608651001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=165533&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165533" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608714001541234321" onlyurl="1">Portorož</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608714001541234321") === "object") {
                               document.getElementById("a-0.608714001541234321").href = navigateTeam(document.getElementById('a-0.608714001541234321').getAttribute('team_id'), document.getElementById('a-0.608714001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4244481&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4244481" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608799001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608799001541234321") === "object") {
                               document.getElementById("a-0.608799001541234321").href = navigateGame(document.getElementById('a-0.608799001541234321').getAttribute('game_id'), document.getElementById('a-0.608799001541234321').getAttribute('season_id'), document.getElementById('a-0.608799001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4612375&amp;league_id=undefined&amp;season_id=102585" team_id="4612375" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608852001541234321" onlyurl="1">KOŠ Primorska B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608852001541234321") === "object") {
                               document.getElementById("a-0.608852001541234321").href = navigateTeam(document.getElementById('a-0.608852001541234321').getAttribute('team_id'), document.getElementById('a-0.608852001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7693" arena_id="7693" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.608901001541234321" onlyurl="1">ŠD Lucija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.608901001541234321") === "object") {
                               document.getElementById("a-0.608901001541234321").href = navigateArena(document.getElementById('a-0.608901001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							6
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240757&amp;league_id=undefined&amp;season_id=102585" game_id="4240757" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609001001541234321" onlyurl="1">08.11.2018 19:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609001001541234321") === "object") {
                               document.getElementById("a-0.609001001541234321").href = navigateGame(document.getElementById('a-0.609001001541234321').getAttribute('game_id'), document.getElementById('a-0.609001001541234321').getAttribute('season_id'), document.getElementById('a-0.609001001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196283&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196283" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609080001541234321" onlyurl="1">Kolpa</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609080001541234321") === "object") {
                               document.getElementById("a-0.609080001541234321").href = navigateTeam(document.getElementById('a-0.609080001541234321').getAttribute('team_id'), document.getElementById('a-0.609080001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240757&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240757" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609167001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609167001541234321") === "object") {
                               document.getElementById("a-0.609167001541234321").href = navigateGame(document.getElementById('a-0.609167001541234321').getAttribute('game_id'), document.getElementById('a-0.609167001541234321').getAttribute('season_id'), document.getElementById('a-0.609167001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196163&amp;league_id=undefined&amp;season_id=102585" team_id="196163" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609221001541234321" onlyurl="1">Lastovka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609221001541234321") === "object") {
                               document.getElementById("a-0.609221001541234321").href = navigateTeam(document.getElementById('a-0.609221001541234321').getAttribute('team_id'), document.getElementById('a-0.609221001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7183" arena_id="7183" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609270001541234321" onlyurl="1">OŠ Mirana Jarca, Črnomelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609270001541234321") === "object") {
                               document.getElementById("a-0.609270001541234321").href = navigateArena(document.getElementById('a-0.609270001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240591&amp;league_id=undefined&amp;season_id=102585" game_id="4240591" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609366001541234321" onlyurl="1">09.11.2018 17:30</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609366001541234321") === "object") {
                               document.getElementById("a-0.609366001541234321").href = navigateGame(document.getElementById('a-0.609366001541234321').getAttribute('game_id'), document.getElementById('a-0.609366001541234321').getAttribute('season_id'), document.getElementById('a-0.609366001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196103&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196103" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609428001541234321" onlyurl="1">Vojnik Gradbena trgovina G7</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609428001541234321") === "object") {
                               document.getElementById("a-0.609428001541234321").href = navigateTeam(document.getElementById('a-0.609428001541234321').getAttribute('team_id'), document.getElementById('a-0.609428001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240591&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240591" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609513001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609513001541234321") === "object") {
                               document.getElementById("a-0.609513001541234321").href = navigateGame(document.getElementById('a-0.609513001541234321').getAttribute('game_id'), document.getElementById('a-0.609513001541234321').getAttribute('season_id'), document.getElementById('a-0.609513001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619111&amp;league_id=undefined&amp;season_id=102585" team_id="4619111" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609567001541234321" onlyurl="1">ŠD Šentvid - Ljubljana B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609567001541234321") === "object") {
                               document.getElementById("a-0.609567001541234321").href = navigateTeam(document.getElementById('a-0.609567001541234321').getAttribute('team_id'), document.getElementById('a-0.609567001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=8813" arena_id="8813" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609616001541234321" onlyurl="1">ŠD OŠ Vojnik</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609616001541234321") === "object") {
                               document.getElementById("a-0.609616001541234321").href = navigateArena(document.getElementById('a-0.609616001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240735&amp;league_id=undefined&amp;season_id=102585" game_id="4240735" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609710001541234321" onlyurl="1">09.11.2018 20:30</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609710001541234321") === "object") {
                               document.getElementById("a-0.609710001541234321").href = navigateGame(document.getElementById('a-0.609710001541234321').getAttribute('game_id'), document.getElementById('a-0.609710001541234321').getAttribute('season_id'), document.getElementById('a-0.609710001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196163&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196163" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609771001541234321" onlyurl="1">Lastovka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609771001541234321") === "object") {
                               document.getElementById("a-0.609771001541234321").href = navigateTeam(document.getElementById('a-0.609771001541234321').getAttribute('team_id'), document.getElementById('a-0.609771001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240735&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240735" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609854001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609854001541234321") === "object") {
                               document.getElementById("a-0.609854001541234321").href = navigateGame(document.getElementById('a-0.609854001541234321').getAttribute('game_id'), document.getElementById('a-0.609854001541234321').getAttribute('season_id'), document.getElementById('a-0.609854001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196383&amp;league_id=undefined&amp;season_id=102585" team_id="196383" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609908001541234321" onlyurl="1">Krško</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609908001541234321") === "object") {
                               document.getElementById("a-0.609908001541234321").href = navigateTeam(document.getElementById('a-0.609908001541234321').getAttribute('team_id'), document.getElementById('a-0.609908001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=13533" arena_id="13533" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.609957001541234321" onlyurl="1">POŠ Ihan</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.609957001541234321") === "object") {
                               document.getElementById("a-0.609957001541234321").href = navigateArena(document.getElementById('a-0.609957001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240615&amp;league_id=undefined&amp;season_id=102585" game_id="4240615" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610072001541234321" onlyurl="1">10.11.2018 </a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610072001541234321") === "object") {
                               document.getElementById("a-0.610072001541234321").href = navigateGame(document.getElementById('a-0.610072001541234321').getAttribute('game_id'), document.getElementById('a-0.610072001541234321').getAttribute('season_id'), document.getElementById('a-0.610072001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=269253&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269253" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610136001541234321" onlyurl="1">Helios Suns B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610136001541234321") === "object") {
                               document.getElementById("a-0.610136001541234321").href = navigateTeam(document.getElementById('a-0.610136001541234321').getAttribute('team_id'), document.getElementById('a-0.610136001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240615&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240615" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610220001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610220001541234321") === "object") {
                               document.getElementById("a-0.610220001541234321").href = navigateGame(document.getElementById('a-0.610220001541234321').getAttribute('game_id'), document.getElementById('a-0.610220001541234321').getAttribute('season_id'), document.getElementById('a-0.610220001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196043&amp;league_id=undefined&amp;season_id=102585" team_id="196043" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610274001541234321" onlyurl="1">Borut Besedič - Čiro</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610274001541234321") === "object") {
                               document.getElementById("a-0.610274001541234321").href = navigateTeam(document.getElementById('a-0.610274001541234321').getAttribute('team_id'), document.getElementById('a-0.610274001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7053" arena_id="7053" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610322001541234321" onlyurl="1">ŠD Domžale</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610322001541234321") === "object") {
                               document.getElementById("a-0.610322001541234321").href = navigateArena(document.getElementById('a-0.610322001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240687&amp;league_id=undefined&amp;season_id=102585" game_id="4240687" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610429001541234321" onlyurl="1">10.11.2018 </a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610429001541234321") === "object") {
                               document.getElementById("a-0.610429001541234321").href = navigateGame(document.getElementById('a-0.610429001541234321').getAttribute('game_id'), document.getElementById('a-0.610429001541234321').getAttribute('season_id'), document.getElementById('a-0.610429001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=195963&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195963" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610503001541234321" onlyurl="1">Litija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610503001541234321") === "object") {
                               document.getElementById("a-0.610503001541234321").href = navigateTeam(document.getElementById('a-0.610503001541234321').getAttribute('team_id'), document.getElementById('a-0.610503001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240687&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240687" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610588001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610588001541234321") === "object") {
                               document.getElementById("a-0.610588001541234321").href = navigateGame(document.getElementById('a-0.610588001541234321').getAttribute('game_id'), document.getElementById('a-0.610588001541234321').getAttribute('season_id'), document.getElementById('a-0.610588001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619103&amp;league_id=undefined&amp;season_id=102585" team_id="4619103" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610642001541234321" onlyurl="1">Ivančna Gorica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610642001541234321") === "object") {
                               document.getElementById("a-0.610642001541234321").href = navigateTeam(document.getElementById('a-0.610642001541234321').getAttribute('team_id'), document.getElementById('a-0.610642001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7293" arena_id="7293" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610691001541234321" onlyurl="1">ŠD Litija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610691001541234321") === "object") {
                               document.getElementById("a-0.610691001541234321").href = navigateArena(document.getElementById('a-0.610691001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4244485&amp;league_id=undefined&amp;season_id=102585" game_id="4244485" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610796001541234321" onlyurl="1">10.11.2018 </a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610796001541234321") === "object") {
                               document.getElementById("a-0.610796001541234321").href = navigateGame(document.getElementById('a-0.610796001541234321').getAttribute('game_id'), document.getElementById('a-0.610796001541234321').getAttribute('season_id'), document.getElementById('a-0.610796001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619105&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4619105" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610859001541234321" onlyurl="1">Janče Ljubljana B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610859001541234321") === "object") {
                               document.getElementById("a-0.610859001541234321").href = navigateTeam(document.getElementById('a-0.610859001541234321').getAttribute('team_id'), document.getElementById('a-0.610859001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4244485&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4244485" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610942001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610942001541234321") === "object") {
                               document.getElementById("a-0.610942001541234321").href = navigateGame(document.getElementById('a-0.610942001541234321').getAttribute('game_id'), document.getElementById('a-0.610942001541234321').getAttribute('season_id'), document.getElementById('a-0.610942001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4596671&amp;league_id=undefined&amp;season_id=102585" team_id="4596671" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.610995001541234321" onlyurl="1">Slovan B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.610995001541234321") === "object") {
                               document.getElementById("a-0.610995001541234321").href = navigateTeam(document.getElementById('a-0.610995001541234321').getAttribute('team_id'), document.getElementById('a-0.610995001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=110489" arena_id="110489" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611044001541234321" onlyurl="1">OŠ Ledina</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611044001541234321") === "object") {
                               document.getElementById("a-0.611044001541234321").href = navigateArena(document.getElementById('a-0.611044001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240545&amp;league_id=undefined&amp;season_id=102585" game_id="4240545" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611199001541234321" onlyurl="1">10.11.2018 </a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611199001541234321") === "object") {
                               document.getElementById("a-0.611199001541234321").href = navigateGame(document.getElementById('a-0.611199001541234321').getAttribute('game_id'), document.getElementById('a-0.611199001541234321').getAttribute('season_id'), document.getElementById('a-0.611199001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=165603&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165603" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611266001541234321" onlyurl="1">Hopsi Polzela</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611266001541234321") === "object") {
                               document.getElementById("a-0.611266001541234321").href = navigateTeam(document.getElementById('a-0.611266001541234321').getAttribute('team_id'), document.getElementById('a-0.611266001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240545&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240545" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611352001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611352001541234321") === "object") {
                               document.getElementById("a-0.611352001541234321").href = navigateGame(document.getElementById('a-0.611352001541234321').getAttribute('game_id'), document.getElementById('a-0.611352001541234321').getAttribute('season_id'), document.getElementById('a-0.611352001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4596551&amp;league_id=undefined&amp;season_id=102585" team_id="4596551" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611406001541234321" onlyurl="1">Soperga</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611406001541234321") === "object") {
                               document.getElementById("a-0.611406001541234321").href = navigateTeam(document.getElementById('a-0.611406001541234321').getAttribute('team_id'), document.getElementById('a-0.611406001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7143" arena_id="7143" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611455001541234321" onlyurl="1">ŠD Polzela</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611455001541234321") === "object") {
                               document.getElementById("a-0.611455001541234321").href = navigateArena(document.getElementById('a-0.611455001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240689&amp;league_id=undefined&amp;season_id=102585" game_id="4240689" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611558001541234321" onlyurl="1">10.11.2018 </a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611558001541234321") === "object") {
                               document.getElementById("a-0.611558001541234321").href = navigateGame(document.getElementById('a-0.611558001541234321').getAttribute('game_id'), document.getElementById('a-0.611558001541234321').getAttribute('season_id'), document.getElementById('a-0.611558001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196393&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196393" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611620001541234321" onlyurl="1">Ježica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611620001541234321") === "object") {
                               document.getElementById("a-0.611620001541234321").href = navigateTeam(document.getElementById('a-0.611620001541234321').getAttribute('team_id'), document.getElementById('a-0.611620001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240689&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240689" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611703001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611703001541234321") === "object") {
                               document.getElementById("a-0.611703001541234321").href = navigateGame(document.getElementById('a-0.611703001541234321').getAttribute('game_id'), document.getElementById('a-0.611703001541234321').getAttribute('season_id'), document.getElementById('a-0.611703001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196313&amp;league_id=undefined&amp;season_id=102585" team_id="196313" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611757001541234321" onlyurl="1">Krvavec Botana</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611757001541234321") === "object") {
                               document.getElementById("a-0.611757001541234321").href = navigateTeam(document.getElementById('a-0.611757001541234321').getAttribute('team_id'), document.getElementById('a-0.611757001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7203" arena_id="7203" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611805001541234321" onlyurl="1">Ježica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611805001541234321") === "object") {
                               document.getElementById("a-0.611805001541234321").href = navigateArena(document.getElementById('a-0.611805001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4244439&amp;league_id=undefined&amp;season_id=102585" game_id="4244439" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611909001541234321" onlyurl="1">10.11.2018 </a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611909001541234321") === "object") {
                               document.getElementById("a-0.611909001541234321").href = navigateGame(document.getElementById('a-0.611909001541234321').getAttribute('game_id'), document.getElementById('a-0.611909001541234321').getAttribute('season_id'), document.getElementById('a-0.611909001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=195953&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195953" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.611972001541234321" onlyurl="1">Janče Ljubljana A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.611972001541234321") === "object") {
                               document.getElementById("a-0.611972001541234321").href = navigateTeam(document.getElementById('a-0.611972001541234321').getAttribute('team_id'), document.getElementById('a-0.611972001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4244439&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4244439" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.612075001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.612075001541234321") === "object") {
                               document.getElementById("a-0.612075001541234321").href = navigateGame(document.getElementById('a-0.612075001541234321').getAttribute('game_id'), document.getElementById('a-0.612075001541234321').getAttribute('season_id'), document.getElementById('a-0.612075001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196303&amp;league_id=undefined&amp;season_id=102585" team_id="196303" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.612134001541234321" onlyurl="1">Radovljica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.612134001541234321") === "object") {
                               document.getElementById("a-0.612134001541234321").href = navigateTeam(document.getElementById('a-0.612134001541234321').getAttribute('team_id'), document.getElementById('a-0.612134001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=8463" arena_id="8463" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.612184001541234321" onlyurl="1">OŠ Kašelj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.612184001541234321") === "object") {
                               document.getElementById("a-0.612184001541234321").href = navigateArena(document.getElementById('a-0.612184001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240639&amp;league_id=undefined&amp;season_id=102585" game_id="4240639" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.612283001541234321" onlyurl="1">10.11.2018 09:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.612283001541234321") === "object") {
                               document.getElementById("a-0.612283001541234321").href = navigateGame(document.getElementById('a-0.612283001541234321').getAttribute('game_id'), document.getElementById('a-0.612283001541234321').getAttribute('season_id'), document.getElementById('a-0.612283001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=31613&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="31613" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.612602001541234321" onlyurl="1">Radenska Creativ Sobota</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.612602001541234321") === "object") {
                               document.getElementById("a-0.612602001541234321").href = navigateTeam(document.getElementById('a-0.612602001541234321').getAttribute('team_id'), document.getElementById('a-0.612602001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240639&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240639" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.612704001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.612704001541234321") === "object") {
                               document.getElementById("a-0.612704001541234321").href = navigateGame(document.getElementById('a-0.612704001541234321').getAttribute('game_id'), document.getElementById('a-0.612704001541234321').getAttribute('season_id'), document.getElementById('a-0.612704001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196063&amp;league_id=undefined&amp;season_id=102585" team_id="196063" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.612759001541234321" onlyurl="1">Drava U17</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.612759001541234321") === "object") {
                               document.getElementById("a-0.612759001541234321").href = navigateTeam(document.getElementById('a-0.612759001541234321').getAttribute('team_id'), document.getElementById('a-0.612759001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7273" arena_id="7273" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.612809001541234321" onlyurl="1">OŠ I M. Sobota</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.612809001541234321") === "object") {
                               document.getElementById("a-0.612809001541234321").href = navigateArena(document.getElementById('a-0.612809001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240617&amp;league_id=undefined&amp;season_id=102585" game_id="4240617" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.612910001541234321" onlyurl="1">10.11.2018 09:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.612910001541234321") === "object") {
                               document.getElementById("a-0.612910001541234321").href = navigateGame(document.getElementById('a-0.612910001541234321').getAttribute('game_id'), document.getElementById('a-0.612910001541234321').getAttribute('season_id'), document.getElementById('a-0.612910001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=165713&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.612973001541234321" onlyurl="1">Rogaška</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.612973001541234321") === "object") {
                               document.getElementById("a-0.612973001541234321").href = navigateTeam(document.getElementById('a-0.612973001541234321').getAttribute('team_id'), document.getElementById('a-0.612973001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240617&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240617" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613055001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613055001541234321") === "object") {
                               document.getElementById("a-0.613055001541234321").href = navigateGame(document.getElementById('a-0.613055001541234321').getAttribute('game_id'), document.getElementById('a-0.613055001541234321').getAttribute('season_id'), document.getElementById('a-0.613055001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=195983&amp;league_id=undefined&amp;season_id=102585" team_id="195983" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613109001541234321" onlyurl="1">Petrol Olimpija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613109001541234321") === "object") {
                               document.getElementById("a-0.613109001541234321").href = navigateTeam(document.getElementById('a-0.613109001541234321').getAttribute('team_id'), document.getElementById('a-0.613109001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=8783" arena_id="8783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613158001541234321" onlyurl="1">ŠD Rogaška Slatina</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613158001541234321") === "object") {
                               document.getElementById("a-0.613158001541234321").href = navigateArena(document.getElementById('a-0.613158001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240665&amp;league_id=undefined&amp;season_id=102585" game_id="4240665" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613254001541234321" onlyurl="1">10.11.2018 09:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613254001541234321") === "object") {
                               document.getElementById("a-0.613254001541234321").href = navigateGame(document.getElementById('a-0.613254001541234321').getAttribute('game_id'), document.getElementById('a-0.613254001541234321').getAttribute('season_id'), document.getElementById('a-0.613254001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196173&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196173" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613315001541234321" onlyurl="1">Input Nazarje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613315001541234321") === "object") {
                               document.getElementById("a-0.613315001541234321").href = navigateTeam(document.getElementById('a-0.613315001541234321').getAttribute('team_id'), document.getElementById('a-0.613315001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240665&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240665" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613397001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613397001541234321") === "object") {
                               document.getElementById("a-0.613397001541234321").href = navigateGame(document.getElementById('a-0.613397001541234321').getAttribute('game_id'), document.getElementById('a-0.613397001541234321').getAttribute('season_id'), document.getElementById('a-0.613397001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196353&amp;league_id=undefined&amp;season_id=102585" team_id="196353" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613452001541234321" onlyurl="1">Ilirija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613452001541234321") === "object") {
                               document.getElementById("a-0.613452001541234321").href = navigateTeam(document.getElementById('a-0.613452001541234321').getAttribute('team_id'), document.getElementById('a-0.613452001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=8513" arena_id="8513" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613500001541234321" onlyurl="1">ŠD Nazarje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613500001541234321") === "object") {
                               document.getElementById("a-0.613500001541234321").href = navigateArena(document.getElementById('a-0.613500001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240759&amp;league_id=undefined&amp;season_id=102585" game_id="4240759" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613595001541234321" onlyurl="1">10.11.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613595001541234321") === "object") {
                               document.getElementById("a-0.613595001541234321").href = navigateGame(document.getElementById('a-0.613595001541234321').getAttribute('game_id'), document.getElementById('a-0.613595001541234321').getAttribute('season_id'), document.getElementById('a-0.613595001541234321').getAttribute('league_id'));
                            }
                        </script>
																			<!-- To do -->
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=165673&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165673" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613658001541234321" onlyurl="1">Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613658001541234321") === "object") {
                               document.getElementById("a-0.613658001541234321").href = navigateTeam(document.getElementById('a-0.613658001541234321').getAttribute('team_id'), document.getElementById('a-0.613658001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240759&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240759" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613740001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613740001541234321") === "object") {
                               document.getElementById("a-0.613740001541234321").href = navigateGame(document.getElementById('a-0.613740001541234321').getAttribute('game_id'), document.getElementById('a-0.613740001541234321').getAttribute('season_id'), document.getElementById('a-0.613740001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=269283&amp;league_id=undefined&amp;season_id=102585" team_id="269283" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613794001541234321" onlyurl="1">Ajdovščina</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613794001541234321") === "object") {
                               document.getElementById("a-0.613794001541234321").href = navigateTeam(document.getElementById('a-0.613794001541234321').getAttribute('team_id'), document.getElementById('a-0.613794001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7233" arena_id="7233" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613843001541234321" onlyurl="1">ŠC Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613843001541234321") === "object") {
                               document.getElementById("a-0.613843001541234321").href = navigateArena(document.getElementById('a-0.613843001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4244437&amp;league_id=undefined&amp;season_id=102585" game_id="4244437" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613937001541234321" onlyurl="1">10.11.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613937001541234321") === "object") {
                               document.getElementById("a-0.613937001541234321").href = navigateGame(document.getElementById('a-0.613937001541234321').getAttribute('game_id'), document.getElementById('a-0.613937001541234321').getAttribute('season_id'), document.getElementById('a-0.613937001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196373&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196373" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.613998001541234321" onlyurl="1">Komenda</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.613998001541234321") === "object") {
                               document.getElementById("a-0.613998001541234321").href = navigateTeam(document.getElementById('a-0.613998001541234321').getAttribute('team_id'), document.getElementById('a-0.613998001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4244437&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4244437" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614080001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614080001541234321") === "object") {
                               document.getElementById("a-0.614080001541234321").href = navigateGame(document.getElementById('a-0.614080001541234321').getAttribute('game_id'), document.getElementById('a-0.614080001541234321').getAttribute('season_id'), document.getElementById('a-0.614080001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196343&amp;league_id=undefined&amp;season_id=102585" team_id="196343" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614134001541234321" onlyurl="1">Chilli Jesenice</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614134001541234321") === "object") {
                               document.getElementById("a-0.614134001541234321").href = navigateTeam(document.getElementById('a-0.614134001541234321').getAttribute('team_id'), document.getElementById('a-0.614134001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=8523" arena_id="8523" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614183001541234321" onlyurl="1">ŠD Komenda</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614183001541234321") === "object") {
                               document.getElementById("a-0.614183001541234321").href = navigateArena(document.getElementById('a-0.614183001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4244461&amp;league_id=undefined&amp;season_id=102585" game_id="4244461" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614276001541234321" onlyurl="1">10.11.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614276001541234321") === "object") {
                               document.getElementById("a-0.614276001541234321").href = navigateGame(document.getElementById('a-0.614276001541234321').getAttribute('game_id'), document.getElementById('a-0.614276001541234321').getAttribute('season_id'), document.getElementById('a-0.614276001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196503&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196503" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614336001541234321" onlyurl="1">Mesarija Prunk</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614336001541234321") === "object") {
                               document.getElementById("a-0.614336001541234321").href = navigateTeam(document.getElementById('a-0.614336001541234321').getAttribute('team_id'), document.getElementById('a-0.614336001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4244461&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4244461" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614418001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614418001541234321") === "object") {
                               document.getElementById("a-0.614418001541234321").href = navigateGame(document.getElementById('a-0.614418001541234321').getAttribute('game_id'), document.getElementById('a-0.614418001541234321').getAttribute('season_id'), document.getElementById('a-0.614418001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4612375&amp;league_id=undefined&amp;season_id=102585" team_id="4612375" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614472001541234321" onlyurl="1">KOŠ Primorska B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614472001541234321") === "object") {
                               document.getElementById("a-0.614472001541234321").href = navigateTeam(document.getElementById('a-0.614472001541234321').getAttribute('team_id'), document.getElementById('a-0.614472001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7083" arena_id="7083" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614521001541234321" onlyurl="1">SŠ Srečka Kosovela</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614521001541234321") === "object") {
                               document.getElementById("a-0.614521001541234321").href = navigateArena(document.getElementById('a-0.614521001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240569&amp;league_id=undefined&amp;season_id=102585" game_id="4240569" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614615001541234321" onlyurl="1">10.11.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614615001541234321") === "object") {
                               document.getElementById("a-0.614615001541234321").href = navigateGame(document.getElementById('a-0.614615001541234321').getAttribute('game_id'), document.getElementById('a-0.614615001541234321').getAttribute('season_id'), document.getElementById('a-0.614615001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=165563&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165563" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614674001541234321" onlyurl="1">Dravograd Koroška</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614674001541234321") === "object") {
                               document.getElementById("a-0.614674001541234321").href = navigateTeam(document.getElementById('a-0.614674001541234321').getAttribute('team_id'), document.getElementById('a-0.614674001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240569&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240569" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614757001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614757001541234321") === "object") {
                               document.getElementById("a-0.614757001541234321").href = navigateGame(document.getElementById('a-0.614757001541234321').getAttribute('game_id'), document.getElementById('a-0.614757001541234321').getAttribute('season_id'), document.getElementById('a-0.614757001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196183&amp;league_id=undefined&amp;season_id=102585" team_id="196183" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614810001541234321" onlyurl="1">Keleja</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614810001541234321") === "object") {
                               document.getElementById("a-0.614810001541234321").href = navigateTeam(document.getElementById('a-0.614810001541234321').getAttribute('team_id'), document.getElementById('a-0.614810001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=107073" arena_id="107073" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614859001541234321" onlyurl="1">ŠD ŠpicD</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614859001541234321") === "object") {
                               document.getElementById("a-0.614859001541234321").href = navigateArena(document.getElementById('a-0.614859001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240593&amp;league_id=undefined&amp;season_id=102585" game_id="4240593" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.614952001541234321" onlyurl="1">10.11.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.614952001541234321") === "object") {
                               document.getElementById("a-0.614952001541234321").href = navigateGame(document.getElementById('a-0.614952001541234321').getAttribute('game_id'), document.getElementById('a-0.614952001541234321').getAttribute('season_id'), document.getElementById('a-0.614952001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196223&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196223" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615013001541234321" onlyurl="1">Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615013001541234321") === "object") {
                               document.getElementById("a-0.615013001541234321").href = navigateTeam(document.getElementById('a-0.615013001541234321').getAttribute('team_id'), document.getElementById('a-0.615013001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240593&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240593" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615134001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615134001541234321") === "object") {
                               document.getElementById("a-0.615134001541234321").href = navigateGame(document.getElementById('a-0.615134001541234321').getAttribute('game_id'), document.getElementById('a-0.615134001541234321').getAttribute('season_id'), document.getElementById('a-0.615134001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196463&amp;league_id=undefined&amp;season_id=102585" team_id="196463" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615192001541234321" onlyurl="1">Globus</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615192001541234321") === "object") {
                               document.getElementById("a-0.615192001541234321").href = navigateTeam(document.getElementById('a-0.615192001541234321').getAttribute('team_id'), document.getElementById('a-0.615192001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=123339" arena_id="123339" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615242001541234321" onlyurl="1">1. OŠ Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615242001541234321") === "object") {
                               document.getElementById("a-0.615242001541234321").href = navigateArena(document.getElementById('a-0.615242001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240641&amp;league_id=undefined&amp;season_id=102585" game_id="4240641" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615338001541234321" onlyurl="1">10.11.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615338001541234321") === "object") {
                               document.getElementById("a-0.615338001541234321").href = navigateGame(document.getElementById('a-0.615338001541234321').getAttribute('game_id'), document.getElementById('a-0.615338001541234321').getAttribute('season_id'), document.getElementById('a-0.615338001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196093&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196093" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615400001541234321" onlyurl="1">Šentjur Tajfun</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615400001541234321") === "object") {
                               document.getElementById("a-0.615400001541234321").href = navigateTeam(document.getElementById('a-0.615400001541234321').getAttribute('team_id'), document.getElementById('a-0.615400001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240641&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240641" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615482001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615482001541234321") === "object") {
                               document.getElementById("a-0.615482001541234321").href = navigateGame(document.getElementById('a-0.615482001541234321').getAttribute('game_id'), document.getElementById('a-0.615482001541234321').getAttribute('season_id'), document.getElementById('a-0.615482001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196073&amp;league_id=undefined&amp;season_id=102585" team_id="196073" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615536001541234321" onlyurl="1">Lovrenc</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615536001541234321") === "object") {
                               document.getElementById("a-0.615536001541234321").href = navigateTeam(document.getElementById('a-0.615536001541234321').getAttribute('team_id'), document.getElementById('a-0.615536001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7063" arena_id="7063" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615584001541234321" onlyurl="1">OŠ Hruševec Šentjur</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615584001541234321") === "object") {
                               document.getElementById("a-0.615584001541234321").href = navigateArena(document.getElementById('a-0.615584001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240737&amp;league_id=undefined&amp;season_id=102585" game_id="4240737" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615678001541234321" onlyurl="1">10.11.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615678001541234321") === "object") {
                               document.getElementById("a-0.615678001541234321").href = navigateGame(document.getElementById('a-0.615678001541234321').getAttribute('game_id'), document.getElementById('a-0.615678001541234321').getAttribute('season_id'), document.getElementById('a-0.615678001541234321').getAttribute('league_id'));
                            }
                        </script>
																			<!-- To do -->
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196263&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196263" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615740001541234321" onlyurl="1">ŠD Šentvid - Ljubljana</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615740001541234321") === "object") {
                               document.getElementById("a-0.615740001541234321").href = navigateTeam(document.getElementById('a-0.615740001541234321').getAttribute('team_id'), document.getElementById('a-0.615740001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240737&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240737" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615821001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615821001541234321") === "object") {
                               document.getElementById("a-0.615821001541234321").href = navigateGame(document.getElementById('a-0.615821001541234321').getAttribute('game_id'), document.getElementById('a-0.615821001541234321').getAttribute('season_id'), document.getElementById('a-0.615821001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196283&amp;league_id=undefined&amp;season_id=102585" team_id="196283" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615874001541234321" onlyurl="1">Kolpa</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615874001541234321") === "object") {
                               document.getElementById("a-0.615874001541234321").href = navigateTeam(document.getElementById('a-0.615874001541234321').getAttribute('team_id'), document.getElementById('a-0.615874001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=110183" arena_id="110183" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.615923001541234321" onlyurl="1">Montažna dvorana Šentvid</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.615923001541234321") === "object") {
                               document.getElementById("a-0.615923001541234321").href = navigateArena(document.getElementById('a-0.615923001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240857&amp;league_id=undefined&amp;season_id=102585" game_id="4240857" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616016001541234321" onlyurl="1">10.11.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616016001541234321") === "object") {
                               document.getElementById("a-0.616016001541234321").href = navigateGame(document.getElementById('a-0.616016001541234321').getAttribute('game_id'), document.getElementById('a-0.616016001541234321').getAttribute('season_id'), document.getElementById('a-0.616016001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4672567&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4672567" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616076001541234321" onlyurl="1">Ajdovščina B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616076001541234321") === "object") {
                               document.getElementById("a-0.616076001541234321").href = navigateTeam(document.getElementById('a-0.616076001541234321').getAttribute('team_id'), document.getElementById('a-0.616076001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240857&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240857" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616158001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616158001541234321") === "object") {
                               document.getElementById("a-0.616158001541234321").href = navigateGame(document.getElementById('a-0.616158001541234321').getAttribute('game_id'), document.getElementById('a-0.616158001541234321').getAttribute('season_id'), document.getElementById('a-0.616158001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4596641&amp;league_id=undefined&amp;season_id=102585" team_id="4596641" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616211001541234321" onlyurl="1">Helios Suns C</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616211001541234321") === "object") {
                               document.getElementById("a-0.616211001541234321").href = navigateTeam(document.getElementById('a-0.616211001541234321').getAttribute('team_id'), document.getElementById('a-0.616211001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=8583" arena_id="8583" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616260001541234321" onlyurl="1">OŠ Šturje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616260001541234321") === "object") {
                               document.getElementById("a-0.616260001541234321").href = navigateArena(document.getElementById('a-0.616260001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4244487&amp;league_id=undefined&amp;season_id=102585" game_id="4244487" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616355001541234321" onlyurl="1">10.11.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616355001541234321") === "object") {
                               document.getElementById("a-0.616355001541234321").href = navigateGame(document.getElementById('a-0.616355001541234321').getAttribute('game_id'), document.getElementById('a-0.616355001541234321').getAttribute('season_id'), document.getElementById('a-0.616355001541234321').getAttribute('league_id'));
                            }
                        </script>
																			<!-- To do -->
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=4612373&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4612373" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616416001541234321" onlyurl="1">ECE Triglav B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616416001541234321") === "object") {
                               document.getElementById("a-0.616416001541234321").href = navigateTeam(document.getElementById('a-0.616416001541234321').getAttribute('team_id'), document.getElementById('a-0.616416001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4244487&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4244487" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616498001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616498001541234321") === "object") {
                               document.getElementById("a-0.616498001541234321").href = navigateGame(document.getElementById('a-0.616498001541234321').getAttribute('game_id'), document.getElementById('a-0.616498001541234321').getAttribute('season_id'), document.getElementById('a-0.616498001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=269243&amp;league_id=undefined&amp;season_id=102585" team_id="269243" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616551001541234321" onlyurl="1">Grosuplje B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616551001541234321") === "object") {
                               document.getElementById("a-0.616551001541234321").href = navigateTeam(document.getElementById('a-0.616551001541234321').getAttribute('team_id'), document.getElementById('a-0.616551001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7543" arena_id="7543" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616599001541234321" onlyurl="1">ŠD Planina</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616599001541234321") === "object") {
                               document.getElementById("a-0.616599001541234321").href = navigateArena(document.getElementById('a-0.616599001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							2
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240813&amp;league_id=undefined&amp;season_id=102585" game_id="4240813" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616692001541234321" onlyurl="1">10.11.2018 10:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616692001541234321") === "object") {
                               document.getElementById("a-0.616692001541234321").href = navigateGame(document.getElementById('a-0.616692001541234321').getAttribute('game_id'), document.getElementById('a-0.616692001541234321').getAttribute('season_id'), document.getElementById('a-0.616692001541234321').getAttribute('league_id'));
                            }
                        </script>
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=269273&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269273" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616752001541234321" onlyurl="1">Pivka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616752001541234321") === "object") {
                               document.getElementById("a-0.616752001541234321").href = navigateTeam(document.getElementById('a-0.616752001541234321').getAttribute('team_id'), document.getElementById('a-0.616752001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240813&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240813" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616834001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616834001541234321") === "object") {
                               document.getElementById("a-0.616834001541234321").href = navigateGame(document.getElementById('a-0.616834001541234321').getAttribute('game_id'), document.getElementById('a-0.616834001541234321').getAttribute('season_id'), document.getElementById('a-0.616834001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=269263&amp;league_id=undefined&amp;season_id=102585" team_id="269263" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616886001541234321" onlyurl="1">Logatec</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616886001541234321") === "object") {
                               document.getElementById("a-0.616886001541234321").href = navigateTeam(document.getElementById('a-0.616886001541234321').getAttribute('team_id'), document.getElementById('a-0.616886001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7733" arena_id="7733" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.616935001541234321" onlyurl="1">ŠD Skala</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.616935001541234321") === "object") {
                               document.getElementById("a-0.616935001541234321").href = navigateArena(document.getElementById('a-0.616935001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240761&amp;league_id=undefined&amp;season_id=102585" game_id="4240761" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617028001541234321" onlyurl="1">10.11.2018 11:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617028001541234321") === "object") {
                               document.getElementById("a-0.617028001541234321").href = navigateGame(document.getElementById('a-0.617028001541234321').getAttribute('game_id'), document.getElementById('a-0.617028001541234321').getAttribute('season_id'), document.getElementById('a-0.617028001541234321').getAttribute('league_id'));
                            }
                        </script>
																			<!-- To do -->
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196423&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196423" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617089001541234321" onlyurl="1">Vrhnika</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617089001541234321") === "object") {
                               document.getElementById("a-0.617089001541234321").href = navigateTeam(document.getElementById('a-0.617089001541234321').getAttribute('team_id'), document.getElementById('a-0.617089001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240761&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240761" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617169001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617169001541234321") === "object") {
                               document.getElementById("a-0.617169001541234321").href = navigateGame(document.getElementById('a-0.617169001541234321').getAttribute('game_id'), document.getElementById('a-0.617169001541234321').getAttribute('season_id'), document.getElementById('a-0.617169001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=196433&amp;league_id=undefined&amp;season_id=102585" team_id="196433" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617221001541234321" onlyurl="1">Cerknica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617221001541234321") === "object") {
                               document.getElementById("a-0.617221001541234321").href = navigateTeam(document.getElementById('a-0.617221001541234321').getAttribute('team_id'), document.getElementById('a-0.617221001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=8843" arena_id="8843" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617270001541234321" onlyurl="1">OŠ Ivana Cankarja</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617270001541234321") === "object") {
                               document.getElementById("a-0.617270001541234321").href = navigateArena(document.getElementById('a-0.617270001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240543&amp;league_id=undefined&amp;season_id=102585" game_id="4240543" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617363001541234321" onlyurl="1">10.11.2018 12:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617363001541234321") === "object") {
                               document.getElementById("a-0.617363001541234321").href = navigateGame(document.getElementById('a-0.617363001541234321').getAttribute('game_id'), document.getElementById('a-0.617363001541234321').getAttribute('season_id'), document.getElementById('a-0.617363001541234321').getAttribute('league_id'));
                            }
                        </script>
																			<!-- To do -->
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196213&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196213" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617424001541234321" onlyurl="1">Zlatorog B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617424001541234321") === "object") {
                               document.getElementById("a-0.617424001541234321").href = navigateTeam(document.getElementById('a-0.617424001541234321').getAttribute('team_id'), document.getElementById('a-0.617424001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240543&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240543" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617505001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617505001541234321") === "object") {
                               document.getElementById("a-0.617505001541234321").href = navigateGame(document.getElementById('a-0.617505001541234321').getAttribute('game_id'), document.getElementById('a-0.617505001541234321').getAttribute('season_id'), document.getElementById('a-0.617505001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=307703&amp;league_id=undefined&amp;season_id=102585" team_id="307703" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617559001541234321" onlyurl="1">Ajdas Lenart</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617559001541234321") === "object") {
                               document.getElementById("a-0.617559001541234321").href = navigateTeam(document.getElementById('a-0.617559001541234321').getAttribute('team_id'), document.getElementById('a-0.617559001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=7123" arena_id="7123" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617607001541234321" onlyurl="1">Tri lilije, Laško</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617607001541234321") === "object") {
                               document.getElementById("a-0.617607001541234321").href = navigateArena(document.getElementById('a-0.617607001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240663&amp;league_id=undefined&amp;season_id=102585" game_id="4240663" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617701001541234321" onlyurl="1">10.11.2018 12:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617701001541234321") === "object") {
                               document.getElementById("a-0.617701001541234321").href = navigateGame(document.getElementById('a-0.617701001541234321').getAttribute('game_id'), document.getElementById('a-0.617701001541234321').getAttribute('season_id'), document.getElementById('a-0.617701001541234321').getAttribute('league_id'));
                            }
                        </script>
																			<!-- To do -->
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=196253&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196253" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617762001541234321" onlyurl="1">Parklji B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617762001541234321") === "object") {
                               document.getElementById("a-0.617762001541234321").href = navigateTeam(document.getElementById('a-0.617762001541234321').getAttribute('team_id'), document.getElementById('a-0.617762001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240663&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240663" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617845001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617845001541234321") === "object") {
                               document.getElementById("a-0.617845001541234321").href = navigateGame(document.getElementById('a-0.617845001541234321').getAttribute('game_id'), document.getElementById('a-0.617845001541234321').getAttribute('season_id'), document.getElementById('a-0.617845001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4646255&amp;league_id=undefined&amp;season_id=102585" team_id="4646255" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617899001541234321" onlyurl="1">Troti</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617899001541234321") === "object") {
                               document.getElementById("a-0.617899001541234321").href = navigateTeam(document.getElementById('a-0.617899001541234321').getAttribute('team_id'), document.getElementById('a-0.617899001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=106323" arena_id="106323" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.617948001541234321" onlyurl="1">OŠ Mirana Jarca, Ljubljana</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.617948001541234321") === "object") {
                               document.getElementById("a-0.617948001541234321").href = navigateArena(document.getElementById('a-0.617948001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
							<tr>
											<td data-th="Igralni dan">
							1
						</td>
										<td data-th="Datum in čas">
																														<a href="http://www.kzs.si/incl?id=114&amp;game_id=4240855&amp;league_id=undefined&amp;season_id=102585" game_id="4240855" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.618068001541234321" onlyurl="1">10.11.2018 13:00</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.618068001541234321") === "object") {
                               document.getElementById("a-0.618068001541234321").href = navigateGame(document.getElementById('a-0.618068001541234321').getAttribute('game_id'), document.getElementById('a-0.618068001541234321').getAttribute('season_id'), document.getElementById('a-0.618068001541234321').getAttribute('league_id'));
                            }
                        </script>
																			<!-- To do -->
																		
																														</td>
																						            <td class="mbt-v2-schedule-team-a" data-th="Domači">
																			<a href="http://www.kzs.si/incl?id=967&amp;team_id=269233&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269233" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.618133001541234321" onlyurl="1">Ljubljana B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.618133001541234321") === "object") {
                               document.getElementById("a-0.618133001541234321").href = navigateTeam(document.getElementById('a-0.618133001541234321').getAttribute('team_id'), document.getElementById('a-0.618133001541234321').getAttribute('season_id'));
                            }
                        </script>
															            		            </td>
		            <td data-th="Rezultat">
		            				            				           
				            							    								    	                                    <a href="http://www.kzs.si/incl?id=114&amp;game_id=4240855&amp;league_id=undefined&amp;season_id=102585" class="mbt-v2-game-link" season_id="102585" game_id="4240855" title="Predogled" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.618217001541234321" onlyurl="1">&nbsp;</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.618217001541234321") === "object") {
                               document.getElementById("a-0.618217001541234321").href = navigateGame(document.getElementById('a-0.618217001541234321').getAttribute('game_id'), document.getElementById('a-0.618217001541234321').getAttribute('season_id'), document.getElementById('a-0.618217001541234321').getAttribute('league_id'));
                            }
                        </script>
	        	                        
							            
				            			            	
		            			            </td>
		            <td class="mbt-v2-schedule-team-b" data-th="Gosti">
					    
					    													<a href="http://www.kzs.si/incl?id=967&amp;team_id=4596651&amp;league_id=undefined&amp;season_id=102585" team_id="4596651" season_id="102585" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.618271001541234321" onlyurl="1">Nova Gorica mladi B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.618271001541234321") === "object") {
                               document.getElementById("a-0.618271001541234321").href = navigateTeam(document.getElementById('a-0.618271001541234321').getAttribute('team_id'), document.getElementById('a-0.618271001541234321').getAttribute('season_id'));
                            }
                        </script>
														            </td>
		            						<td data-th="Dvorana">
															<a href="http://www.kzs.si/incl?id=119&amp;arena_id=13653" arena_id="13653" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.618320001541234321" onlyurl="1">OŠ Hinko Smrekar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.618320001541234321") === "object") {
                               document.getElementById("a-0.618320001541234321").href = navigateArena(document.getElementById('a-0.618320001541234321').getAttribute('arena_id'));
                            }
                        </script>
													</td>
																
				</tr>
					</tbody>	
	</table>
			<div class="mbt-v2-divider"></div>
		<div class="mbt-v2-grid">
							<div class="mbt-v2-col mbt-v2-col-12">
					<ul class="mbt-v2-pagination">
																											<li class="mbt-v2-pagination-active">
																						<span>
									1
								</span>
														</li>
																					<li>	
																						<a href="#" onclick="return false;" id="33-303-page-2">
									2
								</a>
														</li>
																			<li class="mbt-v2-pagination-next">
								<a href="#" onclick="return false;" id="33-303-page-next">
									❯ 
								</a>
							</li>
											</ul>
				</div>
				
							<div class="mbt-v2-col mbt-v2-col-12 mbt-v2-grid-end">
					<a href="#" id="33-303-export" onclick="return false;" class="mbt-v2-export-link">
						Izvozi
					</a>
				</div>
				
		</div>
	
<script type="text/javascript">
//<![CDATA[

    
	var namespace = MBT.API.SafeNames.Container('33-303');

	var gamesCount = 30;

	if (gamesCount == 0 && namespace.activeTab == 0) {
		namespace.tabController[0].setActiveTab(1);
	}

	namespace.onPageClick = function(e, page) {
		
		namespace.filters.page = page;

		var params = {};

	    if(namespace.filters.stage) {
			params.stage_id = namespace.filters.stage;
		}

		if(namespace.filters.season) {
			params.season_id = namespace.filters.season;
		}

		if(namespace.filters.page) {
			params.page = namespace.filters.page;
		}

		params.filter = namespace.filters;
		
		MBT.API.History.setParam('33-303', MBT.API.History.pageIndex, 0, page);

		new MBT.API.Widgets.Widget({
			widgetId: 303,
			container: '33-303-container',
			state: 'MjExMzczNDI3OWE6MjA6e3M6MTc6InRlYW1fbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MjA6InNob3dfc2Vhc29uX3NlbGVjdG9yIjtzOjE6IjEiO3M6MTc6ImdhbWVfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTk6InBsYXllcl9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE3OiJ0ZWFtX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVUZWFtIjtzOjE3OiJnYW1lX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVHYW1lIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czoxODoiYXJlbmFfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTU6ImFyZW5hX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE4OiJhcmVuYV9saW5rX2hhbmRsZXIiO3M6MTM6Im5hdmlnYXRlQXJlbmEiO3M6OToibGVhZ3VlX2lkIjtzOjU6IjEwMzUzIjtzOjk6ImdhbWVfZGF5cyI7czoxOiIxIjtzOjE3OiJzaG93X3JlZmVyZWVfY2l0eSI7czoxOiIxIjtzOjEzOiJpdGVtc19vbl9wYWdlIjtzOjI6IjMwIjtzOjIwOiJzdGFnZV9sZXZlbHNfdmlzaWJsZSI7czoxOiIyIjtzOjg6InRlbXBsYXRlIjtzOjI6InYyIjtzOjY6ImZpbHRlciI7YTozOntzOjY6InNlYXNvbiI7czo2OiIxMDI1ODUiO3M6NDoidHlwZSI7czoxMzoic2NoZWR1bGVfb25seSI7czozOiJ0YWIiO3M6MjA6InNjaGVkdWxlX2FuZF9yZXN1bHRzIjt9fQ==',
			params: params
		}).renderPartial(namespace.filters.tab);
	}

	
																	MBT.API.Event.observe('33-303-page-2', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [2, false], 2)); 
										MBT.API.Event.observe('33-303-page-next', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [2, false], 2)); 
			


	namespace.exportSchedule = function() {

		var url = MBT.API.ServiceUrl + "widget-service/export/view/schedule_and_results?api=" + MBT.API.ApiId;

		if (MBT.API.Lang) {
			url += "&lang=" + MBT.API.Lang;
		}

		for(filter in namespace.filters) {
			if(filter == 'season') {
				namespace.filters.season_id = namespace.filters[filter];
				filter = 'season_id';
			}
			url += '&' +filter + '=' + namespace.filters[filter];
		}

		window.location = url;
	}

	MBT.API.Event.observe("33-303-export", "click", MBT.API.Function.createDelegate(namespace.exportSchedule));

		

//]]>
</script>	</div>
	</div>
</div>

<script type="text/javascript">
//<![CDATA[

	
	var namespace = MBT.API.SafeNames.Container('33-303');

	namespace.mobileMenu = new MBT.API.createResponsiveNavigation({
		menuContainer : "33-303-mbt-v2-navigation",
		mobileMenuContainer : "33-303-mobile-menu",
		mobileMenuCloseText: "Izberi",
	});

	namespace.mobileFilters = new MBT.API.createResponsiveNavigation({
		menuContainer : "33-303-filters-block",
		mobileMenuContainer : "33-303-mobile-filters-block",
		filtersMode: true
	});

	namespace.filters = {};

	namespace.filters['season'] = 102585;

	namespace.availableFilters = {};

	var filters = MBT.API.get('33-303-filters-block').childNodes;

	
			

	if(filters) {
		for(var i = 0; i <  filters.length; i++) {
	        if(filters[i].nodeType == 1 && filters[i].getAttribute('data-filter')) {
	        	namespace.availableFilters[filters[i].getAttribute('data-filter')] = filters[i].getAttribute('data-load');

	        }
		}
	}

	namespace.onFilterChange = function(e, filter, needReloadFilters) {

		namespace.filters[filter] = e.target.value;

		var params = {};

		delete namespace.filters.page;
		namespace.reloadFilters(filter, true);

		if(needReloadFilters) {
			MBT.API.History.setParam('33-303', MBT.API.History.pageIndex, 0, null);
		}
	    
	    if(namespace.filters.stage) {
			params.stage_id = namespace.filters.stage;
		}

		if(namespace.filters.season) {
			params.season_id = namespace.filters.season;
		}

		if(namespace.filters.page) {
			params.page = namespace.filters.page;
		}

		params.filter = namespace.filters;

		MBT.API.History.setParam('33-303', MBT.API.History.filterIndex, filter, e.target.value);

		new MBT.API.Widgets.Widget({
			widgetId: 303,
			container: '33-303-container',
			state: 'MjYyMDA2MjU1M2E6MTk6e3M6MTc6InRlYW1fbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MjA6InNob3dfc2Vhc29uX3NlbGVjdG9yIjtzOjE6IjEiO3M6MTc6ImdhbWVfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTk6InBsYXllcl9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE3OiJ0ZWFtX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVUZWFtIjtzOjE3OiJnYW1lX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVHYW1lIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czoxODoiYXJlbmFfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTU6ImFyZW5hX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE4OiJhcmVuYV9saW5rX2hhbmRsZXIiO3M6MTM6Im5hdmlnYXRlQXJlbmEiO3M6OToibGVhZ3VlX2lkIjtzOjU6IjEwMzUzIjtzOjk6ImdhbWVfZGF5cyI7czoxOiIxIjtzOjE3OiJzaG93X3JlZmVyZWVfY2l0eSI7czoxOiIxIjtzOjEzOiJpdGVtc19vbl9wYWdlIjtzOjI6IjMwIjtzOjIwOiJzdGFnZV9sZXZlbHNfdmlzaWJsZSI7czoxOiIyIjtzOjg6InRlbXBsYXRlIjtzOjI6InYyIjt9',
			params: params
		}).renderPartial(namespace.filters.tab);
	}

	namespace.reloadFilters = function(filter, removeHash) {

		for(key in namespace.availableFilters) {
			if(key != filter ) {
				if(key  != 'season') {
					if(removeHash) {
						MBT.API.History.setParam('33-303', MBT.API.History.filterIndex, key, null);
					}
					delete namespace.filters[key];
				}
				var params = {};

			    if(namespace.filters.stage) {
					params.stage_id = namespace.filters.stage;
				}

				if(namespace.filters.season) {
					params.season_id = namespace.filters.season;
				}
				new MBT.API.Widgets.Widget({
					widgetId: 303,
					container: '33-303-container',
					state: 'MjYyMDA2MjU1M2E6MTk6e3M6MTc6InRlYW1fbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MjA6InNob3dfc2Vhc29uX3NlbGVjdG9yIjtzOjE6IjEiO3M6MTc6ImdhbWVfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTk6InBsYXllcl9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE3OiJ0ZWFtX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVUZWFtIjtzOjE3OiJnYW1lX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVHYW1lIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czoxODoiYXJlbmFfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTU6ImFyZW5hX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE4OiJhcmVuYV9saW5rX2hhbmRsZXIiO3M6MTM6Im5hdmlnYXRlQXJlbmEiO3M6OToibGVhZ3VlX2lkIjtzOjU6IjEwMzUzIjtzOjk6ImdhbWVfZGF5cyI7czoxOiIxIjtzOjE3OiJzaG93X3JlZmVyZWVfY2l0eSI7czoxOiIxIjtzOjEzOiJpdGVtc19vbl9wYWdlIjtzOjI6IjMwIjtzOjIwOiJzdGFnZV9sZXZlbHNfdmlzaWJsZSI7czoxOiIyIjtzOjg6InRlbXBsYXRlIjtzOjI6InYyIjt9',
					params: params
				}).renderPartial(namespace.availableFilters[key]);
			}
		}
	}

	namespace.onTabClick = function(tabPanel, index, part, type) {

		namespace.activeTab = index;

		namespace.filters.type = type;
		namespace.filters.tab = part;

		var params = {};

		if(namespace.filters.page) {
			params.page = namespace.filters.page;
		}

		params.filter  =  namespace.filters;

		new MBT.API.Widgets.Widget({
			widgetId: 303,
			container: '33-303-container',
			state: 'MjYyMDA2MjU1M2E6MTk6e3M6MTc6InRlYW1fbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MjA6InNob3dfc2Vhc29uX3NlbGVjdG9yIjtzOjE6IjEiO3M6MTc6ImdhbWVfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTk6InBsYXllcl9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE3OiJ0ZWFtX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVUZWFtIjtzOjE3OiJnYW1lX2xpbmtfaGFuZGxlciI7czoxMjoibmF2aWdhdGVHYW1lIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czoxODoiYXJlbmFfbGlua192aXNpYmxlIjtzOjE6IjEiO3M6MTU6ImFyZW5hX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE4OiJhcmVuYV9saW5rX2hhbmRsZXIiO3M6MTM6Im5hdmlnYXRlQXJlbmEiO3M6OToibGVhZ3VlX2lkIjtzOjU6IjEwMzUzIjtzOjk6ImdhbWVfZGF5cyI7czoxOiIxIjtzOjE3OiJzaG93X3JlZmVyZWVfY2l0eSI7czoxOiIxIjtzOjEzOiJpdGVtc19vbl9wYWdlIjtzOjI6IjMwIjtzOjIwOiJzdGFnZV9sZXZlbHNfdmlzaWJsZSI7czoxOiIyIjtzOjg6InRlbXBsYXRlIjtzOjI6InYyIjt9',
			params: params
		}).renderPartial(part);
	}

	var tabs = [];
	
	var menuItems = MBT.API.get('33-303-mbt-v2-navigation').childNodes;
	
	for(var i = 0; i <  menuItems.length; i++) {
        if(menuItems[i].nodeType == 1) {
        	tabs.push({
        		tabId: menuItems[i].id,
        		needLoad: MBT.API.Function.createDelegate(namespace.onTabClick, null, [menuItems[i].getAttribute('data-name'), menuItems[i].getAttribute('data-type')], 2),
        	});
        }
	}

	
					var activeTab = 0;
			

	if (typeof (namespace.initConfig) != 'undefined') {	
		if(typeof (namespace.initConfig.filters) != 'undefined') {
			for(var key in namespace.initConfig.filters) {
				namespace.filters[key] = namespace.initConfig.filters[key].value;
				if(key == 'season' || key == 'stage') {
					namespace.reloadFilters(key, false);
				}
			}
		}

		if(typeof (namespace.initConfig.pages) != 'undefined') {
			namespace.filters.page = namespace.initConfig.pages[0].page;
		}

		if(typeof(namespace.initConfig.tabs) != 'undefined') {
			activeTab = namespace.initConfig.tabs[0].activeTab;
		}
	}

	namespace.tabController = [];

	namespace.tabController[0] = new MBT.API.UI.TabPanel({
		parentInstanceId: '33-303',
		container: '33-303-container',
		tabClass: 'mbt-v2-navigation-tab',
        activeTabClass: 'mbt-v2-navigation-tab-active',
        tabs: tabs,
        activeTab: activeTab,
        noCache: true
	});

	MBT.API.Event.observe('33-303-filter-season', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['season', true], 2));
	MBT.API.Event.observe('33-303-filter-stage', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['stage', true], 2));
	MBT.API.Event.observe('33-303-filter-game-day', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['game_day'], 1));
	MBT.API.Event.observe('33-303-filter-team', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['team'], 1));
	MBT.API.Event.observe('33-303-filter-month', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['month'], 1));
	MBT.API.Event.observe('33-303-filter-arena', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['arena'], 1));
    


//]]>
</script></div>
</div>
<div class="container">
	<div id="standings" mbt_widget="301"><div id="mbt-v2-standings-long-widget" class="mbt-v2-widget">
	<div class="mbt-v2-header">
		Lestvica
	</div>
	<div class="mbt-v2-widget-content">
                <div id="33-301-standings-container" class="mbt-v2-33-301-standings-container">									<div class="mbt-v2-table-header-before-table">1. del - Skupina A</div>
			<div id="33-301-tables-container-1" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-1" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=165603&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165603" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.975203001541234322" onlyurl="1">Polzela</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.975203001541234322") === "object") {
                               document.getElementById("a-0.975203001541234322").href = navigateTeam(document.getElementById('a-0.975203001541234322').getAttribute('team_id'), document.getElementById('a-0.975203001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        390<span></span>/<span></span>389
				                    </td>
				                				                				                    <td>
				                        1
				                    </td>
				                												                    <td>
					                    78.0<span></span>/<span></span>77.8					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        3<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            74.5<span></span>/<span></span>86.0
				                        				                    </td>
			                    			                    					                <td>80.3<span></span>/<span></span>72.3</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>+3</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=307703&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="307703" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.975507001541234322" onlyurl="1">Lenart</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.975507001541234322") === "object") {
                               document.getElementById("a-0.975507001541234322").href = navigateTeam(document.getElementById('a-0.975507001541234322').getAttribute('team_id'), document.getElementById('a-0.975507001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        372<span></span>/<span></span>322
				                    </td>
				                				                				                    <td>
				                        50
				                    </td>
				                												                    <td>
					                    93.0<span></span>/<span></span>80.5					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            94.5<span></span>/<span></span>95.5
				                        				                    </td>
			                    			                    					                <td>91.5<span></span>/<span></span>65.5</td>
				                				                					                <td>3<span></span>/<span></span>1</td>
				                				                					                <td>3<span></span>/<span></span>1</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>+2</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196213&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196213" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.975710001541234322" onlyurl="1">Zlatorog B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.975710001541234322") === "object") {
                               document.getElementById("a-0.975710001541234322").href = navigateTeam(document.getElementById('a-0.975710001541234322').getAttribute('team_id'), document.getElementById('a-0.975710001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>6</td>
				                    				                												                    <td>
				                        313<span></span>/<span></span>257
				                    </td>
				                				                				                    <td>
				                        56
				                    </td>
				                												                    <td>
					                    78.3<span></span>/<span></span>64.3					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            75.0<span></span>/<span></span>49.5
				                        				                    </td>
			                    			                    					                <td>81.5<span></span>/<span></span>79.0</td>
				                				                					                <td>2<span></span>/<span></span>2</td>
				                				                					                <td>2<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+2</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>+1</td>
				                				                				                    <td>0<span></span>/<span></span>2</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4596551&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4596551" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.975893001541234322" onlyurl="1">Soperga</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.975893001541234322") === "object") {
                               document.getElementById("a-0.975893001541234322").href = navigateTeam(document.getElementById('a-0.975893001541234322').getAttribute('team_id'), document.getElementById('a-0.975893001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        3
				                    </td>
				                				                				                    				                        <td>0</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>3</td>
				                    				                												                    <td>
				                        144<span></span>/<span></span>251
				                    </td>
				                				                				                    <td>
				                        -107
				                    </td>
				                												                    <td>
					                    48.0<span></span>/<span></span>83.7					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            53.5<span></span>/<span></span>81.0
				                        				                    </td>
			                    			                    					                <td>37.0<span></span>/<span></span>89.0</td>
				                				                					                <td>0<span></span>/<span></span>3</td>
				                				                					                <td>0<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-3</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>-1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-1',
						tablesContainer: '33-301-tables-container-1',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina B</div>
			<div id="33-301-tables-container-2" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-2" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=165563&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165563" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.976487001541234322" onlyurl="1">Dravograd</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.976487001541234322") === "object") {
                               document.getElementById("a-0.976487001541234322").href = navigateTeam(document.getElementById('a-0.976487001541234322').getAttribute('team_id'), document.getElementById('a-0.976487001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>4</td>
				                    				                    				                        <td>
					                        							                    0
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        301<span></span>/<span></span>185
				                    </td>
				                				                				                    <td>
				                        116
				                    </td>
				                												                    <td>
					                    75.3<span></span>/<span></span>46.3					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            66.0<span></span>/<span></span>52.0
				                        				                    </td>
			                    			                    					                <td>84.5<span></span>/<span></span>40.5</td>
				                				                					                <td>4<span></span>/<span></span>0</td>
				                				                					                <td>4<span></span>/<span></span>0</td>
				                				                				                    					                    <td>+4</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=195943&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195943" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.976687001541234322" onlyurl="1">Elektra</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.976687001541234322") === "object") {
                               document.getElementById("a-0.976687001541234322").href = navigateTeam(document.getElementById('a-0.976687001541234322').getAttribute('team_id'), document.getElementById('a-0.976687001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        348<span></span>/<span></span>202
				                    </td>
				                				                				                    <td>
				                        146
				                    </td>
				                												                    <td>
					                    87.0<span></span>/<span></span>50.5					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            123.0<span></span>/<span></span>21.0
				                        				                    </td>
			                    			                    					                <td>75.0<span></span>/<span></span>60.3</td>
				                				                					                <td>3<span></span>/<span></span>1</td>
				                				                					                <td>3<span></span>/<span></span>1</td>
				                				                				                    					                    <td>+3</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4596591&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4596591" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.976952001541234322" onlyurl="1">Vrani</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.976952001541234322") === "object") {
                               document.getElementById("a-0.976952001541234322").href = navigateTeam(document.getElementById('a-0.976952001541234322').getAttribute('team_id'), document.getElementById('a-0.976952001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        281<span></span>/<span></span>349
				                    </td>
				                				                				                    <td>
				                        -68
				                    </td>
				                												                    <td>
					                    56.2<span></span>/<span></span>69.8					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            53.0<span></span>/<span></span>75.0
				                        				                    </td>
			                    			                    					                <td>61.0<span></span>/<span></span>62.0</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>-1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196183&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196183" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.977133001541234322" onlyurl="1">Keleja</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.977133001541234322") === "object") {
                               document.getElementById("a-0.977133001541234322").href = navigateTeam(document.getElementById('a-0.977133001541234322').getAttribute('team_id'), document.getElementById('a-0.977133001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>0</td>
				                    				                    				                        <td>
					                        							                    5
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        222<span></span>/<span></span>416
				                    </td>
				                				                				                    <td>
				                        -194
				                    </td>
				                												                    <td>
					                    44.4<span></span>/<span></span>83.2					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>3				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            52.7<span></span>/<span></span>76.7
				                        				                    </td>
			                    			                    					                <td>32.0<span></span>/<span></span>93.0</td>
				                				                					                <td>0<span></span>/<span></span>5</td>
				                				                					                <td>0<span></span>/<span></span>5</td>
				                				                				                    					                    <td>-5</td>
				                    				                				                					                <td>-3</td>
				                				                					                <td>-2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-2',
						tablesContainer: '33-301-tables-container-2',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina C</div>
			<div id="33-301-tables-container-3" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-3" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196103&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196103" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.977702001541234322" onlyurl="1">Vojnik</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.977702001541234322") === "object") {
                               document.getElementById("a-0.977702001541234322").href = navigateTeam(document.getElementById('a-0.977702001541234322').getAttribute('team_id'), document.getElementById('a-0.977702001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>5</td>
				                    				                    				                        <td>
					                        							                    0
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>10</td>
				                    				                												                    <td>
				                        419<span></span>/<span></span>204
				                    </td>
				                				                				                    <td>
				                        215
				                    </td>
				                												                    <td>
					                    83.8<span></span>/<span></span>40.8					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        3<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            85.0<span></span>/<span></span>47.0
				                        				                    </td>
			                    			                    					                <td>83.0<span></span>/<span></span>36.7</td>
				                				                					                <td>5<span></span>/<span></span>0</td>
				                				                					                <td>5<span></span>/<span></span>0</td>
				                				                				                    					                    <td>+5</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>+3</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196223&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196223" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.977900001541234322" onlyurl="1">Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.977900001541234322") === "object") {
                               document.getElementById("a-0.977900001541234322").href = navigateTeam(document.getElementById('a-0.977900001541234322').getAttribute('team_id'), document.getElementById('a-0.977900001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        368<span></span>/<span></span>253
				                    </td>
				                				                				                    <td>
				                        115
				                    </td>
				                												                    <td>
					                    73.6<span></span>/<span></span>50.6					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            69.0<span></span>/<span></span>50.5
				                        				                    </td>
			                    			                    					                <td>76.7<span></span>/<span></span>50.7</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196463&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196463" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.978104001541234322" onlyurl="1">Globus</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.978104001541234322") === "object") {
                               document.getElementById("a-0.978104001541234322").href = navigateTeam(document.getElementById('a-0.978104001541234322').getAttribute('team_id'), document.getElementById('a-0.978104001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        299<span></span>/<span></span>363
				                    </td>
				                				                				                    <td>
				                        -64
				                    </td>
				                												                    <td>
					                    59.8<span></span>/<span></span>72.6					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            54.3<span></span>/<span></span>71.3
				                        				                    </td>
			                    			                    					                <td>68.0<span></span>/<span></span>74.5</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>+1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619111&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4619111" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.978314001541234322" onlyurl="1">Šentvid B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.978314001541234322") === "object") {
                               document.getElementById("a-0.978314001541234322").href = navigateTeam(document.getElementById('a-0.978314001541234322').getAttribute('team_id'), document.getElementById('a-0.978314001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>0</td>
				                    				                    				                        <td>
					                        							                    5
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        205<span></span>/<span></span>471
				                    </td>
				                				                				                    <td>
				                        -266
				                    </td>
				                												                    <td>
					                    41.0<span></span>/<span></span>94.2					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>3				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            40.7<span></span>/<span></span>96.3
				                        				                    </td>
			                    			                    					                <td>41.5<span></span>/<span></span>91.0</td>
				                				                					                <td>0<span></span>/<span></span>5</td>
				                				                					                <td>0<span></span>/<span></span>5</td>
				                				                				                    					                    <td>-5</td>
				                    				                				                					                <td>-3</td>
				                				                					                <td>-2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-3',
						tablesContainer: '33-301-tables-container-3',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina D</div>
			<div id="33-301-tables-container-4" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-4" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=195983&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195983" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.978935001541234322" onlyurl="1">Olimpija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.978935001541234322") === "object") {
                               document.getElementById("a-0.978935001541234322").href = navigateTeam(document.getElementById('a-0.978935001541234322').getAttribute('team_id'), document.getElementById('a-0.978935001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>5</td>
				                    				                    				                        <td>
					                        							                    0
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>10</td>
				                    				                												                    <td>
				                        510<span></span>/<span></span>232
				                    </td>
				                				                				                    <td>
				                        278
				                    </td>
				                												                    <td>
					                    102.0<span></span>/<span></span>46.4					                </td>
				                				                				                    <td>
				                        3<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            96.7<span></span>/<span></span>53.7
				                        				                    </td>
			                    			                    					                <td>110.0<span></span>/<span></span>35.5</td>
				                				                					                <td>5<span></span>/<span></span>0</td>
				                				                					                <td>5<span></span>/<span></span>0</td>
				                				                				                    					                    <td>+5</td>
				                    				                				                					                <td>+3</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=165713&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.979229001541234322" onlyurl="1">Rogaška</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.979229001541234322") === "object") {
                               document.getElementById("a-0.979229001541234322").href = navigateTeam(document.getElementById('a-0.979229001541234322').getAttribute('team_id'), document.getElementById('a-0.979229001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>4</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>9</td>
				                    				                												                    <td>
				                        414<span></span>/<span></span>286
				                    </td>
				                				                				                    <td>
				                        128
				                    </td>
				                												                    <td>
					                    82.8<span></span>/<span></span>57.2					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            76.0<span></span>/<span></span>58.0
				                        				                    </td>
			                    			                    					                <td>87.3<span></span>/<span></span>56.7</td>
				                				                					                <td>4<span></span>/<span></span>1</td>
				                				                					                <td>4<span></span>/<span></span>1</td>
				                				                				                    					                    <td>+2</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>+1</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=269253&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269253" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.979420001541234322" onlyurl="1">Helios B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.979420001541234322") === "object") {
                               document.getElementById("a-0.979420001541234322").href = navigateTeam(document.getElementById('a-0.979420001541234322').getAttribute('team_id'), document.getElementById('a-0.979420001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>1</td>
				                    				                    				                        <td>
					                        							                    4
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>6</td>
				                    				                												                    <td>
				                        287<span></span>/<span></span>402
				                    </td>
				                				                				                    <td>
				                        -115
				                    </td>
				                												                    <td>
					                    57.4<span></span>/<span></span>80.4					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            49.0<span></span>/<span></span>97.5
				                        				                    </td>
			                    			                    					                <td>63.0<span></span>/<span></span>69.0</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                				                    					                    <td>-2</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>-1</td>
				                				                				                    <td>0<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196043&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196043" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.979595001541234322" onlyurl="1">Borut Besedič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.979595001541234322") === "object") {
                               document.getElementById("a-0.979595001541234322").href = navigateTeam(document.getElementById('a-0.979595001541234322').getAttribute('team_id'), document.getElementById('a-0.979595001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>0</td>
				                    				                    				                        <td>
					                        							                    5
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        185<span></span>/<span></span>476
				                    </td>
				                				                				                    <td>
				                        -291
				                    </td>
				                												                    <td>
					                    37.0<span></span>/<span></span>95.2					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>3				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            34.3<span></span>/<span></span>93.7
				                        				                    </td>
			                    			                    					                <td>41.0<span></span>/<span></span>97.5</td>
				                				                					                <td>0<span></span>/<span></span>5</td>
				                				                					                <td>0<span></span>/<span></span>5</td>
				                				                				                    					                    <td>-5</td>
				                    				                				                					                <td>-3</td>
				                				                					                <td>-2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-4',
						tablesContainer: '33-301-tables-container-4',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina E</div>
			<div id="33-301-tables-container-5" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-5" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196063&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196063" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.980209001541234322" onlyurl="1">Drava Ptuj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.980209001541234322") === "object") {
                               document.getElementById("a-0.980209001541234322").href = navigateTeam(document.getElementById('a-0.980209001541234322').getAttribute('team_id'), document.getElementById('a-0.980209001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>5</td>
				                    				                    				                        <td>
					                        							                    0
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>10</td>
				                    				                												                    <td>
				                        416<span></span>/<span></span>281
				                    </td>
				                				                				                    <td>
				                        135
				                    </td>
				                												                    <td>
					                    83.2<span></span>/<span></span>56.2					                </td>
				                				                				                    <td>
				                        3<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            80.3<span></span>/<span></span>60.3
				                        				                    </td>
			                    			                    					                <td>87.5<span></span>/<span></span>50.0</td>
				                				                					                <td>5<span></span>/<span></span>0</td>
				                				                					                <td>5<span></span>/<span></span>0</td>
				                				                				                    					                    <td>+5</td>
				                    				                				                					                <td>+3</td>
				                				                					                <td>+2</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196093&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196093" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.980407001541234322" onlyurl="1">Šentjur</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.980407001541234322") === "object") {
                               document.getElementById("a-0.980407001541234322").href = navigateTeam(document.getElementById('a-0.980407001541234322').getAttribute('team_id'), document.getElementById('a-0.980407001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        356<span></span>/<span></span>305
				                    </td>
				                				                				                    <td>
				                        51
				                    </td>
				                												                    <td>
					                    71.2<span></span>/<span></span>61.0					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            61.0<span></span>/<span></span>60.0
				                        				                    </td>
			                    			                    					                <td>78.0<span></span>/<span></span>61.7</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=31613&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="31613" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.980583001541234322" onlyurl="1">Radenska</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.980583001541234322") === "object") {
                               document.getElementById("a-0.980583001541234322").href = navigateTeam(document.getElementById('a-0.980583001541234322').getAttribute('team_id'), document.getElementById('a-0.980583001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        293<span></span>/<span></span>322
				                    </td>
				                				                				                    <td>
				                        -29
				                    </td>
				                												                    <td>
					                    58.6<span></span>/<span></span>64.4					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            58.5<span></span>/<span></span>54.5
				                        				                    </td>
			                    			                    					                <td>58.7<span></span>/<span></span>71.0</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>+1</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196073&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196073" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.980774001541234322" onlyurl="1">Lovrenc</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.980774001541234322") === "object") {
                               document.getElementById("a-0.980774001541234322").href = navigateTeam(document.getElementById('a-0.980774001541234322').getAttribute('team_id'), document.getElementById('a-0.980774001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>0</td>
				                    				                    				                        <td>
					                        							                    5
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        256<span></span>/<span></span>413
				                    </td>
				                				                				                    <td>
				                        -157
				                    </td>
				                												                    <td>
					                    51.2<span></span>/<span></span>82.6					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>3				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            58.7<span></span>/<span></span>85.0
				                        				                    </td>
			                    			                    					                <td>40.0<span></span>/<span></span>79.0</td>
				                				                					                <td>0<span></span>/<span></span>5</td>
				                				                					                <td>0<span></span>/<span></span>5</td>
				                				                				                    					                    <td>-5</td>
				                    				                				                					                <td>-3</td>
				                				                					                <td>-2</td>
				                				                				                    <td>0<span></span>/<span></span>1</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-5',
						tablesContainer: '33-301-tables-container-5',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina F</div>
			<div id="33-301-tables-container-6" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-6" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196353&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196353" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.981336001541234322" onlyurl="1">Ilirija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.981336001541234322") === "object") {
                               document.getElementById("a-0.981336001541234322").href = navigateTeam(document.getElementById('a-0.981336001541234322').getAttribute('team_id'), document.getElementById('a-0.981336001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>5</td>
				                    				                    				                        <td>
					                        							                    0
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>10</td>
				                    				                												                    <td>
				                        525<span></span>/<span></span>253
				                    </td>
				                				                				                    <td>
				                        272
				                    </td>
				                												                    <td>
					                    105.0<span></span>/<span></span>50.6					                </td>
				                				                				                    <td>
				                        3<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            112.3<span></span>/<span></span>55.3
				                        				                    </td>
			                    			                    					                <td>94.0<span></span>/<span></span>43.5</td>
				                				                					                <td>5<span></span>/<span></span>0</td>
				                				                					                <td>5<span></span>/<span></span>0</td>
				                				                				                    					                    <td>+5</td>
				                    				                				                					                <td>+3</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196173&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196173" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.981522001541234322" onlyurl="1">Nazarje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.981522001541234322") === "object") {
                               document.getElementById("a-0.981522001541234322").href = navigateTeam(document.getElementById('a-0.981522001541234322').getAttribute('team_id'), document.getElementById('a-0.981522001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        380<span></span>/<span></span>390
				                    </td>
				                				                				                    <td>
				                        -10
				                    </td>
				                												                    <td>
					                    76.0<span></span>/<span></span>78.0					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            69.5<span></span>/<span></span>57.5
				                        				                    </td>
			                    			                    					                <td>80.3<span></span>/<span></span>91.7</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+2</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>+1</td>
				                				                				                    <td>0<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4646255&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4646255" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.981696001541234322" onlyurl="1">Troti</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.981696001541234322") === "object") {
                               document.getElementById("a-0.981696001541234322").href = navigateTeam(document.getElementById('a-0.981696001541234322').getAttribute('team_id'), document.getElementById('a-0.981696001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        285<span></span>/<span></span>375
				                    </td>
				                				                				                    <td>
				                        -90
				                    </td>
				                												                    <td>
					                    57.0<span></span>/<span></span>75.0					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            61.7<span></span>/<span></span>70.3
				                        				                    </td>
			                    			                    					                <td>50.0<span></span>/<span></span>82.0</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-2</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>-2</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196253&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196253" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.981867001541234322" onlyurl="1">Parklji B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.981867001541234322") === "object") {
                               document.getElementById("a-0.981867001541234322").href = navigateTeam(document.getElementById('a-0.981867001541234322').getAttribute('team_id'), document.getElementById('a-0.981867001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>0</td>
				                    				                    				                        <td>
					                        							                    5
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        210<span></span>/<span></span>382
				                    </td>
				                				                				                    <td>
				                        -172
				                    </td>
				                												                    <td>
					                    42.0<span></span>/<span></span>76.4					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>3				                    </td>
				                							    				                    <td>
				                        				                            44.5<span></span>/<span></span>79.0
				                        				                    </td>
			                    			                    					                <td>40.3<span></span>/<span></span>74.7</td>
				                				                					                <td>0<span></span>/<span></span>5</td>
				                				                					                <td>0<span></span>/<span></span>5</td>
				                				                				                    					                    <td>-5</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>-3</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-6',
						tablesContainer: '33-301-tables-container-6',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina G</div>
			<div id="33-301-tables-container-7" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-7" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196393&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196393" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.982436001541234322" onlyurl="1">Ježica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.982436001541234322") === "object") {
                               document.getElementById("a-0.982436001541234322").href = navigateTeam(document.getElementById('a-0.982436001541234322').getAttribute('team_id'), document.getElementById('a-0.982436001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>4</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>9</td>
				                    				                												                    <td>
				                        393<span></span>/<span></span>345
				                    </td>
				                				                				                    <td>
				                        48
				                    </td>
				                												                    <td>
					                    78.6<span></span>/<span></span>69.0					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            92.0<span></span>/<span></span>76.0
				                        				                    </td>
			                    			                    					                <td>69.7<span></span>/<span></span>64.3</td>
				                				                					                <td>4<span></span>/<span></span>1</td>
				                				                					                <td>4<span></span>/<span></span>1</td>
				                				                				                    					                    <td>+2</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>+1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196313&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196313" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.982621001541234322" onlyurl="1">Krvavec</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.982621001541234322") === "object") {
                               document.getElementById("a-0.982621001541234322").href = navigateTeam(document.getElementById('a-0.982621001541234322').getAttribute('team_id'), document.getElementById('a-0.982621001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        339<span></span>/<span></span>339
				                    </td>
				                				                				                    <td>
				                        0
				                    </td>
				                												                    <td>
					                    67.8<span></span>/<span></span>67.8					                </td>
				                				                				                    <td>
				                        3<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            70.0<span></span>/<span></span>63.7
				                        				                    </td>
			                    			                    					                <td>64.5<span></span>/<span></span>74.0</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>+3</td>
				                				                					                <td>-2</td>
				                				                				                    <td>2<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=195963&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195963" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.982794001541234322" onlyurl="1">Litija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.982794001541234322") === "object") {
                               document.getElementById("a-0.982794001541234322").href = navigateTeam(document.getElementById('a-0.982794001541234322').getAttribute('team_id'), document.getElementById('a-0.982794001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        338<span></span>/<span></span>355
				                    </td>
				                				                				                    <td>
				                        -17
				                    </td>
				                												                    <td>
					                    67.6<span></span>/<span></span>71.0					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            67.0<span></span>/<span></span>72.0
				                        				                    </td>
			                    			                    					                <td>68.0<span></span>/<span></span>70.3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>-1</td>
				                				                				                    <td>1<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619103&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4619103" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.982965001541234322" onlyurl="1">Ivančna Gorica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.982965001541234322") === "object") {
                               document.getElementById("a-0.982965001541234322").href = navigateTeam(document.getElementById('a-0.982965001541234322').getAttribute('team_id'), document.getElementById('a-0.982965001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>1</td>
				                    				                    				                        <td>
					                        							                    4
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>6</td>
				                    				                												                    <td>
				                        325<span></span>/<span></span>356
				                    </td>
				                				                				                    <td>
				                        -31
				                    </td>
				                												                    <td>
					                    65.0<span></span>/<span></span>71.2					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            62.0<span></span>/<span></span>64.7
				                        				                    </td>
			                    			                    					                <td>69.5<span></span>/<span></span>81.0</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>-2</td>
				                				                				                    <td>0<span></span>/<span></span>1</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-7',
						tablesContainer: '33-301-tables-container-7',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina H</div>
			<div id="33-301-tables-container-8" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-8" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=195953&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195953" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.983561001541234322" onlyurl="1">Janče A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.983561001541234322") === "object") {
                               document.getElementById("a-0.983561001541234322").href = navigateTeam(document.getElementById('a-0.983561001541234322').getAttribute('team_id'), document.getElementById('a-0.983561001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>5</td>
				                    				                    				                        <td>
					                        							                    0
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>10</td>
				                    				                												                    <td>
				                        517<span></span>/<span></span>194
				                    </td>
				                				                				                    <td>
				                        323
				                    </td>
				                												                    <td>
					                    103.4<span></span>/<span></span>38.8					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        3<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            110.5<span></span>/<span></span>43.5
				                        				                    </td>
			                    			                    					                <td>98.7<span></span>/<span></span>35.7</td>
				                				                					                <td>5<span></span>/<span></span>0</td>
				                				                					                <td>5<span></span>/<span></span>0</td>
				                				                				                    					                    <td>+5</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>+3</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196303&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196303" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.983747001541234322" onlyurl="1">Radovljica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.983747001541234322") === "object") {
                               document.getElementById("a-0.983747001541234322").href = navigateTeam(document.getElementById('a-0.983747001541234322').getAttribute('team_id'), document.getElementById('a-0.983747001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        360<span></span>/<span></span>384
				                    </td>
				                				                				                    <td>
				                        -24
				                    </td>
				                												                    <td>
					                    72.0<span></span>/<span></span>76.8					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            74.7<span></span>/<span></span>81.0
				                        				                    </td>
			                    			                    					                <td>68.0<span></span>/<span></span>70.5</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-3</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>-1</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196343&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196343" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.983920001541234322" onlyurl="1">Chilli Jesenice</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.983920001541234322") === "object") {
                               document.getElementById("a-0.983920001541234322").href = navigateTeam(document.getElementById('a-0.983920001541234322').getAttribute('team_id'), document.getElementById('a-0.983920001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        344<span></span>/<span></span>414
				                    </td>
				                				                				                    <td>
				                        -70
				                    </td>
				                												                    <td>
					                    68.8<span></span>/<span></span>82.8					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            69.0<span></span>/<span></span>75.7
				                        				                    </td>
			                    			                    					                <td>68.5<span></span>/<span></span>93.5</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>+1</td>
				                				                				                    <td>0<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196373&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196373" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.984090001541234322" onlyurl="1">Komenda</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.984090001541234322") === "object") {
                               document.getElementById("a-0.984090001541234322").href = navigateTeam(document.getElementById('a-0.984090001541234322').getAttribute('team_id'), document.getElementById('a-0.984090001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>1</td>
				                    				                    				                        <td>
					                        							                    4
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>6</td>
				                    				                												                    <td>
				                        274<span></span>/<span></span>503
				                    </td>
				                				                				                    <td>
				                        -229
				                    </td>
				                												                    <td>
					                    54.8<span></span>/<span></span>100.6					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>3				                    </td>
				                							    				                    <td>
				                        				                            52.0<span></span>/<span></span>91.0
				                        				                    </td>
			                    			                    					                <td>56.7<span></span>/<span></span>107.0</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>-3</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-8',
						tablesContainer: '33-301-tables-container-8',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina I</div>
			<div id="33-301-tables-container-9" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-9" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196283&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196283" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.984674001541234322" onlyurl="1">Kolpa</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.984674001541234322") === "object") {
                               document.getElementById("a-0.984674001541234322").href = navigateTeam(document.getElementById('a-0.984674001541234322').getAttribute('team_id'), document.getElementById('a-0.984674001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>4</td>
				                    				                    				                        <td>
					                        							                    0
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        264<span></span>/<span></span>188
				                    </td>
				                				                				                    <td>
				                        76
				                    </td>
				                												                    <td>
					                    66.0<span></span>/<span></span>47.0					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            65.5<span></span>/<span></span>39.5
				                        				                    </td>
			                    			                    					                <td>66.5<span></span>/<span></span>54.5</td>
				                				                					                <td>4<span></span>/<span></span>0</td>
				                				                					                <td>4<span></span>/<span></span>0</td>
				                				                				                    					                    <td>+4</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196383&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196383" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.984859001541234322" onlyurl="1">Krško</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.984859001541234322") === "object") {
                               document.getElementById("a-0.984859001541234322").href = navigateTeam(document.getElementById('a-0.984859001541234322').getAttribute('team_id'), document.getElementById('a-0.984859001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        266<span></span>/<span></span>323
				                    </td>
				                				                				                    <td>
				                        -57
				                    </td>
				                												                    <td>
					                    53.2<span></span>/<span></span>64.6					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            51.3<span></span>/<span></span>67.0
				                        				                    </td>
			                    			                    					                <td>56.0<span></span>/<span></span>61.0</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>+1</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196163&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196163" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.985045001541234322" onlyurl="1">Lastovka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.985045001541234322") === "object") {
                               document.getElementById("a-0.985045001541234322").href = navigateTeam(document.getElementById('a-0.985045001541234322').getAttribute('team_id'), document.getElementById('a-0.985045001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>6</td>
				                    				                												                    <td>
				                        260<span></span>/<span></span>215
				                    </td>
				                				                				                    <td>
				                        45
				                    </td>
				                												                    <td>
					                    65.0<span></span>/<span></span>53.8					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            57.5<span></span>/<span></span>62.5
				                        				                    </td>
			                    			                    					                <td>72.5<span></span>/<span></span>45.0</td>
				                				                					                <td>2<span></span>/<span></span>2</td>
				                				                					                <td>2<span></span>/<span></span>2</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196263&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196263" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.985221001541234322" onlyurl="1">Šentvid A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.985221001541234322") === "object") {
                               document.getElementById("a-0.985221001541234322").href = navigateTeam(document.getElementById('a-0.985221001541234322').getAttribute('team_id'), document.getElementById('a-0.985221001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>1</td>
				                    				                    				                        <td>
					                        							                    4
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>6</td>
				                    				                												                    <td>
				                        291<span></span>/<span></span>355
				                    </td>
				                				                				                    <td>
				                        -64
				                    </td>
				                												                    <td>
					                    58.2<span></span>/<span></span>71.0					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            59.5<span></span>/<span></span>78.5
				                        				                    </td>
			                    			                    					                <td>57.3<span></span>/<span></span>66.0</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>+1</td>
				                				                				                    <td>1<span></span>/<span></span>1</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-9',
						tablesContainer: '33-301-tables-container-9',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina J</div>
			<div id="33-301-tables-container-10" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-10" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196423&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196423" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.985776001541234322" onlyurl="1">Vrhnika</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.985776001541234322") === "object") {
                               document.getElementById("a-0.985776001541234322").href = navigateTeam(document.getElementById('a-0.985776001541234322').getAttribute('team_id'), document.getElementById('a-0.985776001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        334<span></span>/<span></span>321
				                    </td>
				                				                				                    <td>
				                        13
				                    </td>
				                												                    <td>
					                    66.8<span></span>/<span></span>64.2					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            71.0<span></span>/<span></span>56.5
				                        				                    </td>
			                    			                    					                <td>64.0<span></span>/<span></span>69.3</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>-1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196433&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196433" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.985958001541234322" onlyurl="1">Cerknica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.985958001541234322") === "object") {
                               document.getElementById("a-0.985958001541234322").href = navigateTeam(document.getElementById('a-0.985958001541234322').getAttribute('team_id'), document.getElementById('a-0.985958001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        331<span></span>/<span></span>326
				                    </td>
				                				                				                    <td>
				                        5
				                    </td>
				                												                    <td>
					                    66.2<span></span>/<span></span>65.2					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            64.3<span></span>/<span></span>68.7
				                        				                    </td>
			                    			                    					                <td>69.0<span></span>/<span></span>60.0</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+2</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>+2</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=165673&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165673" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.986130001541234322" onlyurl="1">Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.986130001541234322") === "object") {
                               document.getElementById("a-0.986130001541234322").href = navigateTeam(document.getElementById('a-0.986130001541234322').getAttribute('team_id'), document.getElementById('a-0.986130001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        296<span></span>/<span></span>296
				                    </td>
				                				                				                    <td>
				                        0
				                    </td>
				                												                    <td>
					                    59.2<span></span>/<span></span>59.2					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            68.0<span></span>/<span></span>62.0
				                        				                    </td>
			                    			                    					                <td>53.3<span></span>/<span></span>57.3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>-1</td>
				                				                				                    <td>0<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=269283&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269283" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.986301001541234322" onlyurl="1">Ajdovščina A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.986301001541234322") === "object") {
                               document.getElementById("a-0.986301001541234322").href = navigateTeam(document.getElementById('a-0.986301001541234322').getAttribute('team_id'), document.getElementById('a-0.986301001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        318<span></span>/<span></span>336
				                    </td>
				                				                				                    <td>
				                        -18
				                    </td>
				                												                    <td>
					                    63.6<span></span>/<span></span>67.2					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            57.3<span></span>/<span></span>64.3
				                        				                    </td>
			                    			                    					                <td>73.0<span></span>/<span></span>71.5</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-3</td>
				                    				                				                					                <td>-2</td>
				                				                					                <td>-1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-10',
						tablesContainer: '33-301-tables-container-10',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina K</div>
			<div id="33-301-tables-container-11" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-11" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196503&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196503" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.986858001541234322" onlyurl="1">Mesarija Prunk</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.986858001541234322") === "object") {
                               document.getElementById("a-0.986858001541234322").href = navigateTeam(document.getElementById('a-0.986858001541234322').getAttribute('team_id'), document.getElementById('a-0.986858001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        3
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    0
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>6</td>
				                    				                												                    <td>
				                        249<span></span>/<span></span>154
				                    </td>
				                				                				                    <td>
				                        95
				                    </td>
				                												                    <td>
					                    83.0<span></span>/<span></span>51.3					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            108.0<span></span>/<span></span>50.0
				                        				                    </td>
			                    			                    					                <td>70.5<span></span>/<span></span>52.0</td>
				                				                					                <td>3<span></span>/<span></span>0</td>
				                				                					                <td>3<span></span>/<span></span>0</td>
				                				                				                    					                    <td>+3</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>+2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4612375&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4612375" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.987048001541234322" onlyurl="1">Primorska B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.987048001541234322") === "object") {
                               document.getElementById("a-0.987048001541234322").href = navigateTeam(document.getElementById('a-0.987048001541234322').getAttribute('team_id'), document.getElementById('a-0.987048001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        2
				                    </td>
				                				                				                    				                        <td>1</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>3</td>
				                    				                												                    <td>
				                        140<span></span>/<span></span>105
				                    </td>
				                				                				                    <td>
				                        35
				                    </td>
				                												                    <td>
					                    70.0<span></span>/<span></span>52.5					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>0				                    </td>
				                							    				                    <td>
				                        				                            70.0<span></span>/<span></span>52.5
				                        				                    </td>
			                    			                    					                <td>-/-</td>
				                				                					                <td>1<span></span>/<span></span>1</td>
				                				                					                <td>1<span></span>/<span></span>1</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>-</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=165533&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165533" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.987301001541234322" onlyurl="1">Portorož</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.987301001541234322") === "object") {
                               document.getElementById("a-0.987301001541234322").href = navigateTeam(document.getElementById('a-0.987301001541234322').getAttribute('team_id'), document.getElementById('a-0.987301001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        3
				                    </td>
				                				                				                    				                        <td>0</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>3</td>
				                    				                												                    <td>
				                        126<span></span>/<span></span>256
				                    </td>
				                				                				                    <td>
				                        -130
				                    </td>
				                												                    <td>
					                    42.0<span></span>/<span></span>85.3					                </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            42.0<span></span>/<span></span>70.0
				                        				                    </td>
			                    			                    					                <td>42.0<span></span>/<span></span>93.0</td>
				                				                					                <td>0<span></span>/<span></span>3</td>
				                				                					                <td>0<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-3</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>-2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-11',
						tablesContainer: '33-301-tables-container-11',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina L</div>
			<div id="33-301-tables-container-12" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-12" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=196493&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196493" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.988180001541234322" onlyurl="1">Tolmin</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.988180001541234322") === "object") {
                               document.getElementById("a-0.988180001541234322").href = navigateTeam(document.getElementById('a-0.988180001541234322').getAttribute('team_id'), document.getElementById('a-0.988180001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        4
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>6</td>
				                    				                												                    <td>
				                        289<span></span>/<span></span>294
				                    </td>
				                				                				                    <td>
				                        -5
				                    </td>
				                												                    <td>
					                    72.3<span></span>/<span></span>73.5					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            77.5<span></span>/<span></span>73.0
				                        				                    </td>
			                    			                    					                <td>67.0<span></span>/<span></span>74.0</td>
				                				                					                <td>2<span></span>/<span></span>2</td>
				                				                					                <td>2<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>-2</td>
				                				                				                    <td>1<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=269273&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269273" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.988366001541234322" onlyurl="1">Pivka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.988366001541234322") === "object") {
                               document.getElementById("a-0.988366001541234322").href = navigateTeam(document.getElementById('a-0.988366001541234322').getAttribute('team_id'), document.getElementById('a-0.988366001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        3
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>5</td>
				                    				                												                    <td>
				                        225<span></span>/<span></span>208
				                    </td>
				                				                				                    <td>
				                        17
				                    </td>
				                												                    <td>
					                    75.0<span></span>/<span></span>69.3					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            63.0<span></span>/<span></span>62.0
				                        				                    </td>
			                    			                    					                <td>81.0<span></span>/<span></span>73.0</td>
				                				                					                <td>2<span></span>/<span></span>1</td>
				                				                					                <td>2<span></span>/<span></span>1</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>-1</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=269263&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269263" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.988555001541234322" onlyurl="1">Logatec</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.988555001541234322") === "object") {
                               document.getElementById("a-0.988555001541234322").href = navigateTeam(document.getElementById('a-0.988555001541234322').getAttribute('team_id'), document.getElementById('a-0.988555001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        3
				                    </td>
				                				                				                    				                        <td>1</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>4</td>
				                    				                												                    <td>
				                        214<span></span>/<span></span>226
				                    </td>
				                				                				                    <td>
				                        -12
				                    </td>
				                												                    <td>
					                    71.3<span></span>/<span></span>75.3					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            73.0<span></span>/<span></span>78.0
				                        				                    </td>
			                    			                    					                <td>68.0<span></span>/<span></span>70.0</td>
				                				                					                <td>1<span></span>/<span></span>2</td>
				                				                					                <td>1<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>-1</td>
				                				                				                    <td>0<span></span>/<span></span>1</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-12',
						tablesContainer: '33-301-tables-container-12',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina M</div>
			<div id="33-301-tables-container-13" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-13" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4612373&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4612373" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.989117001541234322" onlyurl="1">Triglav B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.989117001541234322") === "object") {
                               document.getElementById("a-0.989117001541234322").href = navigateTeam(document.getElementById('a-0.989117001541234322').getAttribute('team_id'), document.getElementById('a-0.989117001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        329<span></span>/<span></span>306
				                    </td>
				                				                				                    <td>
				                        23
				                    </td>
				                												                    <td>
					                    65.8<span></span>/<span></span>61.2					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            76.5<span></span>/<span></span>58.5
				                        				                    </td>
			                    			                    					                <td>58.7<span></span>/<span></span>63.0</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+1</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>-2</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4619105&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4619105" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.989385001541234322" onlyurl="1">Janče B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.989385001541234322") === "object") {
                               document.getElementById("a-0.989385001541234322").href = navigateTeam(document.getElementById('a-0.989385001541234322').getAttribute('team_id'), document.getElementById('a-0.989385001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        327<span></span>/<span></span>315
				                    </td>
				                				                				                    <td>
				                        12
				                    </td>
				                												                    <td>
					                    65.4<span></span>/<span></span>63.0					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            73.0<span></span>/<span></span>60.5
				                        				                    </td>
			                    			                    					                <td>60.3<span></span>/<span></span>64.7</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+2</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>-1</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4596671&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4596671" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.989565001541234322" onlyurl="1">Slovan B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.989565001541234322") === "object") {
                               document.getElementById("a-0.989565001541234322").href = navigateTeam(document.getElementById('a-0.989565001541234322').getAttribute('team_id'), document.getElementById('a-0.989565001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        310<span></span>/<span></span>317
				                    </td>
				                				                				                    <td>
				                        -7
				                    </td>
				                												                    <td>
					                    62.0<span></span>/<span></span>63.4					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            60.7<span></span>/<span></span>62.7
				                        				                    </td>
			                    			                    					                <td>64.0<span></span>/<span></span>64.5</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                				                    					                    <td>-1</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>-1</td>
				                				                				                    <td>1<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=269243&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269243" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.989736001541234322" onlyurl="1">Grosuplje B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.989736001541234322") === "object") {
                               document.getElementById("a-0.989736001541234322").href = navigateTeam(document.getElementById('a-0.989736001541234322').getAttribute('team_id'), document.getElementById('a-0.989736001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>1</td>
				                    				                    				                        <td>
					                        							                    4
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>6</td>
				                    				                												                    <td>
				                        307<span></span>/<span></span>335
				                    </td>
				                				                				                    <td>
				                        -28
				                    </td>
				                												                    <td>
					                    61.4<span></span>/<span></span>67.0					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            60.3<span></span>/<span></span>61.7
				                        				                    </td>
			                    			                    					                <td>63.0<span></span>/<span></span>75.0</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                				                    					                    <td>-2</td>
				                    				                				                					                <td>+1</td>
				                				                					                <td>-2</td>
				                				                				                    <td>0<span></span>/<span></span>2</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-13',
						tablesContainer: '33-301-tables-container-13',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
								<div class="mbt-v2-table-header-before-table">1. del - Skupina N</div>
			<div id="33-301-tables-container-14" class="mbt-v2-responsive-table-container">
				<table id="mbt-v2-standings-long-table-14" class="mbt-v2-table mbt-v2-standings-long-table">
					<thead>
						<tr>
															<th>M</th>
																						<th>Ekipa</th>
													    							    <th>T</th>
						    						    							    								    <th>Z</th>
																									<th>P</th>
																			                     
						    						    						    							    									<th>TČ</th>    
							    						    						    								<th>TČ/PR</th>
						    						    
						    								<th>+/-</th>
						    						    							    <th>DT/PT</th>
						    						    							    <th>Dom. Z/P</th>
						    						    				                <th>Gost. Z/P</th>
			                			                				                <th>Dom. +/-</th>
			                			                				                <th>Gost. +/-</th>
			                			                				                <th>Zad. 5</th>
			                			                				                <th>Zad. 10</th>
			                			                			                    				                    <th>Ser.</th>
			                    			                			                				                <th>Ser. doma</th>
			                			                				                <th>Ser. v gost.</th>
			                			                			                	<th title="Tesne t.">
			                		+/-5
			                	</th>
			                						</tr>
					</thead>
					<tbody>
																				<tr>
																	<td>
										1.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4596651&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4596651" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.990296001541234322" onlyurl="1">Nova Gorica B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.990296001541234322") === "object") {
                               document.getElementById("a-0.990296001541234322").href = navigateTeam(document.getElementById('a-0.990296001541234322').getAttribute('team_id'), document.getElementById('a-0.990296001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>4</td>
				                    				                    				                        <td>
					                        							                    1
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>9</td>
				                    				                												                    <td>
				                        334<span></span>/<span></span>265
				                    </td>
				                				                				                    <td>
				                        69
				                    </td>
				                												                    <td>
					                    66.8<span></span>/<span></span>53.0					                </td>
				                				                				                    <td>
				                        3<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                							    				                    <td>
				                        				                            66.3<span></span>/<span></span>51.3
				                        				                    </td>
			                    			                    					                <td>67.5<span></span>/<span></span>55.5</td>
				                				                					                <td>4<span></span>/<span></span>1</td>
				                				                					                <td>4<span></span>/<span></span>1</td>
				                				                				                    					                    <td>+4</td>
				                    				                				                					                <td>+3</td>
				                				                					                <td>+1</td>
				                				                				                    <td>1<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr>
																	<td>
										2.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=269233&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269233" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.990476001541234322" onlyurl="1">Ljubljana B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.990476001541234322") === "object") {
                               document.getElementById("a-0.990476001541234322").href = navigateTeam(document.getElementById('a-0.990476001541234322').getAttribute('team_id'), document.getElementById('a-0.990476001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>3</td>
				                    				                    				                        <td>
					                        							                    2
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>8</td>
				                    				                												                    <td>
				                        359<span></span>/<span></span>308
				                    </td>
				                				                				                    <td>
				                        51
				                    </td>
				                												                    <td>
					                    71.8<span></span>/<span></span>61.6					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>0				                    </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            89.0<span></span>/<span></span>60.0
				                        				                    </td>
			                    			                    					                <td>60.3<span></span>/<span></span>62.7</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                					                <td>3<span></span>/<span></span>2</td>
				                				                				                    					                    <td>+3</td>
				                    				                				                					                <td>+2</td>
				                				                					                <td>+1</td>
				                				                				                    <td>1<span></span>/<span></span>1</td>
				                			                
							</tr>
																				<tr>
																	<td>
										3.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4596641&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4596641" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.990646001541234322" onlyurl="1">Helios C</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.990646001541234322") === "object") {
                               document.getElementById("a-0.990646001541234322").href = navigateTeam(document.getElementById('a-0.990646001541234322').getAttribute('team_id'), document.getElementById('a-0.990646001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>2</td>
				                    				                    				                        <td>
					                        							                    3
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>7</td>
				                    				                												                    <td>
				                        290<span></span>/<span></span>339
				                    </td>
				                				                				                    <td>
				                        -49
				                    </td>
				                												                    <td>
					                    58.0<span></span>/<span></span>67.8					                </td>
				                				                				                    <td>
				                        2<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>2				                    </td>
				                							    				                    <td>
				                        				                            57.3<span></span>/<span></span>62.0
				                        				                    </td>
			                    			                    					                <td>59.0<span></span>/<span></span>76.5</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                					                <td>2<span></span>/<span></span>3</td>
				                				                				                    					                    <td>-3</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>-2</td>
				                				                				                    <td>0<span></span>/<span></span>0</td>
				                			                
							</tr>
																				<tr>
																	<td>
										4.
																			</td>
									
																	<td>
																				<a href="http://www.kzs.si/incl?id=967&amp;team_id=4672567&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4672567" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.990830001541234322" onlyurl="1">Ajdovščina B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.990830001541234322") === "object") {
                               document.getElementById("a-0.990830001541234322").href = navigateTeam(document.getElementById('a-0.990830001541234322').getAttribute('team_id'), document.getElementById('a-0.990830001541234322').getAttribute('season_id'));
                            }
                        </script>
									</td>
																
				                				                    <td>
				                        5
				                    </td>
				                				                				                    				                        <td>1</td>
				                    				                    				                        <td>
					                        							                    4
						                    					                    </td>
				                        				                    				                    				                				                				                    				                        <td>6</td>
				                    				                												                    <td>
				                        286<span></span>/<span></span>357
				                    </td>
				                				                				                    <td>
				                        -71
				                    </td>
				                												                    <td>
					                    57.2<span></span>/<span></span>71.4					                </td>
				                				                				                    <td>
				                        1<span></span>/<span></span>1				                    </td>
				                				                				                    <td>
				                        0<span></span>/<span></span>3				                    </td>
				                							    				                    <td>
				                        				                            65.5<span></span>/<span></span>64.5
				                        				                    </td>
			                    			                    					                <td>51.7<span></span>/<span></span>76.0</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                					                <td>1<span></span>/<span></span>4</td>
				                				                				                    					                    <td>-4</td>
				                    				                				                					                <td>-1</td>
				                				                					                <td>-3</td>
				                				                				                    <td>1<span></span>/<span></span>1</td>
				                			                
							</tr>
											</tbody>
				</table>
			</div>
			<script type="text/javascript">
				//<![CDATA[
				
				    
				    new MBT.API.responsiveTable ({
						table: 'mbt-v2-standings-long-table-14',
						tablesContainer: '33-301-tables-container-14',
						columnsToPin: 2
					}).watchTable();

				
				//]]>	
			</script>
							<div class="mbt-v2-divider"></div>
				<div id="mbt-v2-standings-long-tiebreakers" style="display:none;">
				   <div class="mbt-v2-subheader">
			   Odločitve na lestvici ob koncu
			   			</div>
			<table class="mbt-v2-table mbt-v2-tiebreakers-table mbt-v2-table-bordered">
			    <thead>
			        <tr>
			            <th>
			                M
			            </th>
			            <th>
			                Ime
			            </th>
			            <th>
			                Opis
			            </th>
			        </tr>
			    </thead>
			    <tbody>
		            		                <tr>
			                			                			                <td>
			                    1.
			                </td>
			                <td>
			                    Točke
			                </td>
			                <td>
			                    Točke
			                </td>
			            </tr>
		            		                <tr>
			                			                			                <td>
			                    2.
			                </td>
			                <td>
			                    Inner points
			                </td>
			                <td>
			                    Points counting the games between tied teams only
			                </td>
			            </tr>
		            		                <tr>
			                			                			                <td>
			                    3.
			                </td>
			                <td>
			                    Inner goal difference
			                </td>
			                <td>
			                    Goal difference between tied teams
			                </td>
			            </tr>
		            		                <tr>
			                			                			                <td>
			                    4.
			                </td>
			                <td>
			                    Inner goals
			                </td>
			                <td>
			                    Goals counting the games between tied teams only
			                </td>
			            </tr>
		            		                <tr>
			                			                			                <td>
			                    5.
			                </td>
			                <td>
			                    Razlika v koših (vse tekme)
			                </td>
			                <td>
			                    Razlika v koših (vse tekme)
			                </td>
			            </tr>
		            		                <tr>
			                			                			                <td>
			                    6.
			                </td>
			                <td>
			                    Total goals
			                </td>
			                <td>
			                    Total goals scored
			                </td>
			            </tr>
		            			    </tbody>
			</table>
			</div>
	</div>
                    <a id="mbt-v2-standings-long-tiebreakers-link" href="#" onclick="return false;">
                Odločitve na lestvici ob koncu »
            </a>
                
    </div>
</div>
<div id="33-301-tmp-container" style="display: none;"></div>


<script type="text/javascript">

//<![CDATA[


var namespace = MBT.API.SafeNames.Container('33-301');

namespace.getSeason = function () {

    var seasonId = 102585;

        

    return seasonId;
}

namespace.loadGroups = function () {

    var widget = new MBT.API.Widgets.Widget({widgetId: 301,
                        container: '33-301-tmp-container',
                        params: {
                            season_id: namespace.getSeason()
                        }});
    widget.setCallback('namespace.loadStandings');
    widget.renderPartial('get-groups'); 

}

namespace.changeSeason = function() {

    
        namespace.loadStandings();
        
}


namespace.showLegend = function() {
	if (MBT.API.get('33-301-tiebreakers')) {
		MBT.API.get('33-301-tiebreakers').style.display = "none";
	}
	if (MBT.API.get('33-301-legend')) {
		MBT.API.get('33-301-legend').style.display = "block";
	}
}

namespace.showTiebreakers = function() {
    var el = MBT.API.get('mbt-v2-standings-long-tiebreakers');
	if (el.style.display == "block") {
        el.style.display = 'none';
	} else {
        el.style.display = 'block';
    }
}



MBT.API.Event.observe('33-301-legend-link', "click", namespace.showLegend);
MBT.API.Event.observe('mbt-v2-standings-long-tiebreakers-link', "click", namespace.showTiebreakers);



namespace.loadStandings = function() {
    new MBT.API.Widgets.Widget({
        widgetId: 301, 
        container: '33-301-standings-container',
        state: 'Mzc3MzYxNzM0MGE6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMiI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMiI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjI3OiJmdWxsX3N0YW5kaW5nc19saW5rX3Zpc2libGUiO3M6MToiMiI7czoyMDoic3RhZ2VfbGV2ZWxzX3Zpc2libGUiO3M6MToiMiI7czo5OiJsZWFndWVfaWQiO3M6NToiMTAzNTMiO3M6MTQ6InRlYW1fbGlua190eXBlIjtzOjE6IjMiO3M6MTc6InRlYW1fbGlua19oYW5kbGVyIjtzOjEyOiJuYXZpZ2F0ZVRlYW0iO3M6MjQ6ImZ1bGxfc3RhbmRpbmdzX2xpbmtfdHlwZSI7czoxOiIzIjtzOjI3OiJmdWxsX3N0YW5kaW5nc19saW5rX2hhbmRsZXIiO3M6MTc6Im5hdmlnYXRlU3RhbmRpbmdzIjtzOjg6InRlbXBsYXRlIjtzOjI6InYyIjt9',
        params: {
            season_id: namespace.getSeason(),
            showTeamLogo:'',
            teamLogoSize: '20x20'
        }
    }).renderPartial("table");
    
}


namespace.applyFilter = function(pl, newSearch) {
	namespace = MBT.API.SafeNames.Container('33-301');
	namespace.loadStandings();
};

try {
	if (MBT.API.History.notFound[MBT.API.History.filterIndex] && MBT.API.History.notFound[MBT.API.History.filterIndex]['group'] > 0) {
		MBT.API.get('33-301-filter-group').value = MBT.API.History.notFound[MBT.API.History.filterIndex]['group'];
		
	}
} catch (e) {}

namespace.loadStandings();

    MBT.API.Event.observe('33-301-filter-season', "change", namespace.changeSeason );

//]]>	
</script></div>
</div>
<div class="container">
	<div id="standings">
		&nbsp;</div>
</div>
<div class="container">
	<div id="stats-player" mbt_widget="600"><div id="mbt-v2-players-stats" class="mbt-v2-widget">
	<div class="mbt-v2-header">
					Statistika
			
	</div>
	<div class="mbt-v2-widget-content">
		<div id="33-600-mobile-menu" class="mbt-v2-mobile-menu">
			Povprečje
		</div>
		<nav id="33-600-mbt-v2-navigation" class="mbt-v2-navigation">
			<div id="33-600-tab-0" data-name="averages" class="mbt-v2-navigation-tab-active" prevclassname="mbt-v2-navigation-tab-active">
				Povprečje
			</div>
			<div id="33-600-tab-1" data-name="highs" class="mbt-v2-navigation-tab">
				Rekordi
			</div>
		    <div id="33-600-tab-2" data-name="totals" class="mbt-v2-navigation-tab">
				Skupno
			</div>
					</nav>
		<div class="mbt-v2-divider"></div>
		<div id="33-600-mobile-filters-block" class="mbt-v2-mobile-filters-block">
			Filtri
		</div>
		<div id="33-600-filters-block" class="mbt-v2-filters-block">
			<select id="33-600-filter-stats" data-name="stat_cat" class="mbt-v2-select"><option value="pts">Točke</option><option value="rt">Skoki</option><option value="eq">Valorizacija</option><option value="as">Asistence</option><option value="sec">Minute</option><option value="2a">Št. metov za 2 točki</option><option value="2m">Št. zadetih metov za 2 točki</option><option value="2p">% za 2 točki</option><option value="3a">Št. metov za 3 točke</option><option value="3m">Zadeti meti za 3 točke</option><option value="3p">% za 3 točke</option><option value="1a">Izvedeni prosti meti</option><option value="1m">Zadeti prosti meti</option><option value="1p">% prosti meti</option><option value="ro">Napadalni skoki</option><option value="rd">Skoki v obrambi</option><option value="to">Izg. žoge</option><option value="st">Prid. žoge</option><option value="as_to">Asistence/izg. žoge</option><option value="st_to">Prid./izg. žoge</option><option value="dd">Dvojni dvojčki</option><option value="plusminus">+/-</option></select>
		    			    <select id="33-600-filter-season" data-name="season_id" class="mbt-v2-select">
					<option value="">
						Vse sezone
					</option>
													<option value="102585" selected="selected">
								2018-2019
							</option>
													<option value="97929">
								2017-2018
							</option>
													<option value="93981">
								2016-2017
							</option>
													<option value="91067">
								2015-2016
							</option>
													<option value="89563">
								2014-2015
							</option>
													<option value="85461">
								2013-2014
							</option>
													<option value="63283">
								2012-2013
							</option>
													<option value="15433">
								2011-2012
							</option>
										</select>
									<select id="33-600-filter-stage" data-name="stage_id" class="mbt-v2-select">
				<option value="">
					Vsi deli tekmovanji
				</option>
															<option value="206897">
							1. del
						</option>
												</select>
							<select id="33-600-filter-team" data-name="team_id" class="mbt-v2-select">
					<option value="">
						Vse ekipe
					</option>
											<option value="307703">
							Ajdas Lenart
						</option>
											<option value="269283">
							Ajdovščina
						</option>
											<option value="4672567">
							Ajdovščina B
						</option>
											<option value="196043">
							Borut Besedič - Čiro
						</option>
											<option value="196223">
							Celje
						</option>
											<option value="196433">
							Cerknica
						</option>
											<option value="196343">
							Chilli Jesenice
						</option>
											<option value="196063">
							Drava U17
						</option>
											<option value="165563">
							Dravograd Koroška
						</option>
											<option value="4612373">
							ECE Triglav B
						</option>
											<option value="195943">
							Elektra Šoštanj
						</option>
											<option value="196463">
							Globus
						</option>
											<option value="269243">
							Grosuplje B
						</option>
											<option value="269253">
							Helios Suns B
						</option>
											<option value="4596641">
							Helios Suns C
						</option>
											<option value="165603">
							Hopsi Polzela
						</option>
											<option value="196353">
							Ilirija
						</option>
											<option value="196173">
							Input Nazarje
						</option>
											<option value="4619103">
							Ivančna Gorica
						</option>
											<option value="195953">
							Janče Ljubljana A
						</option>
											<option value="4619105">
							Janče Ljubljana B
						</option>
											<option value="196393">
							Ježica
						</option>
											<option value="196183">
							Keleja
						</option>
											<option value="196283">
							Kolpa
						</option>
											<option value="196373">
							Komenda
						</option>
											<option value="4612375">
							KOŠ Primorska B
						</option>
											<option value="196383">
							Krško
						</option>
											<option value="196313">
							Krvavec Botana
						</option>
											<option value="196163">
							Lastovka
						</option>
											<option value="195963">
							Litija
						</option>
											<option value="269233">
							Ljubljana B
						</option>
											<option value="269263">
							Logatec
						</option>
											<option value="196073">
							Lovrenc
						</option>
											<option value="196503">
							Mesarija Prunk
						</option>
											<option value="4596651">
							Nova Gorica mladi B
						</option>
											<option value="196253">
							Parklji B
						</option>
											<option value="195983">
							Petrol Olimpija B
						</option>
											<option value="269273">
							Pivka
						</option>
											<option value="165533">
							Portorož
						</option>
											<option value="165673">
							Postojna
						</option>
											<option value="31613">
							Radenska Creativ Sobota
						</option>
											<option value="196303">
							Radovljica
						</option>
											<option value="165713">
							Rogaška
						</option>
											<option value="269213">
							Rudar
						</option>
											<option value="196263">
							ŠD Šentvid - Ljubljana
						</option>
											<option value="4619111">
							ŠD Šentvid - Ljubljana B
						</option>
											<option value="196093">
							Šentjur Tajfun
						</option>
											<option value="4596671">
							Slovan B
						</option>
											<option value="4596551">
							Soperga
						</option>
											<option value="196493">
							Tera Tolmin
						</option>
											<option value="4646255">
							Troti
						</option>
											<option value="196103">
							Vojnik Gradbena trgovina G7
						</option>
											<option value="4596591">
							Vrani Vransko
						</option>
											<option value="196423">
							Vrhnika
						</option>
											<option value="196213">
							Zlatorog B
						</option>
									</select>
						<select id="33-600-filter-position" data-name="position" class="mbt-v2-select">
				<option value="">
					Vsa igralna mesta
				</option>
									<option value="1">
						Krilo
					</option>
									<option value="2">
						Branilec
					</option>
									<option value="3">
						Center
					</option>
									<option value="4">
						Organizator igre
					</option>
									<option value="5">
						Branilec
					</option>
									<option value="6">
						Krilo
					</option>
									<option value="7">
						Krilni center
					</option>
									<option value="8">
						Branilec/Krilo
					</option>
									<option value="9">
						Krilo/Center
					</option>
									<option value="10">
						PG/SG
					</option>
									<option value="11">
						SG/SF
					</option>
									<option value="12">
						SF/PF
					</option>
									<option value="13">
						PF/C
					</option>
							</select>
		</div>
		<div class="mbt-v2-divider"></div>
	    <div id="33-600-tab-container">	<div class="mbt-v2-divider"></div>
	<div class="mbt-v2-subheader">
		Točke
	</div>
	<div class="mbt-v2-players-stats-top-players">
					<div class="mbt-v2-players-stats-top-players-line">
				<div class="mbt-v2-grid mbt-v2-align-items-vertically">
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
							<div class="mbt-v2-col mbt-v2-col-2">
																	<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=965297&amp;version=50x70" class="mbt-v2-image" alt="Benjamin Hedl">
									
							</div>
							<div class="mbt-v2-col mbt-v2-col-7">
								<div class="mbt-v2-players-stats-top-player-category">
									#1
								</div>
								<div class="mbt-v2-players-stats-top-player-name">
									<a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1700783" season_id="102585" player_id="1700783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.241924001541234322" onlyurl="1">Benjamin Hedl</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.241924001541234322") === "object") {
                               document.getElementById("a-0.241924001541234322").href = navigatePlayer(document.getElementById('a-0.241924001541234322').getAttribute('player_id'), document.getElementById('a-0.241924001541234322').getAttribute('season_id'));
                            }
                        </script>
								</div>
								<div class="mbt-v2-players-stats-top-player-bio">
																											16 Let																	</div>
							</div>
															<div class="mbt-v2-col mbt-v2-col-3">
									<div class="mbt-v2-players-stats-top-player-team">
																					<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=717611&amp;version=50x70" class="mbt-v2-image" alt="Ajdas Lenart">
			                            									</div>	
								</div>
								
						</div>
					</div>
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6 mbt-v2-grid-end">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
															<div class="mbt-v2-col mbt-v2-col-4">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
											4
										</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Skupno<br>Tekme
										</div>
									</div>
								</div>
																	<div class="mbt-v2-col mbt-v2-col-4">
										<div class="mbt-v2-players-stats-top-players-stats">
											<div class="mbt-v2-players-stats-top-players-value">
																									179
													
											</div>
											<div class="mbt-v2-players-stats-top-players-value-desc">
												Skupno<br>
		                                         
													Točke
													
											</div>
										</div>
									</div>
									
								<div class="mbt-v2-col mbt-v2-col-4 mbt-v2-grid-end">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
																							44.75
																					</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Povprečje<br>Točke
										</div>
									</div>
								</div>
								
						</div>
					</div>
				</div>
			</div>
					<div class="mbt-v2-players-stats-top-players-line">
				<div class="mbt-v2-grid mbt-v2-align-items-vertically">
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
							<div class="mbt-v2-col mbt-v2-col-2">
																	<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=980685&amp;version=50x70" class="mbt-v2-image" alt="Nace Štiglic">
									
							</div>
							<div class="mbt-v2-col mbt-v2-col-7">
								<div class="mbt-v2-players-stats-top-player-category">
									#2
								</div>
								<div class="mbt-v2-players-stats-top-player-name">
									<a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4844931" season_id="102585" player_id="4844931" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.242218001541234322" onlyurl="1">Nace Štiglic</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.242218001541234322") === "object") {
                               document.getElementById("a-0.242218001541234322").href = navigatePlayer(document.getElementById('a-0.242218001541234322').getAttribute('player_id'), document.getElementById('a-0.242218001541234322').getAttribute('season_id'));
                            }
                        </script>
								</div>
								<div class="mbt-v2-players-stats-top-player-bio">
																											15 Let																	</div>
							</div>
															<div class="mbt-v2-col mbt-v2-col-3">
									<div class="mbt-v2-players-stats-top-player-team">
																					<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=711665&amp;version=50x70" class="mbt-v2-image" alt="Input Nazarje">
			                            									</div>	
								</div>
								
						</div>
					</div>
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6 mbt-v2-grid-end">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
															<div class="mbt-v2-col mbt-v2-col-4">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
											5
										</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Skupno<br>Tekme
										</div>
									</div>
								</div>
																	<div class="mbt-v2-col mbt-v2-col-4">
										<div class="mbt-v2-players-stats-top-players-stats">
											<div class="mbt-v2-players-stats-top-players-value">
																									187
													
											</div>
											<div class="mbt-v2-players-stats-top-players-value-desc">
												Skupno<br>
		                                         
													Točke
													
											</div>
										</div>
									</div>
									
								<div class="mbt-v2-col mbt-v2-col-4 mbt-v2-grid-end">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
																							37.40
																					</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Povprečje<br>Točke
										</div>
									</div>
								</div>
								
						</div>
					</div>
				</div>
			</div>
					<div class="mbt-v2-players-stats-top-players-line">
				<div class="mbt-v2-grid mbt-v2-align-items-vertically">
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
							<div class="mbt-v2-col mbt-v2-col-2">
																	<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=972281&amp;version=50x70" class="mbt-v2-image" alt="Tadej Štampar">
									
							</div>
							<div class="mbt-v2-col mbt-v2-col-7">
								<div class="mbt-v2-players-stats-top-player-category">
									#3
								</div>
								<div class="mbt-v2-players-stats-top-player-name">
									<a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=5475799" season_id="102585" player_id="5475799" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.242430001541234322" onlyurl="1">Tadej Štampar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.242430001541234322") === "object") {
                               document.getElementById("a-0.242430001541234322").href = navigatePlayer(document.getElementById('a-0.242430001541234322').getAttribute('player_id'), document.getElementById('a-0.242430001541234322').getAttribute('season_id'));
                            }
                        </script>
								</div>
								<div class="mbt-v2-players-stats-top-player-bio">
																											16 Let																	</div>
							</div>
															<div class="mbt-v2-col mbt-v2-col-3">
									<div class="mbt-v2-players-stats-top-player-team">
																					<img src="http://widgets.baskethotel.com/image.php?client=27&amp;id=340473&amp;version=50x70" class="mbt-v2-image" alt="Hopsi Polzela">
			                            									</div>	
								</div>
								
						</div>
					</div>
					<div class="mbt-v2-col mbt-v2-col-large-6  mbt-v2-col-medium-6 mbt-v2-col-small-6  mbt-v2-col-xsmall-6 mbt-v2-grid-end">
						<div class="mbt-v2-grid mbt-v2-align-items-vertically">
															<div class="mbt-v2-col mbt-v2-col-4">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
											5
										</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Skupno<br>Tekme
										</div>
									</div>
								</div>
																	<div class="mbt-v2-col mbt-v2-col-4">
										<div class="mbt-v2-players-stats-top-players-stats">
											<div class="mbt-v2-players-stats-top-players-value">
																									132
													
											</div>
											<div class="mbt-v2-players-stats-top-players-value-desc">
												Skupno<br>
		                                         
													Točke
													
											</div>
										</div>
									</div>
									
								<div class="mbt-v2-col mbt-v2-col-4 mbt-v2-grid-end">
									<div class="mbt-v2-players-stats-top-players-stats">
										<div class="mbt-v2-players-stats-top-players-value">
																							26.40
																					</div>
										<div class="mbt-v2-players-stats-top-players-value-desc">
											Povprečje<br>Točke
										</div>
									</div>
								</div>
								
						</div>
					</div>
				</div>
			</div>
			</div>	
		
	<div class="mbt-v2-divider"></div>
	<div id="mbt-v2-player-stats-table-averages-container" class="mbt-v2-responsive-table-container">
    
<div class=" mbt-v2-scrollable-table-container mbt-v2-scrollbar-horizontal" style="margin-left: 117px; height: 703px;"><div class="mbt-v2-scrollbar-track" style="display: block;"><div class="mbt-v2-scrollbar" style="left: 2px; width: 221px;"></div></div><div class="mbt-v2-bar-scroll-content"><div class="mbt-v2-bar-content"><table id="mbt-v2-player-stats-averages-table" class="mbt-v2-table mbt-v2-player-stats-table">
        <thead>
            <tr>
                <th style="display: none;">Št.</th>
                                                            <th style="display: none;">Igralec</th>
                                                                                                            <th>Ekipa</th>
                            
                                                                                <th>Tekme</th>
                                                                                <th>TOČ</th>
                                                                                <th>Povprečje</th>
                                                </tr>
        </thead>
        <tbody>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        1.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1700783" season_id="102585" player_id="1700783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244247001541234322" onlyurl="1">Benjamin Hedl</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244247001541234322") === "object") {
                               document.getElementById("a-0.244247001541234322").href = navigatePlayer(document.getElementById('a-0.244247001541234322').getAttribute('player_id'), document.getElementById('a-0.244247001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1700783" season_id="102585" player_id="1700783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244287001541234322" onlyurl="1">B.Hedl</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244287001541234322") === "object") {
                               document.getElementById("a-0.244287001541234322").href = navigatePlayer(document.getElementById('a-0.244287001541234322').getAttribute('player_id'), document.getElementById('a-0.244287001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=307703&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="307703" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244315001541234322" onlyurl="1">Ajdas Lenart</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244315001541234322") === "object") {
                               document.getElementById("a-0.244315001541234322").href = navigateTeam(document.getElementById('a-0.244315001541234322').getAttribute('team_id'), document.getElementById('a-0.244315001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                179
                            </td>
                                                                                                                                <td>
                                    44.75
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        2.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4844931" season_id="102585" player_id="4844931" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244428001541234322" onlyurl="1">Nace Štiglic</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244428001541234322") === "object") {
                               document.getElementById("a-0.244428001541234322").href = navigatePlayer(document.getElementById('a-0.244428001541234322').getAttribute('player_id'), document.getElementById('a-0.244428001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4844931" season_id="102585" player_id="4844931" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244456001541234322" onlyurl="1">N.Štiglic</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244456001541234322") === "object") {
                               document.getElementById("a-0.244456001541234322").href = navigatePlayer(document.getElementById('a-0.244456001541234322').getAttribute('player_id'), document.getElementById('a-0.244456001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196173&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196173" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244479001541234322" onlyurl="1">Input Nazarje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244479001541234322") === "object") {
                               document.getElementById("a-0.244479001541234322").href = navigateTeam(document.getElementById('a-0.244479001541234322').getAttribute('team_id'), document.getElementById('a-0.244479001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                5
                            </td>
                                                                                                <td>
                                187
                            </td>
                                                                                                                                <td>
                                    37.40
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        3.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=5475799" season_id="102585" player_id="5475799" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244571001541234322" onlyurl="1">Tadej Štampar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244571001541234322") === "object") {
                               document.getElementById("a-0.244571001541234322").href = navigatePlayer(document.getElementById('a-0.244571001541234322').getAttribute('player_id'), document.getElementById('a-0.244571001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=5475799" season_id="102585" player_id="5475799" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244596001541234322" onlyurl="1">T.Štampar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244596001541234322") === "object") {
                               document.getElementById("a-0.244596001541234322").href = navigatePlayer(document.getElementById('a-0.244596001541234322').getAttribute('player_id'), document.getElementById('a-0.244596001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=165603&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165603" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244617001541234322" onlyurl="1">Hopsi Polzela</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244617001541234322") === "object") {
                               document.getElementById("a-0.244617001541234322").href = navigateTeam(document.getElementById('a-0.244617001541234322').getAttribute('team_id'), document.getElementById('a-0.244617001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                5
                            </td>
                                                                                                <td>
                                132
                            </td>
                                                                                                                                <td>
                                    26.40
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        4.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4856987" season_id="102585" player_id="4856987" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244690001541234322" onlyurl="1">Luka Djuričič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244690001541234322") === "object") {
                               document.getElementById("a-0.244690001541234322").href = navigatePlayer(document.getElementById('a-0.244690001541234322').getAttribute('player_id'), document.getElementById('a-0.244690001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4856987" season_id="102585" player_id="4856987" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244714001541234322" onlyurl="1">L.Djuričič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244714001541234322") === "object") {
                               document.getElementById("a-0.244714001541234322").href = navigatePlayer(document.getElementById('a-0.244714001541234322').getAttribute('player_id'), document.getElementById('a-0.244714001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196213&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196213" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244734001541234322" onlyurl="1">Zlatorog B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244734001541234322") === "object") {
                               document.getElementById("a-0.244734001541234322").href = navigateTeam(document.getElementById('a-0.244734001541234322').getAttribute('team_id'), document.getElementById('a-0.244734001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                105
                            </td>
                                                                                                                                <td>
                                    26.25
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        5.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=5496963" season_id="102585" player_id="5496963" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244804001541234322" onlyurl="1">Jaka Nikitovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244804001541234322") === "object") {
                               document.getElementById("a-0.244804001541234322").href = navigatePlayer(document.getElementById('a-0.244804001541234322').getAttribute('player_id'), document.getElementById('a-0.244804001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=5496963" season_id="102585" player_id="5496963" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244827001541234322" onlyurl="1">J.Nikitovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244827001541234322") === "object") {
                               document.getElementById("a-0.244827001541234322").href = navigatePlayer(document.getElementById('a-0.244827001541234322').getAttribute('player_id'), document.getElementById('a-0.244827001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196463&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196463" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244847001541234322" onlyurl="1">Globus</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244847001541234322") === "object") {
                               document.getElementById("a-0.244847001541234322").href = navigateTeam(document.getElementById('a-0.244847001541234322').getAttribute('team_id'), document.getElementById('a-0.244847001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                5
                            </td>
                                                                                                <td>
                                123
                            </td>
                                                                                                                                <td>
                                    24.60
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        6.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1097303" season_id="102585" player_id="1097303" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244916001541234322" onlyurl="1">Urban Cunja</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244916001541234322") === "object") {
                               document.getElementById("a-0.244916001541234322").href = navigatePlayer(document.getElementById('a-0.244916001541234322').getAttribute('player_id'), document.getElementById('a-0.244916001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1097303" season_id="102585" player_id="1097303" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244961001541234322" onlyurl="1">U.Cunja</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244961001541234322") === "object") {
                               document.getElementById("a-0.244961001541234322").href = navigatePlayer(document.getElementById('a-0.244961001541234322').getAttribute('player_id'), document.getElementById('a-0.244961001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196163&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196163" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244982001541234322" onlyurl="1">Lastovka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244982001541234322") === "object") {
                               document.getElementById("a-0.244982001541234322").href = navigateTeam(document.getElementById('a-0.244982001541234322').getAttribute('team_id'), document.getElementById('a-0.244982001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                2
                            </td>
                                                                                                <td>
                                45
                            </td>
                                                                                                                                <td>
                                    22.50
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        7.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4953185" season_id="102585" player_id="4953185" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245073001541234322" onlyurl="1">Jani Lapanja</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245073001541234322") === "object") {
                               document.getElementById("a-0.245073001541234322").href = navigatePlayer(document.getElementById('a-0.245073001541234322').getAttribute('player_id'), document.getElementById('a-0.245073001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4953185" season_id="102585" player_id="4953185" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245098001541234322" onlyurl="1">J.Lapanja</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245098001541234322") === "object") {
                               document.getElementById("a-0.245098001541234322").href = navigatePlayer(document.getElementById('a-0.245098001541234322').getAttribute('player_id'), document.getElementById('a-0.245098001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196283&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196283" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245120001541234322" onlyurl="1">Kolpa</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245120001541234322") === "object") {
                               document.getElementById("a-0.245120001541234322").href = navigateTeam(document.getElementById('a-0.245120001541234322').getAttribute('team_id'), document.getElementById('a-0.245120001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                2
                            </td>
                                                                                                <td>
                                45
                            </td>
                                                                                                                                <td>
                                    22.50
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        8.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4672578" season_id="102585" player_id="4672578" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245323001541234322" onlyurl="1">Vladeta Kljajevič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245323001541234322") === "object") {
                               document.getElementById("a-0.245323001541234322").href = navigatePlayer(document.getElementById('a-0.245323001541234322').getAttribute('player_id'), document.getElementById('a-0.245323001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4672578" season_id="102585" player_id="4672578" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245352001541234322" onlyurl="1">V.Kljajevič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245352001541234322") === "object") {
                               document.getElementById("a-0.245352001541234322").href = navigatePlayer(document.getElementById('a-0.245352001541234322').getAttribute('player_id'), document.getElementById('a-0.245352001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=4612373&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="4612373" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245380001541234322" onlyurl="1">ECE Triglav B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245380001541234322") === "object") {
                               document.getElementById("a-0.245380001541234322").href = navigateTeam(document.getElementById('a-0.245380001541234322').getAttribute('team_id'), document.getElementById('a-0.245380001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                67
                            </td>
                                                                                                                                <td>
                                    22.33
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        9.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4702411" season_id="102585" player_id="4702411" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245470001541234322" onlyurl="1">Filip Teinovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245470001541234322") === "object") {
                               document.getElementById("a-0.245470001541234322").href = navigatePlayer(document.getElementById('a-0.245470001541234322').getAttribute('player_id'), document.getElementById('a-0.245470001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4702411" season_id="102585" player_id="4702411" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245494001541234322" onlyurl="1">F.Teinovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245494001541234322") === "object") {
                               document.getElementById("a-0.245494001541234322").href = navigatePlayer(document.getElementById('a-0.245494001541234322').getAttribute('player_id'), document.getElementById('a-0.245494001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196393&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196393" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245515001541234322" onlyurl="1">Ježica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245515001541234322") === "object") {
                               document.getElementById("a-0.245515001541234322").href = navigateTeam(document.getElementById('a-0.245515001541234322').getAttribute('team_id'), document.getElementById('a-0.245515001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                89
                            </td>
                                                                                                                                <td>
                                    22.25
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        10.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1207473" season_id="102585" player_id="1207473" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245605001541234322" onlyurl="1">Soni Ajdonik</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245605001541234322") === "object") {
                               document.getElementById("a-0.245605001541234322").href = navigatePlayer(document.getElementById('a-0.245605001541234322').getAttribute('player_id'), document.getElementById('a-0.245605001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1207473" season_id="102585" player_id="1207473" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245630001541234322" onlyurl="1">S.Ajdonik</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245630001541234322") === "object") {
                               document.getElementById("a-0.245630001541234322").href = navigatePlayer(document.getElementById('a-0.245630001541234322').getAttribute('player_id'), document.getElementById('a-0.245630001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=195963&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195963" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245657001541234322" onlyurl="1">Litija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245657001541234322") === "object") {
                               document.getElementById("a-0.245657001541234322").href = navigateTeam(document.getElementById('a-0.245657001541234322').getAttribute('team_id'), document.getElementById('a-0.245657001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                5
                            </td>
                                                                                                <td>
                                111
                            </td>
                                                                                                                                <td>
                                    22.20
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        11.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4709371" season_id="102585" player_id="4709371" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245731001541234322" onlyurl="1">Lev Žagar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245731001541234322") === "object") {
                               document.getElementById("a-0.245731001541234322").href = navigatePlayer(document.getElementById('a-0.245731001541234322').getAttribute('player_id'), document.getElementById('a-0.245731001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4709371" season_id="102585" player_id="4709371" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245754001541234322" onlyurl="1">L.Žagar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245754001541234322") === "object") {
                               document.getElementById("a-0.245754001541234322").href = navigatePlayer(document.getElementById('a-0.245754001541234322').getAttribute('player_id'), document.getElementById('a-0.245754001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=195963&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195963" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245774001541234322" onlyurl="1">Litija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245774001541234322") === "object") {
                               document.getElementById("a-0.245774001541234322").href = navigateTeam(document.getElementById('a-0.245774001541234322').getAttribute('team_id'), document.getElementById('a-0.245774001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                5
                            </td>
                                                                                                <td>
                                111
                            </td>
                                                                                                                                <td>
                                    22.20
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        12.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4855243" season_id="102585" player_id="4855243" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245842001541234322" onlyurl="1">Aljaž Sovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245842001541234322") === "object") {
                               document.getElementById("a-0.245842001541234322").href = navigatePlayer(document.getElementById('a-0.245842001541234322').getAttribute('player_id'), document.getElementById('a-0.245842001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4855243" season_id="102585" player_id="4855243" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245864001541234322" onlyurl="1">A.Sovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245864001541234322") === "object") {
                               document.getElementById("a-0.245864001541234322").href = navigatePlayer(document.getElementById('a-0.245864001541234322').getAttribute('player_id'), document.getElementById('a-0.245864001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=195943&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195943" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245884001541234322" onlyurl="1">Elektra Šoštanj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245884001541234322") === "object") {
                               document.getElementById("a-0.245884001541234322").href = navigateTeam(document.getElementById('a-0.245884001541234322').getAttribute('team_id'), document.getElementById('a-0.245884001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                85
                            </td>
                                                                                                                                <td>
                                    21.25
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        13.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1177193" season_id="102585" player_id="1177193" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245953001541234322" onlyurl="1">Matjaž Butolen</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245953001541234322") === "object") {
                               document.getElementById("a-0.245953001541234322").href = navigatePlayer(document.getElementById('a-0.245953001541234322').getAttribute('player_id'), document.getElementById('a-0.245953001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1177193" season_id="102585" player_id="1177193" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245976001541234322" onlyurl="1">M.Butolen</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245976001541234322") === "object") {
                               document.getElementById("a-0.245976001541234322").href = navigatePlayer(document.getElementById('a-0.245976001541234322').getAttribute('player_id'), document.getElementById('a-0.245976001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196063&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196063" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245995001541234322" onlyurl="1">Drava U17</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245995001541234322") === "object") {
                               document.getElementById("a-0.245995001541234322").href = navigateTeam(document.getElementById('a-0.245995001541234322').getAttribute('team_id'), document.getElementById('a-0.245995001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                5
                            </td>
                                                                                                <td>
                                106
                            </td>
                                                                                                                                <td>
                                    21.20
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        14.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1170863" season_id="102585" player_id="1170863" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246064001541234322" onlyurl="1">Tine Vidmar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246064001541234322") === "object") {
                               document.getElementById("a-0.246064001541234322").href = navigatePlayer(document.getElementById('a-0.246064001541234322').getAttribute('player_id'), document.getElementById('a-0.246064001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1170863" season_id="102585" player_id="1170863" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246086001541234322" onlyurl="1">T.Vidmar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246086001541234322") === "object") {
                               document.getElementById("a-0.246086001541234322").href = navigatePlayer(document.getElementById('a-0.246086001541234322').getAttribute('player_id'), document.getElementById('a-0.246086001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=165673&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165673" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246106001541234322" onlyurl="1">Postojna</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246106001541234322") === "object") {
                               document.getElementById("a-0.246106001541234322").href = navigateTeam(document.getElementById('a-0.246106001541234322').getAttribute('team_id'), document.getElementById('a-0.246106001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                5
                            </td>
                                                                                                <td>
                                105
                            </td>
                                                                                                                                <td>
                                    21.00
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        15.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4988789" season_id="102585" player_id="4988789" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246302001541234322" onlyurl="1">Nejc Frelih Črv</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246302001541234322") === "object") {
                               document.getElementById("a-0.246302001541234322").href = navigatePlayer(document.getElementById('a-0.246302001541234322').getAttribute('player_id'), document.getElementById('a-0.246302001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4988789" season_id="102585" player_id="4988789" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246338001541234322" onlyurl="1">N.Frelih Črv</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246338001541234322") === "object") {
                               document.getElementById("a-0.246338001541234322").href = navigatePlayer(document.getElementById('a-0.246338001541234322').getAttribute('player_id'), document.getElementById('a-0.246338001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196493&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196493" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246401001541234322" onlyurl="1">Tera Tolmin</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246401001541234322") === "object") {
                               document.getElementById("a-0.246401001541234322").href = navigateTeam(document.getElementById('a-0.246401001541234322').getAttribute('team_id'), document.getElementById('a-0.246401001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                83
                            </td>
                                                                                                                                <td>
                                    20.75
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        16.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4855369" season_id="102585" player_id="4855369" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246492001541234322" onlyurl="1">Tim Gliha</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246492001541234322") === "object") {
                               document.getElementById("a-0.246492001541234322").href = navigatePlayer(document.getElementById('a-0.246492001541234322').getAttribute('player_id'), document.getElementById('a-0.246492001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4855369" season_id="102585" player_id="4855369" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246517001541234322" onlyurl="1">T.Gliha</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246517001541234322") === "object") {
                               document.getElementById("a-0.246517001541234322").href = navigatePlayer(document.getElementById('a-0.246517001541234322').getAttribute('player_id'), document.getElementById('a-0.246517001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=195983&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195983" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246538001541234322" onlyurl="1">Petrol Olimpija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246538001541234322") === "object") {
                               document.getElementById("a-0.246538001541234322").href = navigateTeam(document.getElementById('a-0.246538001541234322').getAttribute('team_id'), document.getElementById('a-0.246538001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                62
                            </td>
                                                                                                                                <td>
                                    20.67
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        17.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4702181" season_id="102585" player_id="4702181" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246609001541234322" onlyurl="1">Nik Hozjan</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246609001541234322") === "object") {
                               document.getElementById("a-0.246609001541234322").href = navigatePlayer(document.getElementById('a-0.246609001541234322').getAttribute('player_id'), document.getElementById('a-0.246609001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4702181" season_id="102585" player_id="4702181" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246631001541234322" onlyurl="1">N.Hozjan</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246631001541234322") === "object") {
                               document.getElementById("a-0.246631001541234322").href = navigatePlayer(document.getElementById('a-0.246631001541234322').getAttribute('player_id'), document.getElementById('a-0.246631001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196373&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196373" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246652001541234322" onlyurl="1">Komenda</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246652001541234322") === "object") {
                               document.getElementById("a-0.246652001541234322").href = navigateTeam(document.getElementById('a-0.246652001541234322').getAttribute('team_id'), document.getElementById('a-0.246652001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                5
                            </td>
                                                                                                <td>
                                103
                            </td>
                                                                                                                                <td>
                                    20.60
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        18.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1178433" season_id="102585" player_id="1178433" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246723001541234322" onlyurl="1">Luka Gunzek</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246723001541234322") === "object") {
                               document.getElementById("a-0.246723001541234322").href = navigatePlayer(document.getElementById('a-0.246723001541234322').getAttribute('player_id'), document.getElementById('a-0.246723001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1178433" season_id="102585" player_id="1178433" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246745001541234322" onlyurl="1">L.Gunzek</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246745001541234322") === "object") {
                               document.getElementById("a-0.246745001541234322").href = navigatePlayer(document.getElementById('a-0.246745001541234322').getAttribute('player_id'), document.getElementById('a-0.246745001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196093&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196093" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246765001541234322" onlyurl="1">Šentjur Tajfun</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246765001541234322") === "object") {
                               document.getElementById("a-0.246765001541234322").href = navigateTeam(document.getElementById('a-0.246765001541234322').getAttribute('team_id'), document.getElementById('a-0.246765001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                60
                            </td>
                                                                                                                                <td>
                                    20.00
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        19.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1099553" season_id="102585" player_id="1099553" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246834001541234322" onlyurl="1">Aljaž Škof</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246834001541234322") === "object") {
                               document.getElementById("a-0.246834001541234322").href = navigatePlayer(document.getElementById('a-0.246834001541234322').getAttribute('player_id'), document.getElementById('a-0.246834001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1099553" season_id="102585" player_id="1099553" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246856001541234322" onlyurl="1">A.Škof</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246856001541234322") === "object") {
                               document.getElementById("a-0.246856001541234322").href = navigatePlayer(document.getElementById('a-0.246856001541234322').getAttribute('player_id'), document.getElementById('a-0.246856001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196353&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196353" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246876001541234322" onlyurl="1">Ilirija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246876001541234322") === "object") {
                               document.getElementById("a-0.246876001541234322").href = navigateTeam(document.getElementById('a-0.246876001541234322').getAttribute('team_id'), document.getElementById('a-0.246876001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                3
                            </td>
                                                                                                <td>
                                60
                            </td>
                                                                                                                                <td>
                                    20.00
                                </td>
                                                                            
                </tr>
                            <tr style="height: 33px;">
                    <td style="display: none;">
                        20.
                    </td>
                                                                        <td style="display: none;">
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4697111" season_id="102585" player_id="4697111" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246981001541234322" onlyurl="1">Jurij Čop</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246981001541234322") === "object") {
                               document.getElementById("a-0.246981001541234322").href = navigatePlayer(document.getElementById('a-0.246981001541234322').getAttribute('player_id'), document.getElementById('a-0.246981001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4697111" season_id="102585" player_id="4697111" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.247010001541234322" onlyurl="1">J.Čop</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.247010001541234322") === "object") {
                               document.getElementById("a-0.247010001541234322").href = navigatePlayer(document.getElementById('a-0.247010001541234322').getAttribute('player_id'), document.getElementById('a-0.247010001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td>
                                                                                                                                <td>
                                                                            <a href="http://www.kzs.si/incl?id=967&amp;team_id=196303&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196303" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.247073001541234322" onlyurl="1">Radovljica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.247073001541234322") === "object") {
                               document.getElementById("a-0.247073001541234322").href = navigateTeam(document.getElementById('a-0.247073001541234322').getAttribute('team_id'), document.getElementById('a-0.247073001541234322').getAttribute('season_id'));
                            }
                        </script>
                                                                    </td>
                                
                                                                                                <td>
                                4
                            </td>
                                                                                                <td>
                                79
                            </td>
                                                                                                                                <td>
                                    19.75
                                </td>
                                                                            
                </tr>
                    </tbody>
    </table></div></div></div><div class=" mbt-v2-pinned-table-container"><table class="mbt-v2-table mbt-v2-player-stats-table"><thead><tr style="height: 42px;"><th>Št.</th><th>Igralec</th></tr></thead><tbody><tr style="height: 33px;"><td>
                        1.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1700783" season_id="102585" player_id="1700783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244247001541234322" onlyurl="1">Benjamin Hedl</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244247001541234322") === "object") {
                               document.getElementById("a-0.244247001541234322").href = navigatePlayer(document.getElementById('a-0.244247001541234322').getAttribute('player_id'), document.getElementById('a-0.244247001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1700783" season_id="102585" player_id="1700783" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244287001541234322" onlyurl="1">B.Hedl</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244287001541234322") === "object") {
                               document.getElementById("a-0.244287001541234322").href = navigatePlayer(document.getElementById('a-0.244287001541234322').getAttribute('player_id'), document.getElementById('a-0.244287001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        2.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4844931" season_id="102585" player_id="4844931" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244428001541234322" onlyurl="1">Nace Štiglic</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244428001541234322") === "object") {
                               document.getElementById("a-0.244428001541234322").href = navigatePlayer(document.getElementById('a-0.244428001541234322').getAttribute('player_id'), document.getElementById('a-0.244428001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4844931" season_id="102585" player_id="4844931" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244456001541234322" onlyurl="1">N.Štiglic</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244456001541234322") === "object") {
                               document.getElementById("a-0.244456001541234322").href = navigatePlayer(document.getElementById('a-0.244456001541234322').getAttribute('player_id'), document.getElementById('a-0.244456001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        3.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=5475799" season_id="102585" player_id="5475799" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244571001541234322" onlyurl="1">Tadej Štampar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244571001541234322") === "object") {
                               document.getElementById("a-0.244571001541234322").href = navigatePlayer(document.getElementById('a-0.244571001541234322').getAttribute('player_id'), document.getElementById('a-0.244571001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=5475799" season_id="102585" player_id="5475799" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244596001541234322" onlyurl="1">T.Štampar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244596001541234322") === "object") {
                               document.getElementById("a-0.244596001541234322").href = navigatePlayer(document.getElementById('a-0.244596001541234322').getAttribute('player_id'), document.getElementById('a-0.244596001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        4.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4856987" season_id="102585" player_id="4856987" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244690001541234322" onlyurl="1">Luka Djuričič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244690001541234322") === "object") {
                               document.getElementById("a-0.244690001541234322").href = navigatePlayer(document.getElementById('a-0.244690001541234322').getAttribute('player_id'), document.getElementById('a-0.244690001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4856987" season_id="102585" player_id="4856987" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244714001541234322" onlyurl="1">L.Djuričič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244714001541234322") === "object") {
                               document.getElementById("a-0.244714001541234322").href = navigatePlayer(document.getElementById('a-0.244714001541234322').getAttribute('player_id'), document.getElementById('a-0.244714001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        5.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=5496963" season_id="102585" player_id="5496963" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244804001541234322" onlyurl="1">Jaka Nikitovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244804001541234322") === "object") {
                               document.getElementById("a-0.244804001541234322").href = navigatePlayer(document.getElementById('a-0.244804001541234322').getAttribute('player_id'), document.getElementById('a-0.244804001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=5496963" season_id="102585" player_id="5496963" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244827001541234322" onlyurl="1">J.Nikitovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244827001541234322") === "object") {
                               document.getElementById("a-0.244827001541234322").href = navigatePlayer(document.getElementById('a-0.244827001541234322').getAttribute('player_id'), document.getElementById('a-0.244827001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        6.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1097303" season_id="102585" player_id="1097303" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244916001541234322" onlyurl="1">Urban Cunja</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244916001541234322") === "object") {
                               document.getElementById("a-0.244916001541234322").href = navigatePlayer(document.getElementById('a-0.244916001541234322').getAttribute('player_id'), document.getElementById('a-0.244916001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1097303" season_id="102585" player_id="1097303" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.244961001541234322" onlyurl="1">U.Cunja</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.244961001541234322") === "object") {
                               document.getElementById("a-0.244961001541234322").href = navigatePlayer(document.getElementById('a-0.244961001541234322').getAttribute('player_id'), document.getElementById('a-0.244961001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        7.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4953185" season_id="102585" player_id="4953185" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245073001541234322" onlyurl="1">Jani Lapanja</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245073001541234322") === "object") {
                               document.getElementById("a-0.245073001541234322").href = navigatePlayer(document.getElementById('a-0.245073001541234322').getAttribute('player_id'), document.getElementById('a-0.245073001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4953185" season_id="102585" player_id="4953185" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245098001541234322" onlyurl="1">J.Lapanja</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245098001541234322") === "object") {
                               document.getElementById("a-0.245098001541234322").href = navigatePlayer(document.getElementById('a-0.245098001541234322').getAttribute('player_id'), document.getElementById('a-0.245098001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        8.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4672578" season_id="102585" player_id="4672578" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245323001541234322" onlyurl="1">Vladeta Kljajevič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245323001541234322") === "object") {
                               document.getElementById("a-0.245323001541234322").href = navigatePlayer(document.getElementById('a-0.245323001541234322').getAttribute('player_id'), document.getElementById('a-0.245323001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4672578" season_id="102585" player_id="4672578" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245352001541234322" onlyurl="1">V.Kljajevič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245352001541234322") === "object") {
                               document.getElementById("a-0.245352001541234322").href = navigatePlayer(document.getElementById('a-0.245352001541234322').getAttribute('player_id'), document.getElementById('a-0.245352001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        9.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4702411" season_id="102585" player_id="4702411" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245470001541234322" onlyurl="1">Filip Teinovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245470001541234322") === "object") {
                               document.getElementById("a-0.245470001541234322").href = navigatePlayer(document.getElementById('a-0.245470001541234322').getAttribute('player_id'), document.getElementById('a-0.245470001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4702411" season_id="102585" player_id="4702411" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245494001541234322" onlyurl="1">F.Teinovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245494001541234322") === "object") {
                               document.getElementById("a-0.245494001541234322").href = navigatePlayer(document.getElementById('a-0.245494001541234322').getAttribute('player_id'), document.getElementById('a-0.245494001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        10.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1207473" season_id="102585" player_id="1207473" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245605001541234322" onlyurl="1">Soni Ajdonik</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245605001541234322") === "object") {
                               document.getElementById("a-0.245605001541234322").href = navigatePlayer(document.getElementById('a-0.245605001541234322').getAttribute('player_id'), document.getElementById('a-0.245605001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1207473" season_id="102585" player_id="1207473" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245630001541234322" onlyurl="1">S.Ajdonik</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245630001541234322") === "object") {
                               document.getElementById("a-0.245630001541234322").href = navigatePlayer(document.getElementById('a-0.245630001541234322').getAttribute('player_id'), document.getElementById('a-0.245630001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        11.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4709371" season_id="102585" player_id="4709371" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245731001541234322" onlyurl="1">Lev Žagar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245731001541234322") === "object") {
                               document.getElementById("a-0.245731001541234322").href = navigatePlayer(document.getElementById('a-0.245731001541234322').getAttribute('player_id'), document.getElementById('a-0.245731001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4709371" season_id="102585" player_id="4709371" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245754001541234322" onlyurl="1">L.Žagar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245754001541234322") === "object") {
                               document.getElementById("a-0.245754001541234322").href = navigatePlayer(document.getElementById('a-0.245754001541234322').getAttribute('player_id'), document.getElementById('a-0.245754001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        12.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4855243" season_id="102585" player_id="4855243" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245842001541234322" onlyurl="1">Aljaž Sovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245842001541234322") === "object") {
                               document.getElementById("a-0.245842001541234322").href = navigatePlayer(document.getElementById('a-0.245842001541234322').getAttribute('player_id'), document.getElementById('a-0.245842001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4855243" season_id="102585" player_id="4855243" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245864001541234322" onlyurl="1">A.Sovič</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245864001541234322") === "object") {
                               document.getElementById("a-0.245864001541234322").href = navigatePlayer(document.getElementById('a-0.245864001541234322').getAttribute('player_id'), document.getElementById('a-0.245864001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        13.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1177193" season_id="102585" player_id="1177193" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245953001541234322" onlyurl="1">Matjaž Butolen</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245953001541234322") === "object") {
                               document.getElementById("a-0.245953001541234322").href = navigatePlayer(document.getElementById('a-0.245953001541234322').getAttribute('player_id'), document.getElementById('a-0.245953001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1177193" season_id="102585" player_id="1177193" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.245976001541234322" onlyurl="1">M.Butolen</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.245976001541234322") === "object") {
                               document.getElementById("a-0.245976001541234322").href = navigatePlayer(document.getElementById('a-0.245976001541234322').getAttribute('player_id'), document.getElementById('a-0.245976001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        14.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1170863" season_id="102585" player_id="1170863" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246064001541234322" onlyurl="1">Tine Vidmar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246064001541234322") === "object") {
                               document.getElementById("a-0.246064001541234322").href = navigatePlayer(document.getElementById('a-0.246064001541234322').getAttribute('player_id'), document.getElementById('a-0.246064001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1170863" season_id="102585" player_id="1170863" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246086001541234322" onlyurl="1">T.Vidmar</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246086001541234322") === "object") {
                               document.getElementById("a-0.246086001541234322").href = navigatePlayer(document.getElementById('a-0.246086001541234322').getAttribute('player_id'), document.getElementById('a-0.246086001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        15.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4988789" season_id="102585" player_id="4988789" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246302001541234322" onlyurl="1">Nejc Frelih Črv</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246302001541234322") === "object") {
                               document.getElementById("a-0.246302001541234322").href = navigatePlayer(document.getElementById('a-0.246302001541234322').getAttribute('player_id'), document.getElementById('a-0.246302001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4988789" season_id="102585" player_id="4988789" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246338001541234322" onlyurl="1">N.Frelih Črv</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246338001541234322") === "object") {
                               document.getElementById("a-0.246338001541234322").href = navigatePlayer(document.getElementById('a-0.246338001541234322').getAttribute('player_id'), document.getElementById('a-0.246338001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        16.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4855369" season_id="102585" player_id="4855369" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246492001541234322" onlyurl="1">Tim Gliha</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246492001541234322") === "object") {
                               document.getElementById("a-0.246492001541234322").href = navigatePlayer(document.getElementById('a-0.246492001541234322').getAttribute('player_id'), document.getElementById('a-0.246492001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4855369" season_id="102585" player_id="4855369" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246517001541234322" onlyurl="1">T.Gliha</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246517001541234322") === "object") {
                               document.getElementById("a-0.246517001541234322").href = navigatePlayer(document.getElementById('a-0.246517001541234322').getAttribute('player_id'), document.getElementById('a-0.246517001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        17.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4702181" season_id="102585" player_id="4702181" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246609001541234322" onlyurl="1">Nik Hozjan</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246609001541234322") === "object") {
                               document.getElementById("a-0.246609001541234322").href = navigatePlayer(document.getElementById('a-0.246609001541234322').getAttribute('player_id'), document.getElementById('a-0.246609001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4702181" season_id="102585" player_id="4702181" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246631001541234322" onlyurl="1">N.Hozjan</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246631001541234322") === "object") {
                               document.getElementById("a-0.246631001541234322").href = navigatePlayer(document.getElementById('a-0.246631001541234322').getAttribute('player_id'), document.getElementById('a-0.246631001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        18.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1178433" season_id="102585" player_id="1178433" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246723001541234322" onlyurl="1">Luka Gunzek</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246723001541234322") === "object") {
                               document.getElementById("a-0.246723001541234322").href = navigatePlayer(document.getElementById('a-0.246723001541234322').getAttribute('player_id'), document.getElementById('a-0.246723001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1178433" season_id="102585" player_id="1178433" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246745001541234322" onlyurl="1">L.Gunzek</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246745001541234322") === "object") {
                               document.getElementById("a-0.246745001541234322").href = navigatePlayer(document.getElementById('a-0.246745001541234322').getAttribute('player_id'), document.getElementById('a-0.246745001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        19.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1099553" season_id="102585" player_id="1099553" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246834001541234322" onlyurl="1">Aljaž Škof</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246834001541234322") === "object") {
                               document.getElementById("a-0.246834001541234322").href = navigatePlayer(document.getElementById('a-0.246834001541234322').getAttribute('player_id'), document.getElementById('a-0.246834001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=1099553" season_id="102585" player_id="1099553" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246856001541234322" onlyurl="1">A.Škof</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246856001541234322") === "object") {
                               document.getElementById("a-0.246856001541234322").href = navigatePlayer(document.getElementById('a-0.246856001541234322').getAttribute('player_id'), document.getElementById('a-0.246856001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr><tr style="height: 33px;"><td>
                        20.
                    </td><td>
                                <div class="mbt-v2-hidden-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4697111" season_id="102585" player_id="4697111" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.246981001541234322" onlyurl="1">Jurij Čop</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.246981001541234322") === "object") {
                               document.getElementById("a-0.246981001541234322").href = navigatePlayer(document.getElementById('a-0.246981001541234322').getAttribute('player_id'), document.getElementById('a-0.246981001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                                <div class="mbt-v2-visible-xsmall">
                                    <a href="http://www.kzs.si/incl?id=968&amp;season_id=102585&amp;league_id=undefined&amp;player_id=4697111" season_id="102585" player_id="4697111" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.247010001541234322" onlyurl="1">J.Čop</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.247010001541234322") === "object") {
                               document.getElementById("a-0.247010001541234322").href = navigatePlayer(document.getElementById('a-0.247010001541234322').getAttribute('player_id'), document.getElementById('a-0.247010001541234322').getAttribute('season_id'));
                            }
                        </script>
                                </div> 
                            </td></tr></tbody></table></div></div>

	<div class="mbt-v2-divider"></div>
	<div class="mbt-v2-grid">
		<div class="mbt-v2-col mbt-v2-col-12">
			<ul class="mbt-v2-pagination">
																			<li class="mbt-v2-pagination-active">
																<span>
							1
						</span>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-2">
							2
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-3">
							3
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-4">
							4
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-5">
							5
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-6">
							6
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-7">
							7
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-8">
							8
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-9">
							9
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-600-page-10">
							10
						</a>
										</li>
													<li class="mbt-v2-pagination-next">
						<a href="#" onclick="return false;" id="33-600-page-next">
							❯ 
						</a>
					</li>
							</ul>
		</div>
	</div>

<script type="text/javascript">
//<![CDATA[

	var namespace = MBT.API.SafeNames.Container('33-600');
	
	namespace.onPageClick = function(e, page) {

		namespace.params.page = page;
		
		new MBT.API.Widgets.Widget({
			widgetId: 600,
			container: '33-600-tab-container',
			state: 'MTk0Mzg1MTAyM2E6MTU6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM1MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7czoxOToidXNlX2FkdmFuY2VkX2ZpbHRlciI7czo0OiJ0cnVlIjtzOjY6ImZpbHRlciI7YTo1OntzOjg6InN0YXRfY2F0IjtzOjM6InB0cyI7czo5OiJzZWFzb25faWQiO3M6NjoiMTAyNTg1IjtzOjg6InN0YWdlX2lkIjtzOjA6IiI7czo3OiJ0ZWFtX2lkIjtzOjA6IiI7czo4OiJwb3NpdGlvbiI7czowOiIiO31zOjQ6InBhZ2UiO3M6MToiMCI7fQ==',
			params: namespace.params
		}).renderPartial(namespace.partial);
	}

																	MBT.API.Event.observe('33-600-page-2', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [2], 1)); 
												MBT.API.Event.observe('33-600-page-3', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [3], 1)); 
												MBT.API.Event.observe('33-600-page-4', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [4], 1)); 
												MBT.API.Event.observe('33-600-page-5', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [5], 1)); 
												MBT.API.Event.observe('33-600-page-6', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [6], 1)); 
												MBT.API.Event.observe('33-600-page-7', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [7], 1)); 
												MBT.API.Event.observe('33-600-page-8', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [8], 1)); 
												MBT.API.Event.observe('33-600-page-9', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [9], 1)); 
												MBT.API.Event.observe('33-600-page-10', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [10], 1)); 
										MBT.API.Event.observe('33-600-page-next', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [2], 1)); 
			//]]>
</script>
    <p class="mbt-v2-info-text">
        Igralec je uvrščen v to kategorijo, če je igral na najmanj 50% tekmah
    </p>
   

<script type="text/javascript">
//<![CDATA[

    new MBT.API.responsiveTable ({
        table: 'mbt-v2-player-stats-averages-table',
        tablesContainer: 'mbt-v2-player-stats-table-averages-container',
        columnsToPin: 2
    }).watchTable();

//]]>
</script></div>
	</div>
</div>

<script type="text/javascript">
//<![CDATA[
	
	var namespace = MBT.API.SafeNames.Container('33-600');

	namespace.mobileMenu = new MBT.API.createResponsiveNavigation({
		menuContainer : "33-600-mbt-v2-navigation",
		mobileMenuContainer : "33-600-mobile-menu",
		mobileMenuCloseText: "Izberi",
	});

	namespace.mobileFilters = new MBT.API.createResponsiveNavigation({
		menuContainer : "33-600-filters-block",
		mobileMenuContainer : "33-600-mobile-filters-block",
		filtersMode: true
	});

	namespace.params = {};

	namespace.params.use_advanced_filter = true;

	namespace.params.filter = {};

	namespace.availableFilters = MBT.API.get('33-600-filters-block').childNodes;

	for(key in namespace.availableFilters) {
		if(namespace.availableFilters[key].nodeType == 1) {
			namespace.params.filter[namespace.availableFilters[key].getAttribute('data-name')] = namespace.availableFilters[key].value;
		}
	}

	namespace.onFilterChange = function(e, filter) {

		namespace.params.filter[filter] = e.target.value;

		namespace.params.page = 0;

		if(filter == 'season_id' || filter == 'stage_id') {
			if(namespace.params.filter.team_id) {
				delete namespace.params.filter.team_id;
				if(filter == 'season_id') {
					delete namespace.params.filter.stage_id;
				}
				new MBT.API.Widgets.Widget({
					widgetId: 600,
					container: '33-600-filter-team',
					state: 'MzAwOTY3NzE5NmE6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM1MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
					params: {
						season_id: namespace.params.filter.season_id,
						stage_id: namespace.params.filter.stage_id
					}
				}).renderPartial('get-teams');
			}

			if(filter != 'stage_id') {
				new MBT.API.Widgets.Widget({
					widgetId: 600,
					container: '33-600-filter-stage',
					state: 'MzAwOTY3NzE5NmE6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM1MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
					params: {
						season_id: namespace.params.filter.season_id
					}
				}).renderPartial('get-stages');
			}
		}

		new MBT.API.Widgets.Widget({
			widgetId: 600,
			container: '33-600-tab-container',
			state: 'MzAwOTY3NzE5NmE6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM1MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
			params: namespace.params
		}).renderPartial(namespace.partial);
	}

	namespace.onTabClick = function(tabPanel, index, part) {

		namespace.params.page = 0;

		for(key in namespace.availableFilters) {
			if(namespace.availableFilters[key].nodeType == 1) {
				if(namespace.availableFilters[key].getAttribute('data-name') == 'season_id') {
					if(namespace.availableFilters[key].options[0].value == "") {
						namespace.availableFilters[key].selectedIndex = 1;
						namespace.params.filter.season_id = namespace.availableFilters[key].options[1].value;
					} else {
					    namespace.availableFilters['key'].selectedIndex = 1;
					    namespace.params.filter.season_id = namespace.availableFilters[key].options[1].value;
					}
				} else {
					namespace.availableFilters[key].selectedIndex =0;
					namespace.params.filter[namespace.availableFilters[key].getAttribute('data-name')] = namespace.availableFilters[key].options[0].value;
				}
			}
		}

		namespace.partial = part;

		new MBT.API.Widgets.Widget({
				widgetId: 600,
				container: '33-600-filter-stats',
				state: 'MzAwOTY3NzE5NmE6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM1MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
				params: {
					tab: part
				}
			}).renderPartial('get-stat-categories');

		new MBT.API.Widgets.Widget({
			widgetId: 600,
			container: '33-600-tab-container',
			state: 'MzAwOTY3NzE5NmE6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM1MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
			params: namespace.params
		}).renderPartial(namespace.partial);
	}

	namespace.tabs = [];

	namespace.menuItems = MBT.API.get('33-600-mbt-v2-navigation').childNodes;

	for(var i = 0; i <  namespace.menuItems.length; i++) {
        if(namespace.menuItems[i].nodeType == 1) {
        	namespace.tabs.push({
        		tabId: namespace.menuItems[i].id,
        		needLoad: MBT.API.Function.createDelegate(namespace.onTabClick, null, namespace.menuItems[i].getAttribute('data-name'), 2),
        	});
        }
	}

	namespace.TabController = new MBT.API.UI.TabPanel({
		container: '33-600-tab-container',
		tabClass: 'mbt-v2-navigation-tab',
        activeTabClass: 'mbt-v2-navigation-tab-active',
        tabs: namespace.tabs,
        noCache: true,
		activeTab: 0
	});

	namespace.TabController.activeTab = 0;

	switch (namespace.TabController.activeTab) {
		case 0:
			namespace.partial = 'averages';
			break;
		case 1:
			namespace.partial = 'highs';
			break;
	    case 2:
			namespace.partial = 'totals';
			break;
		case 3:
			namespace.partial = '40min';
			break;
	}

	MBT.API.Event.observe('33-600-filter-season', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['season_id'], 1));
	MBT.API.Event.observe('33-600-filter-stats', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['stat_cat'], 1));
	MBT.API.Event.observe('33-600-filter-month', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['month_id'], 1));
	MBT.API.Event.observe('33-600-filter-stage', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['stage_id'], 1));
	MBT.API.Event.observe('33-600-filter-team', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['team_id'], 1));
	MBT.API.Event.observe('33-600-filter-position', "change", MBT.API.Function.createDelegate(namespace.onFilterChange, null, ['position'], 1));

	

	//]]>
</script></div>
</div>
<div class="container">
	<div id="stats-team" mbt_widget="601"><div id="mbt-v2-teams-stats" class="mbt-v2-widget">
	<div class="mbt-v2-header">
					Statistika
			
	</div>
	<div class="mbt-v2-widget-content">
					<div id="33-601-mobile-menu" class="mbt-v2-mobile-menu">
				Povprečje
			</div>
			<nav id="33-601-mbt-v2-navigation" class="mbt-v2-navigation">
				<div id="33-601-tab-0" data-name="averages" class="mbt-v2-navigation-tab-active" prevclassname="mbt-v2-navigation-tab-active">
					Povprečje
				</div>
				<div id="33-601-tab-1" data-name="highs" class="mbt-v2-navigation-tab">
					Največ
				</div>
				<div id="33-601-tab-2" data-name="totals" class="mbt-v2-navigation-tab">
					Skupno
				</div>
			</nav>
			<div class="mbt-v2-divider"></div>
			
		<div id="33-601-filters-block" class="mbt-v2-filters-block_">
			<select id="33-601-category-selector" class="mbt-v2-select" data-name="stat_cat">
									<option value="pts" selected="selected">
						Točke
					</option>
									<option value="rt">
						Skoki
					</option>
									<option value="eq">
						Valorizacija
					</option>
									<option value="as">
						Asistence
					</option>
									<option value="2a">
						Št. metov za 2 točki
					</option>
									<option value="2m">
						Št. zadetih metov za 2 točki
					</option>
									<option value="2p">
						% za 2 točki
					</option>
									<option value="3a">
						Št. metov za 3 točke
					</option>
									<option value="3m">
						Zadeti meti za 3 točke
					</option>
									<option value="3p">
						% za 3 točke
					</option>
									<option value="1a">
						Izvedeni prosti meti
					</option>
									<option value="1m">
						Zadeti prosti meti
					</option>
									<option value="1p">
						% prosti meti
					</option>
									<option value="ro">
						Napadalni skoki
					</option>
									<option value="rd">
						Skoki v obrambi
					</option>
									<option value="to">
						Izg. žoge
					</option>
									<option value="st">
						Prid. žoge
					</option>
									<option value="as_to">
						Asistence/izg. žoge
					</option>
									<option value="st_to">
						Prid./izg. žoge
					</option>
									<option value="attnd">
						Gledalcev
					</option>
							</select>
							<select id="33-601-season-selector" class="mbt-v2-select" data-name="season_id">
				    <option value="">Vse sezone</option>
	                    		                    <option value="102585" selected="selected">
			                    2018-2019
		                    </option>
		                		                    <option value="97929">
			                    2017-2018
		                    </option>
		                		                    <option value="93981">
			                    2016-2017
		                    </option>
		                		                    <option value="91067">
			                    2015-2016
		                    </option>
		                		                    <option value="89563">
			                    2014-2015
		                    </option>
		                		                    <option value="85461">
			                    2013-2014
		                    </option>
		                		                    <option value="63283">
			                    2012-2013
		                    </option>
		                		                    <option value="15433">
			                    2011-2012
		                    </option>
		                 
				</select>
						<select id="33-601-stage-selector" class="mbt-v2-select" data-name="stage_id">
				<option value="">
					Vsi deli tekmovanja
				</option>
									<option value="206897">
						1. del
					</option>
							</select> 
		</div>
		<div class="mbt-v2-divider"></div>
		<div id="33-601-tab-container">	<div id="mbt-v2-teams-stats-table-averages-container" class="mbt-v2-responsive-table-container">
	
<div class=" mbt-v2-scrollable-table-container mbt-v2-scrollbar-horizontal" style="margin-left: 212px; height: 703px;"><div class="mbt-v2-scrollbar-track" style="display: block;"><div class="mbt-v2-scrollbar" style="left: 2px; width: 139px;"></div></div><div class="mbt-v2-bar-scroll-content"><div class="mbt-v2-bar-content"><table id="mbt-v2-teams-stats-averages-table" class="mbt-v2-table mbt-v2-teams-stats-table">
		<thead>
			<tr>
				<th style="display: none;">
					Št.
				</th>
				                                            <th style="display: none;">
	                        Ekipa
                        </th>
                                                                                <th>
	                        Tekme
	                    </th>
                                                                                <th>
	                        TOČ
                        </th>
                                                                                <th>
	                        Povprečje
                        </th>
                                    			</tr>
		</thead>
		<tbody>
							<tr style="height: 33px;">
					<td style="display: none;">
						1.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196353&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196353" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.685718001541234321" onlyurl="1">Ilirija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.685718001541234321") === "object") {
                               document.getElementById("a-0.685718001541234321").href = navigateTeam(document.getElementById('a-0.685718001541234321').getAttribute('team_id'), document.getElementById('a-0.685718001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        525
		                    </td>
	                    	                	                    	                        	                            <td>
		                            105.00
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						2.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=195953&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195953" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.685885001541234321" onlyurl="1">Janče Ljubljana A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.685885001541234321") === "object") {
                               document.getElementById("a-0.685885001541234321").href = navigateTeam(document.getElementById('a-0.685885001541234321').getAttribute('team_id'), document.getElementById('a-0.685885001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        517
		                    </td>
	                    	                	                    	                        	                            <td>
		                            103.40
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						3.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=195983&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195983" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686009001541234321" onlyurl="1">Petrol Olimpija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686009001541234321") === "object") {
                               document.getElementById("a-0.686009001541234321").href = navigateTeam(document.getElementById('a-0.686009001541234321').getAttribute('team_id'), document.getElementById('a-0.686009001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        510
		                    </td>
	                    	                	                    	                        	                            <td>
		                            102.00
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						4.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=307703&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="307703" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686120001541234321" onlyurl="1">Ajdas Lenart</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686120001541234321") === "object") {
                               document.getElementById("a-0.686120001541234321").href = navigateTeam(document.getElementById('a-0.686120001541234321').getAttribute('team_id'), document.getElementById('a-0.686120001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        372
		                    </td>
	                    	                	                    	                        	                            <td>
		                            93.00
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						5.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=195943&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195943" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686224001541234321" onlyurl="1">Elektra Šoštanj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686224001541234321") === "object") {
                               document.getElementById("a-0.686224001541234321").href = navigateTeam(document.getElementById('a-0.686224001541234321').getAttribute('team_id'), document.getElementById('a-0.686224001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        348
		                    </td>
	                    	                	                    	                        	                            <td>
		                            87.00
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						6.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196103&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196103" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686326001541234321" onlyurl="1">Vojnik Gradbena trgovina G7</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686326001541234321") === "object") {
                               document.getElementById("a-0.686326001541234321").href = navigateTeam(document.getElementById('a-0.686326001541234321').getAttribute('team_id'), document.getElementById('a-0.686326001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        419
		                    </td>
	                    	                	                    	                        	                            <td>
		                            83.80
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						7.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196063&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196063" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686429001541234321" onlyurl="1">Drava U17</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686429001541234321") === "object") {
                               document.getElementById("a-0.686429001541234321").href = navigateTeam(document.getElementById('a-0.686429001541234321').getAttribute('team_id'), document.getElementById('a-0.686429001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        416
		                    </td>
	                    	                	                    	                        	                            <td>
		                            83.20
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						8.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196503&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196503" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686529001541234321" onlyurl="1">Mesarija Prunk</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686529001541234321") === "object") {
                               document.getElementById("a-0.686529001541234321").href = navigateTeam(document.getElementById('a-0.686529001541234321').getAttribute('team_id'), document.getElementById('a-0.686529001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        3
		                    </td>
	                    	                	                    	                        <td>
		                        249
		                    </td>
	                    	                	                    	                        	                            <td>
		                            83.00
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						9.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=165713&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686628001541234321" onlyurl="1">Rogaška</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686628001541234321") === "object") {
                               document.getElementById("a-0.686628001541234321").href = navigateTeam(document.getElementById('a-0.686628001541234321').getAttribute('team_id'), document.getElementById('a-0.686628001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        414
		                    </td>
	                    	                	                    	                        	                            <td>
		                            82.80
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						10.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196393&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196393" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686727001541234321" onlyurl="1">Ježica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686727001541234321") === "object") {
                               document.getElementById("a-0.686727001541234321").href = navigateTeam(document.getElementById('a-0.686727001541234321').getAttribute('team_id'), document.getElementById('a-0.686727001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        393
		                    </td>
	                    	                	                    	                        	                            <td>
		                            78.60
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						11.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196213&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196213" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686827001541234321" onlyurl="1">Zlatorog B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686827001541234321") === "object") {
                               document.getElementById("a-0.686827001541234321").href = navigateTeam(document.getElementById('a-0.686827001541234321').getAttribute('team_id'), document.getElementById('a-0.686827001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        313
		                    </td>
	                    	                	                    	                        	                            <td>
		                            78.25
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						12.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=165603&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165603" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686927001541234321" onlyurl="1">Hopsi Polzela</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686927001541234321") === "object") {
                               document.getElementById("a-0.686927001541234321").href = navigateTeam(document.getElementById('a-0.686927001541234321').getAttribute('team_id'), document.getElementById('a-0.686927001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        390
		                    </td>
	                    	                	                    	                        	                            <td>
		                            78.00
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						13.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196173&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196173" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687034001541234321" onlyurl="1">Input Nazarje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687034001541234321") === "object") {
                               document.getElementById("a-0.687034001541234321").href = navigateTeam(document.getElementById('a-0.687034001541234321').getAttribute('team_id'), document.getElementById('a-0.687034001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        380
		                    </td>
	                    	                	                    	                        	                            <td>
		                            76.00
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						14.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=165563&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165563" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687189001541234321" onlyurl="1">Dravograd Koroška</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687189001541234321") === "object") {
                               document.getElementById("a-0.687189001541234321").href = navigateTeam(document.getElementById('a-0.687189001541234321').getAttribute('team_id'), document.getElementById('a-0.687189001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        301
		                    </td>
	                    	                	                    	                        	                            <td>
		                            75.25
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						15.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=269273&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269273" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687294001541234321" onlyurl="1">Pivka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687294001541234321") === "object") {
                               document.getElementById("a-0.687294001541234321").href = navigateTeam(document.getElementById('a-0.687294001541234321').getAttribute('team_id'), document.getElementById('a-0.687294001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        3
		                    </td>
	                    	                	                    	                        <td>
		                        225
		                    </td>
	                    	                	                    	                        	                            <td>
		                            75.00
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						16.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196223&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196223" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687394001541234321" onlyurl="1">Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687394001541234321") === "object") {
                               document.getElementById("a-0.687394001541234321").href = navigateTeam(document.getElementById('a-0.687394001541234321').getAttribute('team_id'), document.getElementById('a-0.687394001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        368
		                    </td>
	                    	                	                    	                        	                            <td>
		                            73.60
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						17.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196493&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196493" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687496001541234321" onlyurl="1">Tera Tolmin</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687496001541234321") === "object") {
                               document.getElementById("a-0.687496001541234321").href = navigateTeam(document.getElementById('a-0.687496001541234321').getAttribute('team_id'), document.getElementById('a-0.687496001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        4
		                    </td>
	                    	                	                    	                        <td>
		                        289
		                    </td>
	                    	                	                    	                        	                            <td>
		                            72.25
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						18.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196303&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196303" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687597001541234321" onlyurl="1">Radovljica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687597001541234321") === "object") {
                               document.getElementById("a-0.687597001541234321").href = navigateTeam(document.getElementById('a-0.687597001541234321').getAttribute('team_id'), document.getElementById('a-0.687597001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        360
		                    </td>
	                    	                	                    	                        	                            <td>
		                            72.00
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						19.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=269263&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269263" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687696001541234321" onlyurl="1">Logatec</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687696001541234321") === "object") {
                               document.getElementById("a-0.687696001541234321").href = navigateTeam(document.getElementById('a-0.687696001541234321').getAttribute('team_id'), document.getElementById('a-0.687696001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        3
		                    </td>
	                    	                	                    	                        <td>
		                        214
		                    </td>
	                    	                	                    	                        	                            <td>
		                            71.33
	                            </td>
	                        	                    	                				</tr>
							<tr style="height: 33px;">
					<td style="display: none;">
						20.
					</td>
						                    	                        <td style="display: none;">
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196093&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196093" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687796001541234321" onlyurl="1">Šentjur Tajfun</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687796001541234321") === "object") {
                               document.getElementById("a-0.687796001541234321").href = navigateTeam(document.getElementById('a-0.687796001541234321').getAttribute('team_id'), document.getElementById('a-0.687796001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td>
	                    	                	                    	                        <td>
		                        5
		                    </td>
	                    	                	                    	                        <td>
		                        356
		                    </td>
	                    	                	                    	                        	                            <td>
		                            71.20
	                            </td>
	                        	                    	                				</tr>
					</tbody>
	</table></div></div></div><div class=" mbt-v2-pinned-table-container"><table class="mbt-v2-table mbt-v2-teams-stats-table"><thead><tr style="height: 42px;"><th>
					Št.
				</th><th>
	                        Ekipa
                        </th></tr></thead><tbody><tr style="height: 33px;"><td>
						1.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196353&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196353" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.685718001541234321" onlyurl="1">Ilirija</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.685718001541234321") === "object") {
                               document.getElementById("a-0.685718001541234321").href = navigateTeam(document.getElementById('a-0.685718001541234321').getAttribute('team_id'), document.getElementById('a-0.685718001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						2.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=195953&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195953" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.685885001541234321" onlyurl="1">Janče Ljubljana A</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.685885001541234321") === "object") {
                               document.getElementById("a-0.685885001541234321").href = navigateTeam(document.getElementById('a-0.685885001541234321').getAttribute('team_id'), document.getElementById('a-0.685885001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						3.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=195983&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195983" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686009001541234321" onlyurl="1">Petrol Olimpija B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686009001541234321") === "object") {
                               document.getElementById("a-0.686009001541234321").href = navigateTeam(document.getElementById('a-0.686009001541234321').getAttribute('team_id'), document.getElementById('a-0.686009001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						4.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=307703&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="307703" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686120001541234321" onlyurl="1">Ajdas Lenart</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686120001541234321") === "object") {
                               document.getElementById("a-0.686120001541234321").href = navigateTeam(document.getElementById('a-0.686120001541234321').getAttribute('team_id'), document.getElementById('a-0.686120001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						5.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=195943&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="195943" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686224001541234321" onlyurl="1">Elektra Šoštanj</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686224001541234321") === "object") {
                               document.getElementById("a-0.686224001541234321").href = navigateTeam(document.getElementById('a-0.686224001541234321').getAttribute('team_id'), document.getElementById('a-0.686224001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						6.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196103&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196103" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686326001541234321" onlyurl="1">Vojnik Gradbena trgovina G7</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686326001541234321") === "object") {
                               document.getElementById("a-0.686326001541234321").href = navigateTeam(document.getElementById('a-0.686326001541234321').getAttribute('team_id'), document.getElementById('a-0.686326001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						7.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196063&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196063" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686429001541234321" onlyurl="1">Drava U17</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686429001541234321") === "object") {
                               document.getElementById("a-0.686429001541234321").href = navigateTeam(document.getElementById('a-0.686429001541234321').getAttribute('team_id'), document.getElementById('a-0.686429001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						8.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196503&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196503" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686529001541234321" onlyurl="1">Mesarija Prunk</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686529001541234321") === "object") {
                               document.getElementById("a-0.686529001541234321").href = navigateTeam(document.getElementById('a-0.686529001541234321').getAttribute('team_id'), document.getElementById('a-0.686529001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						9.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=165713&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165713" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686628001541234321" onlyurl="1">Rogaška</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686628001541234321") === "object") {
                               document.getElementById("a-0.686628001541234321").href = navigateTeam(document.getElementById('a-0.686628001541234321').getAttribute('team_id'), document.getElementById('a-0.686628001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						10.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196393&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196393" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686727001541234321" onlyurl="1">Ježica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686727001541234321") === "object") {
                               document.getElementById("a-0.686727001541234321").href = navigateTeam(document.getElementById('a-0.686727001541234321').getAttribute('team_id'), document.getElementById('a-0.686727001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						11.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196213&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196213" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686827001541234321" onlyurl="1">Zlatorog B</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686827001541234321") === "object") {
                               document.getElementById("a-0.686827001541234321").href = navigateTeam(document.getElementById('a-0.686827001541234321').getAttribute('team_id'), document.getElementById('a-0.686827001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						12.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=165603&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165603" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.686927001541234321" onlyurl="1">Hopsi Polzela</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.686927001541234321") === "object") {
                               document.getElementById("a-0.686927001541234321").href = navigateTeam(document.getElementById('a-0.686927001541234321').getAttribute('team_id'), document.getElementById('a-0.686927001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						13.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196173&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196173" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687034001541234321" onlyurl="1">Input Nazarje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687034001541234321") === "object") {
                               document.getElementById("a-0.687034001541234321").href = navigateTeam(document.getElementById('a-0.687034001541234321').getAttribute('team_id'), document.getElementById('a-0.687034001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						14.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=165563&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="165563" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687189001541234321" onlyurl="1">Dravograd Koroška</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687189001541234321") === "object") {
                               document.getElementById("a-0.687189001541234321").href = navigateTeam(document.getElementById('a-0.687189001541234321').getAttribute('team_id'), document.getElementById('a-0.687189001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						15.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=269273&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269273" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687294001541234321" onlyurl="1">Pivka</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687294001541234321") === "object") {
                               document.getElementById("a-0.687294001541234321").href = navigateTeam(document.getElementById('a-0.687294001541234321').getAttribute('team_id'), document.getElementById('a-0.687294001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						16.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196223&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196223" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687394001541234321" onlyurl="1">Celje</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687394001541234321") === "object") {
                               document.getElementById("a-0.687394001541234321").href = navigateTeam(document.getElementById('a-0.687394001541234321').getAttribute('team_id'), document.getElementById('a-0.687394001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						17.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196493&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196493" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687496001541234321" onlyurl="1">Tera Tolmin</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687496001541234321") === "object") {
                               document.getElementById("a-0.687496001541234321").href = navigateTeam(document.getElementById('a-0.687496001541234321').getAttribute('team_id'), document.getElementById('a-0.687496001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						18.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196303&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196303" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687597001541234321" onlyurl="1">Radovljica</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687597001541234321") === "object") {
                               document.getElementById("a-0.687597001541234321").href = navigateTeam(document.getElementById('a-0.687597001541234321').getAttribute('team_id'), document.getElementById('a-0.687597001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						19.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=269263&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="269263" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687696001541234321" onlyurl="1">Logatec</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687696001541234321") === "object") {
                               document.getElementById("a-0.687696001541234321").href = navigateTeam(document.getElementById('a-0.687696001541234321').getAttribute('team_id'), document.getElementById('a-0.687696001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr><tr style="height: 33px;"><td>
						20.
					</td><td>
		                        <a href="http://www.kzs.si/incl?id=967&amp;team_id=196093&amp;league_id=undefined&amp;season_id=102585" season_id="102585" team_id="196093" client_hash="39f56437f972dc4ca91d2c997f874dcfc232a688" id="a-0.687796001541234321" onlyurl="1">Šentjur Tajfun</a><script type="text/javascript">
                            if (typeof document.getElementById("a-0.687796001541234321") === "object") {
                               document.getElementById("a-0.687796001541234321").href = navigateTeam(document.getElementById('a-0.687796001541234321').getAttribute('team_id'), document.getElementById('a-0.687796001541234321').getAttribute('season_id'));
                            }
                        </script>
		                    </td></tr></tbody></table></div></div>

	<div class="mbt-v2-divider"></div>
	<div class="mbt-v2-grid">
		<div class="mbt-v2-col mbt-v2-col-12">
			<ul class="mbt-v2-pagination">
																			<li class="mbt-v2-pagination-active">
																<span>
							1
						</span>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-601-page-2">
							2
						</a>
										</li>
															<li>	
																<a href="#" onclick="return false;" id="33-601-page-3">
							3
						</a>
										</li>
													<li class="mbt-v2-pagination-next">
						<a href="#" onclick="return false;" id="33-601-page-next">
							❯ 
						</a>
					</li>
							</ul>
		</div>
	</div>

<script type="text/javascript">
//<![CDATA[

	var namespace = MBT.API.SafeNames.Container('33-601');
	
	namespace.onPageClick = function(e, page) {

		namespace.params.page = page;
		
		new MBT.API.Widgets.Widget({
			widgetId: 601,
			container: '33-601-tab-container',
			state: 'MTIxMjk4MTA0M2E6MTM6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM1MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7czo5OiJzZWFzb25faWQiO3M6NjoiMTAyNTg1Ijt9',
			params: namespace.params
		}).renderPartial(namespace.partial);
	}

																	MBT.API.Event.observe('33-601-page-2', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [2], 1)); 
												MBT.API.Event.observe('33-601-page-3', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [3], 1)); 
										MBT.API.Event.observe('33-601-page-next', "click", MBT.API.Function.createDelegate(namespace.onPageClick, null, [2], 1)); 
			//]]>
</script>
<p class="mbt-v2-info-text">
    
</p>

<script type="text/javascript">
//<![CDATA[

    new MBT.API.responsiveTable ({
        table: 'mbt-v2-teams-stats-averages-table',
        tablesContainer: 'mbt-v2-teams-stats-table-averages-container',
        columnsToPin: 2
    }).watchTable();

//]]>
</script></div>
	</div>
</div>

<script type="text/javascript">
//<![CDATA[
	
		var namespace = MBT.API.SafeNames.Container('33-601');

		namespace.params = {};
		namespace.partial = 'highs';

		
					namespace.params.teamMode = false;
				 

		namespace.params.filter = {};
		namespace.params.use_advanced_filter = true;

		namespace.availableFilters = MBT.API.get('33-601-filters-block').childNodes;

		namespace.onFilterChange = function(e, filter) {
			
			namespace.params.filter[filter] = e.target.value;
			namespace.params.page = 0;

			if(filter == 'season_id') {
				delete namespace.params.filter.stage_id;
				new MBT.API.Widgets.Widget({
					widgetId: 601,
					container: '33-601-stage-selector',
					state: 'MzAwOTY3NzE5NmE6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM1MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
					params: {
						season_id: namespace.params.filter.season_id
					}
				}).renderPartial('get-stages');
			}

			new MBT.API.Widgets.Widget({
				widgetId: 601,
				container: '33-601-tab-container',
				state: 'MzAwOTY3NzE5NmE6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM1MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
				params: namespace.params
			}).renderPartial(namespace.partial);
		}

		for(key in namespace.availableFilters) {
			if(namespace.availableFilters[key].nodeType == 1) {
				namespace.params.filter[namespace.availableFilters[key].getAttribute('data-name')] = namespace.availableFilters[key].value;
	            MBT.API.Event.observe(namespace.availableFilters[key], 'change', MBT.API.Function.createDelegate(namespace.onFilterChange, null, [namespace.availableFilters[key].getAttribute('data-name')], 1));
			}
		}

		if(!namespace.params.teamMode) {
			namespace.onTabClick = function(tabPanel, index, part) {

				namespace.partial = part;
				namespace.params.page = 0;

				for(key in namespace.availableFilters) {
					if(namespace.availableFilters[key].nodeType == 1) {
						if(namespace.availableFilters[key].getAttribute('data-name') == 'season_id') {
							if(namespace.availableFilters[key].options[0].value == "") {
								namespace.availableFilters[key].selectedIndex = 1;
								namespace.params.filter.season_id = namespace.availableFilters[key].options[1].value;
							} else {
							    namespace.availableFilters['key'].selectedIndex = 1;
							    namespace.params.filter.season_id = namespace.availableFilters[key].options[1].value;
							}
						} else {
							namespace.availableFilters[key].selectedIndex =0;
							namespace.params.filter[namespace.availableFilters[key].getAttribute('data-name')] = namespace.availableFilters[key].options[0].value;
						}
					}
				}

		        new MBT.API.Widgets.Widget({
		        	widgetId: 601, 
					container: '33-601-tab-container',
					state: 'MzAwOTY3NzE5NmE6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM1MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
					params: {
						season_id: '102585'
					}
				}).renderPartial(part);
		    }

			namespace.tabs = [];

			namespace.menuItems = MBT.API.get('33-601-mbt-v2-navigation').childNodes;

			for(var i = 0; i <  namespace.menuItems.length; i++) {
		        if(namespace.menuItems[i].nodeType == 1) {
		        	namespace.tabs.push({
		        		tabId: namespace.menuItems[i].id,
		        		needLoad: MBT.API.Function.createDelegate(namespace.onTabClick, null, namespace.menuItems[i].getAttribute('data-name'), 2),
		        	});
		        }
			}

			namespace.TabController = new MBT.API.UI.TabPanel({
				container: '33-601-tab-container',
				tabClass: 'mbt-v2-navigation-tab',
		        activeTabClass: 'mbt-v2-navigation-tab-active',
		        tabs: namespace.tabs,
		        noCache: true,
		        activeTab: 0
			});
		} else {
			new MBT.API.Widgets.Widget({
	        	widgetId: 601, 
				container: '33-601-tab-container',
				state: 'MzAwOTY3NzE5NmE6MTI6e3M6MTk6ImxlYWd1ZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoidGVhbV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxNzoiZ2FtZV9saW5rX3Zpc2libGUiO3M6MToiMSI7czoxOToicGxheWVyX2xpbmtfdmlzaWJsZSI7czoxOiIxIjtzOjk6ImxlYWd1ZV9pZCI7czo1OiIxMDM1MyI7czoxNDoiZ2FtZV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoiZ2FtZV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlR2FtZSI7czoxNDoidGVhbV9saW5rX3R5cGUiO3M6MToiMyI7czoxNzoidGVhbV9saW5rX2hhbmRsZXIiO3M6MTI6Im5hdmlnYXRlVGVhbSI7czoxNjoicGxheWVyX2xpbmtfdHlwZSI7czoxOiIzIjtzOjE5OiJwbGF5ZXJfbGlua19oYW5kbGVyIjtzOjE0OiJuYXZpZ2F0ZVBsYXllciI7czo4OiJ0ZW1wbGF0ZSI7czoyOiJ2MiI7fQ==',
				params: {
					season_id: '102585'
				}
			}).renderPartial(namespace.partial);
		}

	    if(!namespace.params.teamMode) {
		    namespace.mobileNav = new MBT.API.createResponsiveNavigation({
				menuContainer : "33-601-mbt-v2-navigation",
				mobileMenuContainer : "33-601-mobile-menu",
				mobileMenuOpenedClass : 'mbt-v2-mobile-menu-opened',
				mobileMenuCloseText: 'Izberi'
			});
	    }
	
//]]>
</script>	</div>
</div>
<script>
        var league = 10353;
    </script><!-- Need for schedule widget --><!-- Load schedule widget --><script>

        var request = new MBT.API.Widgets.RenderRequest();
        var widget = new MBT.API.Widgets.Widget();
        widget.setContainer('schedule');
        widget.setWidgetId(MBT.API.Widgets.SEASON_SCHEDULE_LONG_WIDGET);
        widget.setParam('team_link_visible', 1);
        widget.setParam('show_season_selector', 1);
        widget.setParam('game_link_visible', 1);
        widget.setParam('player_link_visible', 1);
        widget.setParam('team_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('game_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('player_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('team_link_handler', 'navigateTeam');
        widget.setParam('game_link_handler', 'navigateGame');
        widget.setParam('player_link_handler', 'navigatePlayer');
        widget.setParam('arena_link_visible', 1);
        widget.setParam('arena_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('arena_link_handler', 'navigateArena');
        widget.setParam('league_id', league);
        widget.setParam('season_id', season);
        widget.setParam('game_days', 1 );
        widget.setParam('show_referee_city', '1');
        widget.setParam('items_on_page', '30');
        widget.setParam('stage_levels_visible', 2);
        widget.setParam('template', 'v2');
        request.addWidget(widget);
        request.render();
    </script><!-- Need for standings widget --><!-- Load standings widget --><script>
        var request = new MBT.API.Widgets.RenderRequest();
        var widget = new MBT.API.Widgets.Widget();
        widget.setContainer('standings');
        widget.setWidgetId(MBT.API.Widgets.SEASON_STANDINGS_LONG_WIDGET);
        widget.setParam('league_link_visible', 2);
        widget.setParam('team_link_visible', 1);
        widget.setParam('game_link_visible', 2);
        widget.setParam('player_link_visible', 1);
        widget.setParam('full_standings_link_visible', 2);
        widget.setParam("stage_levels_visible", 2);
        widget.setParam('league_id', league);
        widget.setParam('season_id', season);
        widget.setParam('team_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('team_link_handler', 'navigateTeam');
        widget.setParam('full_standings_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('full_standings_link_handler', 'navigateStandings');
        widget.setParam('template', 'v2');
        request.addWidget(widget);
        request.render();
    </script><!-- Need for standings widget --><script>
        var request = new MBT.API.Widgets.RenderRequest();
        var widget = new MBT.API.Widgets.Widget();
        widget.setContainer('standings');
        widget.setWidgetId(MBT.API.Widgets.SEASON_STANDINGS_LONG_WIDGET);
        widget.setParam('league_link_visible', 2);
        widget.setParam('team_link_visible', 1);
        widget.setParam('game_link_visible', 2);
        widget.setParam('player_link_visible', 1);
        widget.setParam('full_standings_link_visible', 2);
        widget.setParam("stage_levels_visible", 2);
        widget.setParam('league_id', league);
        widget.setParam('season_id', season);
        widget.setParam('team_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('team_link_handler', 'navigateTeam');
        widget.setParam('full_standings_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('full_standings_link_handler', 'navigateStandings');
        widget.setParam('template', 'v2');
        request.addWidget(widget);
        request.render();
    </script><!-- Load player stats widget --><script>
        var request = new MBT.API.Widgets.RenderRequest();
        widget = new MBT.API.Widgets.Widget();
        widget.setContainer('stats-player');
        widget.setWidgetId(MBT.API.Widgets.STATISTICS_PLAYERS_WIDGET);
        widget.setParam('league_link_visible', 1);
        widget.setParam('team_link_visible', 1);
        widget.setParam('game_link_visible', 1);
        widget.setParam('player_link_visible', 1);
        widget.setParam('league_id', league);
        widget.setParam('season_id', season);
        widget.setParam('game_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('game_link_handler', 'navigateGame');
        widget.setParam('team_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('team_link_handler', 'navigateTeam');
        widget.setParam('player_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('player_link_handler', 'navigatePlayer');
        widget.setParam('template', 'v2');
        request.addWidget(widget);
        request.render();
    </script><!-- Load team stats widget --><script>
        var request = new MBT.API.Widgets.RenderRequest();
        var widget = new MBT.API.Widgets.Widget();
        widget.setContainer('stats-team');
        widget.setWidgetId(MBT.API.Widgets.STATISTICS_TEAMS_WIDGET);
        widget.setParam('league_link_visible', 1);
        widget.setParam('team_link_visible', 1);
        widget.setParam('game_link_visible', 1);
        widget.setParam('player_link_visible', 1);
        widget.setParam('league_id', league);
        widget.setParam('season_id', season);
        widget.setParam('game_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('game_link_handler', 'navigateGame');
        widget.setParam('team_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('team_link_handler', 'navigateTeam');
        widget.setParam('player_link_type', MBT.API.NAVIGATION_TYPE_CUSTOM);
        widget.setParam('player_link_handler', 'navigatePlayer');
        widget.setParam('template', 'v2');
        request.addWidget(widget);
        request.render();
    </script></div></div></div><div class="container-bootstrap banner-h"><div class="row"><div class="col-md-12 text-center"><script language="JavaScript" type="text/javascript" src="https://oglasi.kzs.si/adx.js"></script><script language="JavaScript" type="text/javascript"><!--
if (!document.phpAds_used) document.phpAds_used = ',';phpAds_random = new String (Math.random()); phpAds_random = phpAds_random.substring(2,11);document.write ("<" + "script language='JavaScript' type='text/javascript' src='");document.write ("https://oglasi.kzs.si/adjs.php?n=" + phpAds_random);document.write ("&amp;what=zone:3");document.write ("&amp;exclude=" + document.phpAds_used);if (document.referrer)document.write ("&amp;referer=" + escape(document.referrer));document.write ("'><" + "/script>");
//--></script><script language="JavaScript" type="text/javascript" src="https://oglasi.kzs.si/adjs.php?n=253982182&amp;what=zone:3&amp;exclude=,"></script><a href="https://oglasi.kzs.si/adclick.php?bannerid=604&amp;zoneid=3&amp;source=&amp;dest=https%3A%2F%2Fwww.e-stave.com%2F" target="_blank"><img src="https://oglasi.kzs.si/adimage.php?filename=banner-kzs-710x90.jpg&amp;contenttype=jpeg" width="710" height="90" alt="" title="" border="0"></a><div id="beacon_604" style="position: absolute; left: 0px; top: 0px; visibility: hidden;"><img src="https://oglasi.kzs.si/adlog.php?bannerid=604&amp;clientid=360&amp;zoneid=3&amp;source=&amp;block=0&amp;capping=0&amp;cb=68cb8d2e981e82c4f130d8866155577f" width="0" height="0" alt="" style="width: 0px; height: 0px;"></div></div></div></div>

<script type="text/javascript" src="/js/fancybox/jquery.fancybox.pack.js"></script>
<script type="text/javascript" src="/js/fancybox/jquery.fancybox-buttons.js"></script>
<script type="text/javascript" src="/js/fancybox/jquery.fancybox-media.js"></script>
<script type="text/javascript" src="/js/fancybox/jquery.fancybox-thumbs.js"></script>

<script type="text/javascript">
<!--
jQuery(document).ready(function() {
	jQuery('.agal').fancybox({
		type : 'image',
		padding: 0,
		helpers : {
	     media : {}
	    }
    });
});
//-->
</script>
						
				<div style="clear: both;"></div>
			</div>
		</div>
	</div><!--middle parts ends-->
</div><!--container parts ends-->
		








<div class="container-fluid sponsor-container"><div class="divider"></div><div class="row"><div class="col-md-12 sponsor-container-inner"><div id="sponsors" class="carousel slide" data-ride="carousel" data-interval="7000"><div class="row general-sponsors"><div class="col-md-offset-2 col-md-4  col-sm-6 col-xs-6 col-xxs-12 g-sp-right spon-gen"><a class="spon-gen-transform"></a><a href="https://telemach.si/" target="_blank" title="Telemach"><img src="/binary/showimage/id/8073/rw/220/rp/true/h/35abd8"></a><p class="gen-spon">Generalni sponzor</p></div><div class="col-md-4  col-sm-6 col-xs-6 col-xxs-12 g-sp-left spon-plat"><a href="http://www.adidas.com" target="_blank" title="Adidas"><img src="/binary/showimage/id/4452/rw/220/rp/true/h/591ad9"></a><a href="http://www.spar.si/" target="_blank" title="Spar"><img src="/binary/showimage/id/7024/rw/220/rp/true/h/def40f"></a><p>Platinasta sponzorja</p></div></div><div class="carousel-inner" role="listbox"><div class="item active"><div class="slider-inner"><div class="sponsors golden"><div class="logos"><a href="http://www.nkbm.si/" target="_blank" title="NKBM"><img src="/binary/showimage/id/4698/rw/154/rp/true/h/6b1296"></a><a href="http://www.petrol.si/" target="_blank" title="Petrol"><img src="/binary/showimage/id/4697/rw/154/rp/true/h/a005d6"></a></div><p>Zlati sponzorji</p></div><div class="sponsors silver"><div class="logos"><a href="http://www.a-cosmos.si/" target="_blank" title="A-Cosmos"><img src="/binary/showimage/id/14395/rw/154/rp/true/h/664c2e"></a><a href="http://www.pivo-lasko.si/slo/" target="_blank" title="Laško"><img src="/binary/showimage/id/15052/rw/154/rp/true/h/a27a92"></a><a href="http://www.spalding.si/" target="_blank" title="Spalding"><img src="/binary/showimage/id/5059/rw/154/rp/true/h/127dbc"></a><a href="http://www.sony.si/section/zacetna-stran" target="_blank" title="Sony"><img src="/binary/showimage/id/5063/rw/154/rp/true/h/4b33e7"></a></div><p>Srebrni sponzorji</p></div></div></div><div class="item "><div class="slider-inner"><div class="sponsors golden"><div class="logos"><a href="http://www.kompas.si/" target="_blank" title="Kompas"><img src="/binary/showimage/id/4700/rw/154/rp/true/h/ccb5be"></a><a href="https://www.dm-drogeriemarkt.si/" title="DM"><img src="/binary/showimage/id/5053/rw/154/rp/true/h/e72f0f"></a></div><p>Srebrni sponzorji</p></div><div class="sponsors silver"><div class="logos"><a href="https://www.e-stave.com/" target="_blank" title="Športna loterija"><img src="/binary/showimage/id/14249/rw/154/rp/true/h/f8f4a0"></a><a href="http://www.elektro-gorenjska.si/" target="_blank" title="Elektro Gorenjska"><img src="/binary/showimage/id/5054/rw/154/rp/true/h/143214"></a><a href="http://loterija.si/" target="_blank" title="Loterija Slovenije"><img src="/binary/showimage/id/5813/rw/154/rp/true/h/9478b8"></a><a href="http://www.hse.si/si/" title="HSE"><img src="/binary/showimage/id/5327/rw/154/rp/true/h/fdec53"></a></div><p>Bronasti sponzorji</p></div></div></div><div class="item "><div class="slider-inner"><div class="sponsors golden"><div class="logos"><a href="http://www.gorenje.si/" target="_blank" title="Gorenje"><img src="/binary/showimage/id/5069/rw/154/rp/true/h/08e47e"></a><a href="http://www.knaufinsulation.si/" target="_blank" title="Knauf"><img src="/binary/showimage/id/5065/rw/154/rp/true/h/4ef2ac"></a><a href="http://www.slo-zeleznice.si/sl/" target="_blank" title="Slovenske železnice"><img src="/binary/showimage/id/5055/rw/154/rp/true/h/9637da"></a><a href="http://www.gen-energija.si/" target="_blank" title="GEN-I"><img src="/binary/showimage/id/5066/rw/154/rp/true/h/102b2e"></a></div><p>Bronasti sponzorji</p></div><div class="sponsors silver"><div class="logos"><a href="https://www.austria-trend.at/en/hotels/ljubljana" target="_blank" title="ATH"><img src="/binary/showimage/id/7503/rw/154/rp/true/h/229c00"></a><a href="http://www.fundacijazasport.org/" target="_blank" title="Fundacija za šport"><img src="/binary/showimage/id/4883/rw/154/rp/true/h/9d9a7a"></a></div><p>Partnerji</p></div></div></div><div class="item "><div class="slider-inner"><div class="sponsors golden"><div class="logos"><a href="http://www.mss.gov.si/" target="_blank" title="MIZS"><img src="/binary/showimage/id/5068/rw/154/rp/true/h/75d6d3"></a><a href="http://www.europlakat.si/" target="_blank" title="Europlakat"><img src="/binary/showimage/id/5815/rw/154/rp/true/h/dafc3b"></a><a href="http://www.vzivo.si/" target="_blank" title="V živo"><img src="/binary/showimage/id/5814/rw/154/rp/true/h/4db0b8"></a><a href="http://www.arspharmae.com/" target="_blank" title="Arspharmae"><img src="/binary/showimage/id/5064/rw/154/rp/true/h/4caeb9"></a><a href="http://www.prometmesec.si/" target="_blank" title="Nomago"><img src="/binary/showimage/id/6911/rw/154/rp/true/h/0a5523"></a><a href="http://eventim.si/" target="_blank" title="Eventim"><img src="/binary/showimage/id/5057/rw/154/rp/true/h/deab95"></a></div><p>Partnerji</p></div></div></div><div class="item "><div class="slider-inner"><div class="sponsors golden"><div class="logos"><a href="https://www.modiana.si/" target="_blank" title="Modiana"><img src="/binary/showimage/id/5145/rw/154/rp/true/h/5b102f"></a></div><p>Partnerji</p></div><div class="sponsors silver"><div class="logos"><a href="https://www.grosbasket.com/sl" target="_blank" title="Grosbasket"><img src="/binary/showimage/id/7025/rw/154/rp/true/h/54a275"></a></div><p>Generalni sponzor DP 3x3</p></div></div></div></div><a class="left carousel-control" href="#sponsors" role="button" data-slide="prev"><span class="glyphicon glyphicon-triangle-left" aria-hidden="true"></span><span class="sr-only">Nazaj</span></a><a class="right carousel-control" href="#sponsors" role="button" data-slide="next"><span class="glyphicon glyphicon-triangle-right" aria-hidden="true"></span><span class="sr-only">Naprej</span></a></div></div></div></div>
<div class="footer">
  <div class="container-bootstrap">
    <div class="row">
      <div class="col-md-10 col-md-offset-1 col-sm-12">
        <div class="row">
		  <div class="col-md-3 col-sm-3 col-xs-3 col-xxs-6"><h3>Medijsko središče</h3><ul><li><a href="http://cms.dag-files.com/akreditacije">Akreditacije</a></li><li><a href="http://cms.dag-files.com/clanek/Organizacija/Logotipi/cid/130">Logotipi</a></li><li><a href="http://cms.dag-files.com/clanek/Organizacija/Vse-o-KZS/cid/125">Kontakt</a></li><li><a href="http://cms.dag-files.com/clanek/Vstopnice/cid/151">Vstopnice</a></li><li><a href="http://cms.dag-files.com/clanek/Prenosi/cid/142">Prenosi</a></li></ul></div>
		  <div class="col-md-3 col-sm-3 col-xs-3 col-xxs-6"><h3>KZS</h3><ul><li><a href="http://cms.dag-files.com/clanek/Organizacija/Dokumenti/cid/131">Dokumenti</a></li><li><a href="http://cms.dag-files.com/article/id/531">Sodniški iskalnik</a></li><li><a href="http://www.kosarkarski-trenerji.com/" target="_blank">ZKTS</a></li><li><a href="http://cms.dag-files.com/clanek/Trgovina/cid/141">Trgovina</a></li><li><a href="http://old.kzs.si/" target="_blank">Arhiv KZS</a></li></ul></div>
		  <div class="col-md-3 col-sm-3 col-xs-3 col-xxs-6"><h3>Reprezentance</h3><ul><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Clani/cid/37">Člani</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Clanice/cid/83">Članice</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Fantje-U20/cid/78">Fantje U20</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Dekleta-U20/cid/84">Dekleta U20</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Fantje-U18/cid/79">Fantje U18</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Dekleta-U18/cid/85">Dekleta U18</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Fantje-U16/cid/80">Fantje U16</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Dekleta-U16/cid/86">Dekleta U16</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Fantje-U14/cid/82">Fantje U14</a></li><li><a href="http://cms.dag-files.com/clanek/Reprezentance/Dekleta-U14/cid/88">Dekleta U14</a></li></ul></div>
		  <div class="col-md-3 col-sm-3 col-xs-3 col-xxs-6"><h3>Projekti in tekmovanja</h3><ul><li><a href="http://cms.dag-files.com/clanek/Projekti/Igriva-kosarka/cid/91">Igriva košarka</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/Lipko/cid/155">Lipko</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/Regijsko-selekcioniranje/cid/93">Regijsko selekcioniranje</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/KZS-tabor/cid/92">Tabori</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/Kosarkarski-supersolar/cid/94">Košarkarski Superšolar</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/U14-slovenia-ball/cid/95">U14 Slovenia Ball</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/All-Stars/cid/96">All stars</a></li><li><a href="http://cms.dag-files.com/clanek/Projekti/Pokal-Eurobasket-2017/cid/200">Pokal Eurobasket 2017</a></li><li><a href="http://cms.dag-files.com/clanek/Tekmovanja/Liga-Nova-KBM/cid/66">Liga Nova KBM</a></li><li><a href="http://cms.dag-files.com/clanek/Tekmovanja/1.-SKL-za-zenske/cid/67">1. SKL za ženske</a></li><li><a href="http://cms.dag-files.com/clanek/Tekmovanja/Pokal-Spar/cid/72#mbt:33-303$t&amp;0=1">Pokal Spar</a></li><li><a href="http://cms.dag-files.com/clanek/3x3/Samsung-drzavno-prvenstvo/cid/209">Košarka 3x3</a></li></ul></div>
		  <div class="cb"></div>
        </div>
      </div>
    </div>
  </div>
</div>		


 




<div class="cookieCont" id="cookidiot"><div class="moreInfoCont">Ta spletna stran uporablja piškotke z namenom, da vam ponudimo najboljšo možno uporabniško izkušnjo na naših spletnih straneh. <a href="/clanek/Piskotki/cid/280">Več</a></div><a class="agreeLink" id="ci_agree" onclick="CookieIdiot.onAgreeLinkClick(this, true);">Strinjam se</a><a class="disagreeLink" id="ci_notagree" onclick="CookieIdiot.onAgreeLinkClick(this, false);">Ne strinjam se</a><div class="lm" id="cookIdiotLm" style="display:none;"></div></div>

<script type="text/javascript">
var CookieIdiot = CookieIdiot||{};
(function() {
	CookieIdiot.onAgreeLinkClick = function(sender, agree) {
		var requestData = {};
		requestData['m'] = 'ta';

		if(agree === true) {
			var trackCheck = jQuery(sender).closest('#cookidiot').find('#trackCheck');
			if(trackCheck.length == 0) {
				requestData['ag'] = agree===true?'1':'0';
			} else {
				requestData['ag'] = trackCheck.get(0).checked===true?'1':'0';
			}
		} else {
			requestData['ag'] = agree===true?'1':'0';
		}
		
		jQuery.ajax({
			url: '/ajax/cookieidiot',
			data: (requestData),
			dataType: 'xml',
			_cookieOnSuc: requestData['ag']=='1',
			success: function(xml) {
				if(jQuery(xml).find('status').text() == '1' && !!this._cookieOnSuc) {
					var name = 'ccidiot', value='1';
					var expires = "";
			        var date = new Date();
			        date.setTime(date.getTime() + (365*24*60*60*1000)); //1 year
			        expires = "; expires=" + date.toUTCString();
				    document.cookie = name + "=" + (value || "")  + expires + "; path=/";
				}
			}
		});

		jQuery(sender).closest('#cookidiot').slideUp();		
	};

	CookieIdiot.onLearnMoreLinkClick = function(sender) {
		var requestData = {};
		requestData['m'] = 'lm';
		
		jQuery.ajax({
			snd: sender,
			url: '/ajax/cookieidiot',
			data: (requestData),
			dataType: 'xml',
			error: function(){_onLearnMoreError(this.snd, null);},
			success: function(xml) {
				if(jQuery(xml).find('status').text() == '1') {
					var cidiot = jQuery(this.snd).closest('#cookidiot');
					cidiot.find('#ci_agree,#ci_notagree').remove();
					cidiot.find('#cookIdiotLm').html(jQuery(xml).find('lmhtml').text()).show();
					jQuery(this.snd).remove();
				} else {
					_onLearnMoreError(this.snd, jQuery(xml).find('lmhtml').text());
				}
			}
		});
	};

	var _onLearnMoreError = function(sender, msg) {
		var lmDiv = jQuery(sender).closest('#cookidiot').find('#cookIdiotLm');
		if(msg == null) {
			lmDiv.html('<div class="formerror">'+Utf8.Zh+'al je pri'+Utf8.sh+'lo do napake pri pridobivanju podatkov.</div>');
		} else {
			lmDiv.html(msg);
		}
		lmDiv.show();
	};
})();
</script>		
<script type="text/javascript">
<!--
jQuery(document).ready(function() {
	jQuery(document).click(function() {Common.showGivenDivAndCloseOthers(null);});
});
//-->
</script>



</body></html> #