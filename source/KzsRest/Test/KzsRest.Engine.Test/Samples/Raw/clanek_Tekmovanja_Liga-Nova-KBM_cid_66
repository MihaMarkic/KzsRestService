#Root#PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXRyYW5zaXRpb25hbC5kdGQiPjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj48aGVhZD4KCTwhLS1baWYgbHQgSUUgNy5dPgoJPHNjcmlwdCBkZWZlciB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL3BuZ2ZpeC5qcyI+PC9zY3JpcHQ+Cgk8IVtlbmRpZl0tLT4KCiAJPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgoJCgkKCQk8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IkxpZ2EgTm92YSBLQk0iPgoJCgkKCQoJCgkKCQk8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Imh0dHA6Ly93d3cua3pzLnNpL2ltYWdlcy9wcm9qZWN0L2xvZ28ucG5nIj4KCQoKICAJCgoKCgoKCgoKPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiPgo8bWV0YSBuYW1lPSJyYXRpbmciIGNvbnRlbnQ9IkdlbmVyYWwiPgo8bWV0YSBuYW1lPSJhdXRob3IiIGNvbnRlbnQ9IlBlcnVuIFBybyI+CjxtZXRhIG5hbWU9ImNvcHlyaWdodCIgY29udGVudD0iIj4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiPgoKPG1ldGEgbmFtZT0iTGFuZ3VhZ2UiIGNvbnRlbnQ9InNsb3ZlbmlhbiI+CjxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtTGFuZ3VhZ2UiIGNvbnRlbnQ9InNsLVNJIj4KCgoKPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IiI+Cgo8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iIj4KCgoKCgoKCiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9pbWFnZXMvZmF2aWNvbi5wbmciPgkKICAgIDx0aXRsZT5LWlMgfCBMaWdhIE5vdmEgS0JNPC90aXRsZT4KICAgIAogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIj4KICAgIAogICAgPHNjcmlwdCBhc3luYz0iIiBzcmM9Ii8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcyI+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL2pxdWVyeS0zLjIuMS5taW4uanMiPjwvc2NyaXB0PgoJPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL2Jvb3RzdHJhcC5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL2pxdWVyeS51aS9qcXVlcnktdWktMS4xMi4xLmN1c3RvbS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL2ZhbmN5Ym94L2pxdWVyeS5mYW5jeWJveC5wYWNrLmpzIj48L3NjcmlwdD4KICAgIAogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL3BwLWNvbW1vbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvcHAtb2JqZWN0cy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvbGlua01hbmFnZXIuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL3V0ZjguanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL2pzcC90b3BuYXZpZ2F0aW9uLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy9sYW5nL3BwdF9zbC5qcyI+PC9zY3JpcHQ+CgkKCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qcy93aWRnZXRzL2FwaS5qcyI+PC9zY3JpcHQ+Cgk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvd2lkZ2V0cy9uZXdfc2NyaXB0LmpzIj48L3NjcmlwdD4KCQoJPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvY3NzL2pxdWVyeS51aS9qcXVlcnktdWktMS4xMi4xLmN1c3RvbS5taW4uY3NzIj4KCTxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy9qcXVlcnkudWkvanF1ZXJ5LXVpLTEuMTIuMS50aGVtZS5taW4uY3NzIj4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy9qcXVlcnkuZmFuY3lib3guY3NzIj4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy9qcXVlcnkuZmFuY3lib3gtYnV0dG9ucy5jc3MiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvY3NzL2pxdWVyeS5mYW5jeWJveC10aHVtYnMuY3NzIj4KICAgIAogICAgCgkKCTxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy9jb29raWUuY3NzIj4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy9pZTEwLXZpZXdwb3J0LWJ1Zy13b3JrYXJvdW5kLmNzcyI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9jc3Mva3pzLmNzcyI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9jc3Mva3pzLWNtcy5jc3MiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvY3NzL3N0eWxlLmNzcyI+CiAgICAKCTxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Nzcy93aWRnZXRzX3N0eWxlX2Nzc19tYWluLmNzcyIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJhbGwiPgoKICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Ob3RvK1NhbnMmYW1wO3N1YnNldD1sYXRpbi1leHQiIHJlbD0ic3R5bGVzaGVldCI+CiAgICAKICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9jbGFuZWsvVGVrbW92YW5qYS9MaWdhLU5vdmEtS0JNL2NpZC82NiI+ICAgCiAgICAKCgk8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgoJCWh0bWwge2JhY2tncm91bmQ6IHVybCgnL2ltZy9ua2JtLWxpZ2Etb3phZGplMDIuanBnJyk7IAoJCQliYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwoJCQliYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgdG9wIDI2N3B4OwoJCQliYWNrZ3JvdW5kLWNvbG9yOiAjZGMxZjI2OwoJCX0KCTwvc3R5bGU+CgoKCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCihmdW5jdGlvbihpLHMsbyxnLHIsYSxtKXtpWydHb29nbGVBbmFseXRpY3NPYmplY3QnXT1yO2lbcl09aVtyXXx8ZnVuY3Rpb24oKXsKCSAgKGlbcl0ucT1pW3JdLnF8fFtdKS5wdXNoKGFyZ3VtZW50cyl9LGlbcl0ubD0xKm5ldyBEYXRlKCk7YT1zLmNyZWF0ZUVsZW1lbnQobyksCgkgIG09cy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTthLmFzeW5jPTE7YS5zcmM9ZzttLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsbSkKCX0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnLy93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzLmpzJywnZ2EnKTsKCglnYSgnY3JlYXRlJywgJ1VBLTIzOTA3MjQ2LTEnLCAnYXV0bycpOwoJZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsKPC9zY3JpcHQ+CiAKPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9ImFsbCIgaHJlZj0iaHR0cHM6Ly93aWRnZXRzLmJhc2tldGhvdGVsLmNvbS9jc3MucGhwP2FwaT0zOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4JmFtcDtpbmRleD0wJmFtcDt2PTE0NCI+PC9oZWFkPgkKCgoKPGJvZHkgY2xhc3M9Im5ld3MtZGV0YWlsLXBhZ2UgYmR5LW5rYm0iPgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgo8IS0tCnZhciBDTE9TRV9PTl9DTElDSyA9IG51bGw7CnZhciBDQUxFTkRBUl9DTE9TRV9PTl9DTElDSyA9IG51bGw7CnZhciBDQUxFTkRBUl9EQVRFX0ZPUk1BVCA9ICclZC4lbS4lWSAlSDolTSc7CnZhciBVUkxfTEFORyA9ICdzbCc7CgpqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsID0gdHJ1ZTsKCi8valF1ZXJ5KGZ1bmN0aW9uKCkge2pRdWVyeShkb2N1bWVudCkudG9vbHRpcCgpO30pOwoKdmFyIFNFVFRJTkdTID0gU0VUVElOR1N8fHt9OwoKLy8tLT4KPC9zY3JpcHQ+CgoKPGRpdiBpZD0iY29udGFpbmVyIiBjbGFzcz0iYXJ0aWNsZSI+CgoJCgoJCgoKCiAKCgoKCjxoZWFkZXI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWJvb3RzdHJhcCI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMiBjb2wteHMtMTIiPgogICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii8iPjxpbWcgc3JjPSIvaW1hZ2VzL3Byb2plY3QvbG9nby5wbmciPjwvYT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMCBjb2wteHMtMTIgdG9wLW1lbnUiPgogICAgICAgIDxhIGhyZWY9Ii9jbGFuZWsvUHJlbm9zaS9jaWQvMTQyIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MDsiPjxpIGNsYXNzPSJrenMtY2FtZXJhIj48L2k+IDxzcGFuPlByZW5vc2k8L3NwYW4+PC9hPgogICAgICAgIAogICAgICAgIDxhIHN0eWxlPSJjb2xvcjojOTM5Mzk0OyBjdXJzb3I6IGRlZmF1bHQ7Ij48aSBjbGFzcz0ia3pzLW5rYm0iPjwvaT4gPHNwYW4+S2/FoWFya2Fyc2thIGJhbmthPC9zcGFuPjwvYT4KICAgICAgICA8YSBocmVmPSIvY2xhbmVrL1RyZ292aW5hL2NpZC8xNDEiPjxpIGNsYXNzPSJrenMtc2hvcCI+PC9pPiA8c3Bhbj5UcmdvdmluYTwvc3Bhbj48L2E+CiAgICAgICAgPGEgaHJlZj0iL2NsYW5lay9Wc3RvcG5pY2UvY2lkLzE1MSI+PGkgY2xhc3M9Imt6cy10aWNrZXQiPjwvaT4gPHNwYW4+VnN0b3BuaWNlPC9zcGFuPjwvYT4KICAgICAgICA8YSBocmVmPSIvaXpiZXJpY2xhbnN0dm8iPjxpIGNsYXNzPSJrenMtYmFsbCI+PC9pPiA8c3Bhbj5OYXZpamHEjWkjbW9qdGltPC9zcGFuPjwvYT4KICAgICAgICAKCQkJPGEgaHJlZj0iL3ByaWphdmEiPjxkaXYgY2xhc3M9Imt6cy1wcm9maWxlIGt6cy1wcm9maWxlLXVucmVnaXN0ZXJlZCI+PC9kaXY+PC9hPgoJCQogICAgICAgIAogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItaW52ZXJzZSI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItYm9vdHN0cmFwIj4KICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+CiAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIGNvbGxhcHNlZCIgb25jbGljaz0iVG9wTmF2LnRvZ2dsZU1lbnUodGhpcyk7Ij4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPgogICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgaWQ9Im5hdmJhciIgY2xhc3M9ImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSI+CiAgICAgIAoJCTx1bCBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbWFpbi1tZW51Ij48bGkgY2xhc3M9ImRyb3Bkb3duIj48YSBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIj5Ob3ZpY2U8L2E+PGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSI+PGRpdiBjbGFzcz0iY29udGFpbmVyLWJvb3RzdHJhcCI+PGRpdiBjbGFzcz0icm93Ij48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiI+PHVsPjxsaT48YSBocmVmPSIvY2xhbmtpL05vdmljZS9UZWttb3ZhbmphL2lkLzQxIj5UZWttb3ZhbmphPC9hPjx1bD48bGk+PGEgaHJlZj0iL2NsYW5raS9Ob3ZpY2UvVGVrbW92YW5qYS9MaWdhLU5vdmEtS0JNL2lkLzI5Ij5MaWdhIE5vdmEgS0JNPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFua2kvTm92aWNlL1Rla21vdmFuamEvMS4tU0tMLXphLXplbnNrZS9pZC80MiI+MS4gU0tMIHphIMW+ZW5za2U8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5raS9Ob3ZpY2UvVGVrbW92YW5qYS9Qb2thbC1TcGFyL2lkLzQ2Ij5Qb2thbCBTcGFyPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFua2kvTm92aWNlL1Rla21vdmFuamEvUG9rYWwtY2xhbmljL2lkLzQ3Ij5Qb2thbCDEjWxhbmljPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFua2kvTm92aWNlL1Rla21vdmFuamEvMi4tU0tML2lkLzQzIj4yLiBTS0w8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5raS9Ob3ZpY2UvVGVrbW92YW5qYS9NbGFqc2Uta2F0ZWdvcmlqZS9pZC81MCI+RFAgbWxhasWhaWgga2F0ZWdvcmlqPC9hPjwvbGk+PC91bD48L2xpPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48bGk+PGEgaHJlZj0iL2NsYW5raS9Ob3ZpY2UvUmVwcmV6ZW50YW5jZS9pZC8zMCI+UmVwcmV6ZW50YW5jZTwvYT48dWw+PGxpPjxhIGhyZWY9Ii9jbGFua2kvTm92aWNlL1JlcHJlemVudGFuY2UvQ2xhbmkvaWQvMzEiPsSMbGFuaTwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmtpL05vdmljZS9SZXByZXplbnRhbmNlL0NsYW5pY2UvaWQvNTYiPsSMbGFuaWNlPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFua2kvTm92aWNlL1JlcHJlemVudGFuY2UvRmFudGplLVUyMC9pZC81MSI+RmFudGplIFUyMDwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmtpL05vdmljZS9SZXByZXplbnRhbmNlL0ZhbnRqZS1VMTgvaWQvNTIiPkZhbnRqZSBVMTg8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5raS9Ob3ZpY2UvUmVwcmV6ZW50YW5jZS9GYW50amUtVTE2L2lkLzUzIj5GYW50amUgVTE2PC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFua2kvTm92aWNlL1JlcHJlemVudGFuY2UvRGVrbGV0YS1VMjAvaWQvNTciPkRla2xldGEgVTIwPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFua2kvTm92aWNlL1JlcHJlemVudGFuY2UvRGVrbGV0YS1VMTgvaWQvNTgiPkRla2xldGEgVTE4PC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFua2kvTm92aWNlL1JlcHJlemVudGFuY2UvRGVrbGV0YS1VMTYvaWQvNTkiPkRla2xldGEgVTE2PC9hPjwvbGk+PC91bD48L2xpPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48bGk+PGE+UHJvamVrdGk8L2E+PHVsPjxsaT48YSBocmVmPSIvY2xhbmtpL05vdmljZS9Lb3NhcmthLTN4My9pZC82MyI+S2/FoWFya2EgM3gzPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFua2kvTm92aWNlL1Byb2pla3RpL1RhYm9yLUtaUy9pZC8yNTQiPlRhYm9yIEtaUzwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmtpL05vdmljZS9Qcm9qZWt0aS9Lb3NhcmthcnNraS1TdXBlcnNvbGFyL2lkLzE0OCI+S2/FoWFya2Fyc2tpIFN1cGVyxaFvbGFyPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFua2kvTm92aWNlL1Byb2pla3RpL1UxNC1TbG92ZW5pYS1CYWxsL2lkLzIzNCI+VTE0IFNsb3ZlbmlhIEJhbGw8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5raS9Ob3ZpY2UvUHJvamVrdGkvUmVnaWpza28tc2VsZWtjaW9uaXJhbmplL2lkLzE2MiI+UmVnaWpza28gc2VsZWtjaW9uaXJhbmplPC9hPjwvbGk+PC91bD48L2xpPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48bGk+PGEgaHJlZj0iL2NsYW5raS9Ob3ZpY2UvT3N0YWxvL2lkLzY0Ij5Pc3RhbG88L2E+PC9saT48L3VsPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvbGk+PGxpIGNsYXNzPSJkcm9wZG93biI+PGEgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSI+VGVrbW92YW5qYTwvYT48ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51Ij48ZGl2IGNsYXNzPSJjb250YWluZXItYm9vdHN0cmFwIj48ZGl2IGNsYXNzPSJyb3ciPjxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02Ij48dWw+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvVGVrbW92YW5qYS9MaWdhLU5vdmEtS0JNL2NpZC82NiI+TGlnYSBOb3ZhIEtCTTwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL1Rla21vdmFuamEvMS4tU0tMLXphLXplbnNrZS9jaWQvNjciPjEuIFNLTCB6YSDFvmVuc2tlPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvVGVrbW92YW5qYS8yLi1TS0wvY2lkLzY4Ij4yLiBTS0w8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9UZWttb3ZhbmphLzMuLVNLTC9jaWQvNjkiPjMuIFNLTDwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL1Rla21vdmFuamEvNC4tU0tML2NpZC83MCI+NC4gU0tMPC9hPjwvbGk+PC91bD48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiI+PHVsPjxsaT48YSBocmVmPSIvY2xhbmVrL1Rla21vdmFuamEvUG9rYWwtU3Bhci9jaWQvNzIiPlBva2FsIFNwYXI8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9UZWttb3ZhbmphL1Bva2FsLWNsYW5pYy9jaWQvNzMiPlBva2FsIMSMbGFuaWM8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9UZWttb3ZhbmphL1N1cGVycG9rYWwtU2xvdmVuaWplL2NpZC83NyI+U3VwZXJwb2thbCBTbG92ZW5pamU8L2E+PHVsPjxsaT48YSBocmVmPSIvY2xhbmVrL1Rla21vdmFuamEvUmF6cG9yZWQtaW4tcmV6dWx0YXRpLXZzZWgtdGVrZW0vY2lkLzM0NyI+VnNlIHRla21lPC9hPjwvbGk+PC91bD48L2xpPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48bGk+PGE+TWxhasWhZSBrYXRlZ29yaWplIC0gZmFudGplPC9hPjx1bD48bGk+PGEgaHJlZj0iL2NsYW5lay9UZWttb3ZhbmphL01sYWpzZS1rYXRlZ29yaWplL0ZhbnRqZS9GYW50amUtVTE5L2NpZC85OSI+VTE5PC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvVGVrbW92YW5qYS9NbGFqc2Uta2F0ZWdvcmlqZS9GYW50amUvRmFudGplLVUxNy9jaWQvMTAwIj5VMTc8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9UZWttb3ZhbmphL01sYWpzZS1rYXRlZ29yaWplL0ZhbnRqZS9GYW50amUtVTE1L2NpZC8xMDEiPlUxNTwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL1Rla21vdmFuamEvTWxhanNlLWthdGVnb3JpamUvRmFudGplL0ZhbnRqZS1VMTMvY2lkLzEwMiI+VTEzPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvVGVrbW92YW5qYS9NaW5pLXBva2FsLVNwYXIvY2lkLzc0Ij5NaW5pIHBva2FsIFNwYXI8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9UZWttb3ZhbmphL01sYWpzZS1rYXRlZ29yaWplL0ZhbnRqZS9GYW50amUtVTExL2NpZC8xMDMiPlUxMTwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL1Rla21vdmFuamEvTWxhanNlLWthdGVnb3JpamUvRmFudGplLWluLWRla2xldGEtVTkvY2lkLzEwNCI+VTk8L2E+PC9saT48L3VsPjwvbGk+PC91bD48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiI+PHVsPjxsaT48YT5NbGFqxaFlIGthdGVnb3JpamUgLSBkZWtsZXRhPC9hPjx1bD48bGk+PGEgaHJlZj0iL2NsYW5lay9UZWttb3ZhbmphL01sYWpzZS1rYXRlZ29yaWplL0Rla2xldGEvRGVrbGV0YS1VMTkvY2lkLzEwNSI+VTE5PC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvVGVrbW92YW5qYS9NbGFqc2Uta2F0ZWdvcmlqZS9EZWtsZXRhL0Rla2xldGEtVTE3L2NpZC8xMDYiPlUxNzwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL1Rla21vdmFuamEvTWxhanNlLWthdGVnb3JpamUvRGVrbGV0YS9EZWtsZXRhLVUxNS9jaWQvMTA3Ij5VMTU8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9UZWttb3ZhbmphL01sYWpzZS1rYXRlZ29yaWplL0Rla2xldGEvRGVrbGV0YS1VMTMvY2lkLzEwOCI+VTEzPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvVGVrbW92YW5qYS9NaW5pLXBva2FsLWRla2xldC9jaWQvNzUiPk1pbmkgcG9rYWwgZGVrbGV0PC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvVGVrbW92YW5qYS9NbGFqc2Uta2F0ZWdvcmlqZS9EZWtsZXRhL0Rla2xldGEtVTExL2NpZC8xMDkiPlUxMTwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL1Rla21vdmFuamEvTWxhanNlLWthdGVnb3JpamUvRmFudGplLWluLWRla2xldGEtVTkvY2lkLzEwNCI+VTk8L2E+PC9saT48L3VsPjwvbGk+PC91bD48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48L2xpPjxsaSBjbGFzcz0iZHJvcGRvd24iPjxhIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiPlJlcHJlemVudGFuY2U8L2E+PGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSI+PGRpdiBjbGFzcz0iY29udGFpbmVyLWJvb3RzdHJhcCI+PGRpdiBjbGFzcz0icm93Ij48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiI+PHVsPjxsaT48YSBocmVmPSIvY2xhbmVrL1JlcHJlemVudGFuY2UvQ2xhbmkvY2lkLzM3Ij7EjGxhbmk8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9SZXByZXplbnRhbmNlL0NsYW5pLUIvY2lkLzE2NSI+xIxsYW5pIEI8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9SZXByZXplbnRhbmNlL0NsYW5pY2UvY2lkLzgzIj7EjGxhbmljZTwvYT48L2xpPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48bGk+PGEgaHJlZj0iL2NsYW5lay9SZXByZXplbnRhbmNlL0ZhbnRqZS1VMjAvY2lkLzc4Ij5GYW50amUgVTIwPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvUmVwcmV6ZW50YW5jZS9GYW50amUtVTE4L2NpZC83OSI+RmFudGplIFUxODwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL1JlcHJlemVudGFuY2UvRmFudGplLVUxNi9jaWQvODAiPkZhbnRqZSBVMTY8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9SZXByZXplbnRhbmNlL0ZhbnRqZS1VMTQvY2lkLzgyIj5GYW50amUgVTE0PC9hPjwvbGk+PC91bD48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiI+PHVsPjxsaT48YSBocmVmPSIvY2xhbmVrL1JlcHJlemVudGFuY2UvRGVrbGV0YS1VMjAvY2lkLzg0Ij5EZWtsZXRhIFUyMDwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL1JlcHJlemVudGFuY2UvRGVrbGV0YS1VMTgvY2lkLzg1Ij5EZWtsZXRhIFUxODwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL1JlcHJlemVudGFuY2UvRGVrbGV0YS1VMTYvY2lkLzg2Ij5EZWtsZXRhIFUxNjwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL1JlcHJlemVudGFuY2UvRGVrbGV0YS1VMTQvY2lkLzg4Ij5EZWtsZXRhIFUxNDwvYT48L2xpPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48L3VsPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvbGk+PGxpIGNsYXNzPSJkcm9wZG93biI+PGEgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSI+UHJvamVrdGk8L2E+PGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSI+PGRpdiBjbGFzcz0iY29udGFpbmVyLWJvb3RzdHJhcCI+PGRpdiBjbGFzcz0icm93Ij48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBjb2wteHMtNiBldmVudC1tZW51Ij48ZGl2IGNsYXNzPSJyb3ciPjxkaXYgY2xhc3M9ImNvbC14eHMtMTIgY29sLXhzLTYgY29sLXNtLTYgY29sLW1kLTYiPjxhIGNsYXNzPSJtZW51LWltZyIgaHJlZj0iL2NsYW5lay9Qcm9qZWt0aS9JZ3JpdmEta29zYXJrYS9jaWQvOTEiPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC82NDIwL3J3LzIwMC9yaC8yMDAvcnAvdHJ1ZS9yZC90cnVlL3dtLzAvaC83MjcwMDgiPjxzcGFuPklncml2YSBrb8WhYXJrYTwvc3Bhbj48L2E+PC9kaXY+PGRpdiBjbGFzcz0iY29sLXh4cy0xMiBjb2wteHMtNiBjb2wtc20tNiBjb2wtbWQtNiI+PGEgY2xhc3M9Im1lbnUtaW1nIiBocmVmPSIvY2xhbmVrL1Byb2pla3RpL0xpcGtvL2NpZC8xNTUiPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC82NDIxL3J3LzIwMC9yaC8yMDAvcnAvdHJ1ZS9yZC90cnVlL3dtLzAvaC9lYzZiYzYiPjxzcGFuPkxpcGtvPC9zcGFuPjwvYT48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBjb2wteHMtNiBldmVudC1tZW51Ij48ZGl2IGNsYXNzPSJyb3ciPjxkaXYgY2xhc3M9ImNvbC14eHMtMTIgY29sLXhzLTYgY29sLXNtLTYgY29sLW1kLTYiPjxhIGNsYXNzPSJtZW51LWltZyIgaHJlZj0iL2NsYW5lay9Qcm9qZWt0aS9SZWdpanNrby1zZWxla2Npb25pcmFuamUvY2lkLzkzIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNjQyMi9ydy8yMDAvcmgvMjAwL3JwL3RydWUvcmQvdHJ1ZS93bS8wL2gvOGIzMzk0Ij48c3Bhbj5SZWdpanNrbyBzZWxla2Npb25pcmFuamU8L3NwYW4+PC9hPjwvZGl2PjxkaXYgY2xhc3M9ImNvbC14eHMtMTIgY29sLXhzLTYgY29sLXNtLTYgY29sLW1kLTYiPjxhIGNsYXNzPSJtZW51LWltZyIgaHJlZj0iL2NsYW5lay9Qcm9qZWt0aS9LWlMtdGFib3IvY2lkLzkyIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNjQyMy9ydy8yMDAvcmgvMjAwL3JwL3RydWUvcmQvdHJ1ZS93bS8wL2gvN2EwZTY5Ij48c3Bhbj5UYWJvcmkgS1pTPC9zcGFuPjwvYT48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBjb2wteHMtNiBldmVudC1tZW51Ij48ZGl2IGNsYXNzPSJyb3ciPjxkaXYgY2xhc3M9ImNvbC14eHMtMTIgY29sLXhzLTYgY29sLXNtLTYgY29sLW1kLTYiPjxhIGNsYXNzPSJtZW51LWltZyIgaHJlZj0iL2NsYW5lay9Qcm9qZWt0aS9Lb3NhcmthcnNraS1zdXBlcnNvbGFyL2NpZC85NCI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzY0MjQvcncvMjAwL3JoLzIwMC9ycC90cnVlL3JkL3RydWUvd20vMC9oLzY2Yjg4ZCI+PHNwYW4+S2/FoWFya2Fyc2tpIHN1cGVyxaFvbGFyPC9zcGFuPjwvYT48L2Rpdj48ZGl2IGNsYXNzPSJjb2wteHhzLTEyIGNvbC14cy02IGNvbC1zbS02IGNvbC1tZC02Ij48YSBjbGFzcz0ibWVudS1pbWciIGhyZWY9Ii9jbGFuZWsvUHJvamVrdGkvVTE0LVNsb3ZlbmlhLUJhbGwvY2lkLzk1Ij48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNjQyOC9ydy8yMDAvcmgvMjAwL3JwL3RydWUvcmQvdHJ1ZS93bS8wL2gvYmE3ODNhIj48c3Bhbj5VMTQgU2xvdmVuaWEgQmFsbDwvc3Bhbj48L2E+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgY29sLXhzLTYgZXZlbnQtbWVudSI+PGRpdiBjbGFzcz0icm93Ij48ZGl2IGNsYXNzPSJjb2wteHhzLTEyIGNvbC14cy02IGNvbC1zbS02IGNvbC1tZC02Ij48YSBjbGFzcz0ibWVudS1pbWciIGhyZWY9Ii9jbGFuZWsvUHJvamVrdGkvRGFuLXNsb3ZlbnNrZS1rb3NhcmtlL2NpZC85NiI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzY0MjUvcncvMjAwL3JoLzIwMC9ycC90cnVlL3JkL3RydWUvd20vMC9oLzc4MWI5MCI+PHNwYW4+RGFuIHNsb3ZlbnNrZSBrb8WhYXJrZTwvc3Bhbj48L2E+PC9kaXY+PGRpdiBjbGFzcz0iY29sLXh4cy0xMiBjb2wteHMtNiBjb2wtc20tNiBjb2wtbWQtNiI+PGEgY2xhc3M9Im1lbnUtaW1nIiBocmVmPSIvY2xhbmVrL1Byb2pla3RpL1Bva2FsLUV1cm9iYXNrZXQtMjAxNy9jaWQvMjAwIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNjQyNi9ydy8yMDAvcmgvMjAwL3JwL3RydWUvcmQvdHJ1ZS93bS8wL2gvMjUxZWUwIj48c3Bhbj5Qb2thbCBFdXJvYmFza2V0IDIwMTc8L3NwYW4+PC9hPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvbGk+PGxpIGNsYXNzPSJkcm9wZG93biI+PGEgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSI+S2/FoWFya2EgM3gzPC9hPjxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPjxkaXYgY2xhc3M9ImNvbnRhaW5lci1ib290c3RyYXAiPjxkaXYgY2xhc3M9InJvdyI+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48bGk+PGEgaHJlZj0iL2NsYW5lay8zeDMvTy0zeDMvY2lkLzIwNyI+TyAzeDM8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay8zeDMvUHJhdmlsYS9jaWQvMzcyIj5QcmF2aWxhPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvM3gzL1JlcHJlemVudGFuY2UvY2lkLzM0NSI+UmVwcmV6ZW50YW5jZTwvYT48L2xpPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48bGk+PGEgaHJlZj0iL2NsYW5lay8zeDMvR3Jvc2Jhc2tldC1EUC9jaWQvMjA5Ij5Hcm9zYmFza2V0IERQPC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LjN4M2xqdWJsamFuYWNoYWxsZW5nZXIuY29tLyIgdGFyZ2V0PSJfYmxhbmsiPkxqdWJsamFuYSBDaGFsbGVuZ2VyPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvM3gzL01lZG5hci4ta2x1YnNrYS10ZWttLi9jaWQvMzYwIj5NZWRuYXJvZG5hIGtsdWJza2EgdGVrbW92YW5qYTwvYT48L2xpPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48bGk+PGEgaHJlZj0iL2NsYW5lay8zeDMvTG9rYWxjaS9jaWQvMjA4Ij5Mb2thbG5pIHR1cm5pcmppPC9hPjwvbGk+PC91bD48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiI+PHVsPjwvdWw+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9saT48bGkgY2xhc3M9ImRyb3Bkb3duIj48YSBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIj5Pcmdhbml6YWNpamE8L2E+PGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSI+PGRpdiBjbGFzcz0iY29udGFpbmVyLWJvb3RzdHJhcCI+PGRpdiBjbGFzcz0icm93Ij48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiI+PHVsPjxsaT48YSBocmVmPSIvY2xhbmVrL09yZ2FuaXphY2lqYS9Wc2Utby1LWlMvY2lkLzEyNSI+VnNlIG8gS1pTPC9hPjwvbGk+PGxpPjxhPsSMbGFuaSBpbiBvcmdhbmk8L2E+PHVsPjxsaT48YSBocmVmPSIvY2xhbmVrL09yZ2FuaXphY2lqYS9DbGFuaS1pbi1vcmdhbmkvT3JnYW5pL2NpZC8xMjciPk9yZ2FuaTwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL09yZ2FuaXphY2lqYS9DbGFuaS1pbi1vcmdhbmkvQ2xhbmkvY2lkLzEyOCI+xIxsYW5pPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvT3JnYW5pemFjaWphL0NsYW5pLWluLW9yZ2FuaS9aZHJ1emVuamEvY2lkLzEyOSI+WmRydcW+ZW5qYTwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL09yZ2FuaXphY2lqYS9DbGFuaS1pbi1vcmdhbmkvU3RhbG5lLWtvbWlzaWplL2NpZC8xNDMiPlN0YWxuZSBrb21pc2lqZTwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL09yZ2FuaXphY2lqYS9DbGFuaS1pbi1vcmdhbmkvTGljZW5jaXJhbmplL2NpZC8xNTIiPkxpY2VuY2lyYW5qZTwvYT48L2xpPjwvdWw+PC9saT48L3VsPjwvZGl2PjxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02Ij48dWw+PGxpPjxhPkRva3VtZW50aTwvYT48dWw+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvT3JnYW5pemFjaWphL0Rva3VtZW50aS9QcmF2aWxuaWtpL2NpZC8xMzUiPlByYXZpbG5pa2k8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9Pcmdhbml6YWNpamEvRG9rdW1lbnRpL0Rva3VtZW50aS9jaWQvMTM2Ij5Eb2t1bWVudGk8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9Pcmdhbml6YWNpamEvRG9rdW1lbnRpL09icmF6Y2kvY2lkLzEzNyI+T2JyYXpjaTwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL09yZ2FuaXphY2lqYS9Eb2t1bWVudGkvUmF6cGlzaS9jaWQvMTUzIj5SYXpwaXNpPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvT3JnYW5pemFjaWphL0Rva3VtZW50aS9Wb2RlbmplLXN0YXRpc3Rpa2UvY2lkLzEzOCI+Vm9kZW5qZSBzdGF0aXN0aWtlPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvT3JnYW5pemFjaWphL0Rva3VtZW50aS9TZW1pbmFyamktemEtcG9tb3puZS1zb2RuaWtlL2NpZC80MTAiPlNlbWluYXJqaSB6YSBwb21vxb5uZSBzb2RuaWtlPC9hPjwvbGk+PC91bD48L2xpPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48bGk+PGEgaHJlZj0iL2NsYW5lay9Pcmdhbml6YWNpamEvSW50ZWdyaXRldGEtaW4temFzY2l0YS1pZ3JlL2NpZC80MDAiPkludGVncml0ZXRhIGluIHphxaHEjWl0YSBpZ3JlPC9hPjx1bD48bGk+PGEgaHJlZj0iL2NsYW5lay9Pcmdhbml6YWNpamEvSW50ZWdyaXRldGEtaW4temFzY2l0YS1pZ3JlL1Nwb3JvY2lsby1wcmVkc2VkbmlrYS1LWlMvY2lkLzQwMSI+U3Bvcm/EjWlsbyBwcmVkc2VkbmlrYSBLWlM8L2E+PC9saT48bGk+PGEgaHJlZj0iL2NsYW5lay9Pcmdhbml6YWNpamEvSW50ZWdyaXRldGEtaW4temFzY2l0YS1pZ3JlL0tvZGVrcy1pbnRlZ3JpdGV0ZS1LWlMvY2lkLzQwMiI+S29kZWtzIGludGVncml0ZXRlIEtaUzwvYT48L2xpPjxsaT48YSBocmVmPSJodHRwczovL2Fub25pbW5hcHJpamF2YS5renMuc2kvIiB0YXJnZXQ9Il9ibGFuayI+QW5vbmltbmEgcHJpamF2YTwvYT48L2xpPjwvdWw+PC9saT48L3VsPjwvZGl2PjxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02Ij48dWw+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvT3JnYW5pemFjaWphL0JpbHRlbmkvY2lkLzEzMiI+QmlsdGVuaTwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL09yZ2FuaXphY2lqYS9Mb2dvdGlwaS9jaWQvMTMwIj5Mb2dvdGlwaTwvYT48L2xpPjxsaT48YSBocmVmPSIvY2xhbmVrL09yZ2FuaXphY2lqYS9Qb3ZlemF2ZS9jaWQvMTMzIj5Qb3ZlemF2ZTwvYT48L2xpPjwvdWw+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9saT48bGkgY2xhc3M9ImRyb3Bkb3duIj48YSBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIj5Bbm9uLiBwcmlqYXZhPC9hPjxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPjxkaXYgY2xhc3M9ImNvbnRhaW5lci1ib290c3RyYXAiPjxkaXYgY2xhc3M9InJvdyI+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48bGk+PGEgaHJlZj0iaHR0cHM6Ly9hbm9uaW1uYXByaWphdmEua3pzLnNpLyIgdGFyZ2V0PSJfYmxhbmsiPkFub24uIHByaWphdmE8L2E+PC9saT48L3VsPjwvZGl2PjxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02Ij48dWw+PC91bD48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiI+PHVsPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48L3VsPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvbGk+PGxpIGNsYXNzPSJkcm9wZG93biI+PGEgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSI+Qml6QmFza2V0IDN4MzwvYT48ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51Ij48ZGl2IGNsYXNzPSJjb250YWluZXItYm9vdHN0cmFwIj48ZGl2IGNsYXNzPSJyb3ciPjxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02Ij48dWw+PGxpPjxhIGhyZWY9Ii9jbGFuZWsvQml6QmFza2V0LTN4My9jaWQvNDExIj5CaXpCYXNrZXQgM3gzPC9hPjwvbGk+PC91bD48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiI+PHVsPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYiPjx1bD48L3VsPjwvZGl2PjxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02Ij48dWw+PC91bD48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48L2xpPjwvdWw+CgkJCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCWpRdWVyeSgndWwubmF2IGxpLmRyb3Bkb3duJykuaG92ZXIoZnVuY3Rpb24oKSB7CgkJalF1ZXJ5KHRoaXMpLmZpbmQoJy5kcm9wZG93bi1tZW51Jykuc3RvcCh0cnVlLCB0cnVlKS5kZWxheSgxMDApLmZhZGVJbigzMDApOwoJCX0sIGZ1bmN0aW9uKCkgewoJCQlqUXVlcnkodGhpcykuZmluZCgnLmRyb3Bkb3duLW1lbnUnKS5zdG9wKHRydWUsIHRydWUpLmRlbGF5KDEwMCkuZmFkZU91dCgzMDApOwoJCX0pOwp9KTsKPC9zY3JpcHQ+CiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaGVhZGVyLXNlYXJjaCI+CiAgICAgICAgICA8Zm9ybSBjbGFzcz0ibmF2YmFyLWZvcm0gbmF2YmFyLWxlZnQiIHJvbGU9InNlYXJjaCIgYWN0aW9uPSIvaXNrYW5qZSIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgPGJ1dHRvbiBpZD0ic2VhcmNoLWJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCIgb25jbGljaz0icmV0dXJuIFRvcE5hdi5vblNlYXJjaE9wZW5DbGljayh0aGlzKTsiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICA8ZGl2IGlkPSJzZWFyY2gtZm9ybSIgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJzZWFyY2hRdWVyeSIgb25rZXlkb3duPSJDb21tb24uc3VibWl0Q2xvc2VzdEZvcm1PbkVudGVyKHRoaXMsIGV2ZW50LCAnc2VhcmNoJyk7IiBwbGFjZWhvbGRlcj0iSXNrYW5qZSBrbHVib3YiPgogICAgICAgICAgICAgICAgPHNwYW4gaWQ9InNlYXJjaC1pY29uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24iIG9uY2xpY2s9ImNvbW1vblN1Ym1pdENsb3Nlc3RGb3JtKHRoaXMsICdzZWFyY2gnKSI+PHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L3NwYW4+PC9zcGFuPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2Rpdj48IS0tIC9pbnB1dC1ncm91cCAtLT4KCiAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBzb2NpYWwtbWVudSI+CiAgICAgICAgICA8bGk+PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20va3pzX3NpLyI+PGkgY2xhc3M9Imt6cy1pbnN0YWdyYW0iPjwvaT48L2E+PC9saT4KICAgICAgICAgIDxsaT48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9renNzbG9iYXNrZXQiPjxpIGNsYXNzPSJrenMtdmlkZW8tYWx0Ij48L2k+PC9hPjwvbGk+CiAgICAgICAgICA8bGk+PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9rb3N6dmV6YS8iPjxpIGNsYXNzPSJrenMtZmFjZWJvb2siPjwvaT48L2E+PC9saT4KICAgICAgICAgIDxsaT48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9renNfc2kiPjxpIGNsYXNzPSJrenMtdHdpdHRlciI+PC9pPjwvYT48L2xpPgogICAgICAgIDwvdWw+CgogICAgICA8L2Rpdj48IS0tLy5uYXYtY29sbGFwc2UgLS0+CiAgICA8L2Rpdj4KICA8L25hdj4KPC9oZWFkZXI+Cgo8ZGl2IGNsYXNzPSJyb3ciPjxkaXYgY2xhc3M9ImNvbC1zbS0xMiBpbWFnZSI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzI5NzQvd20vMC9oLzQxOWNiMiI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzQ5MTkvd20vMC9oLzU0N2MzOCIgY2xhc3M9ImhlYWRlci1pbWFnZSI+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj48ZGl2IGNsYXNzPSJyb3ciPjxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItaW52ZXJzZSBuYXZiYXItc2Vjb25kIiBzdHlsZT0ibWFyZ2luLXRvcDoxMHB4OyI+PGRpdiBjbGFzcz0iIj48ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUgY29sbGFwc2VkIiBvbmNsaWNrPSJUb3BOYXYudG9nZ2xlTWVudTIodGhpcyk7Ij48c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+PHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+PHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+PHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+PC9idXR0b24+PC9kaXY+PGRpdiBpZD0ibmF2YmFyLXR3byIgY2xhc3M9ImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSI+PHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBtYWluLW1lbnUiIGlkPSJtZW51Ij48bGkgY2xhc3M9ImRyb3Bkb3duIj48YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9jbGFua2kvTm92aWNlL1Rla21vdmFuamEvTGlnYS1Ob3ZhLUtCTS9pZC8yOSNtZW51IiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIj5Ob3ZpY2U8L2E+PC9saT48bGkgY2xhc3M9ImRyb3Bkb3duIj48YSBocmVmPSIvY2xhbmVrL1Rla21vdmFuamEvTGlnYS1Ob3ZhLUtCTS9QcmVzdG9waS9jaWQvMzczI21lbnUiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiPlByZXN0b3BpPC9hPjwvbGk+PGxpIGNsYXNzPSJkcm9wZG93biI+PGEgaHJlZj0iL2NsYW5lay9UZWttb3ZhbmphL0xpZ2EtTm92YS1LQk0vTVZQL2NpZC8xMzQjbWVudSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSI+TVZQPC9hPjwvbGk+PGxpIGNsYXNzPSJkcm9wZG93biI+PGEgaHJlZj0iL2NsYW5lay9UZWttb3ZhbmphL0xpZ2EtTm92YS1LQk0vVnNpLXBydmFraS9jaWQvMTgwI21lbnUiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiPlZzaSBwcnZha2k8L2E+PC9saT48bGkgY2xhc3M9ImRyb3Bkb3duIj48YSBocmVmPSJodHRwOi8vY21zLmRhZy1maWxlcy5jb20vYXJ0aWNsZS9pZC8xNDcjbWVudSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSI+WmRydcW+ZW5qZTwvYT48L2xpPjwvdWw+PC9kaXY+PC9kaXY+PC9uYXY+PC9kaXY+PC9kaXY+CgkKCTxkaXYgaWQ9Im1haW4iIGNsYXNzPSIiPjwhLS1taWRkbGUgcGFydHMgc3RhcnRzLS0+CgkJPGRpdiBjbGFzcz0iY2F0LW5rYm0gIj4KCQkJPGRpdiBjbGFzcz0iIj4KCgkJCQkKCgoKCQkKCQkJCQoKCgoKCgoKCjwhLS0gamF2YXNjcmlwdCBjaGVjayAtLT4KPG5vc2NyaXB0PgogICAgJmx0O2RpdiBjbGFzcz0iZXJyb3JtZXNzYWdlIiZndDtaYSBwcmF2aWxubyBkZWxvdmFuamUgbW9yYXRlIGltZXRpIHYgYnJza2FsbmlrdSBvbW9nb8SNZW4gSmF2YVNjcmlwdCZsdDsvZGl2Jmd0Owo8L25vc2NyaXB0Pgo8IS0tIGNvb2tpZXMgY2hlY2sgLS0+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIGpRdWVyeShmdW5jdGlvbigpIHsKICAgICAgICBpZiAoIWFyZUNvb2tpZXNFbmFibGVkKCkpIHsKICAgICAgICAgICAgYWRkRXJyb3JNZXNzYWdlKCdaYSBwcmF2aWxubyBkZWxvdmFuamUgbW9yYXRlIGltZXRpIHYgYnJza2FsbmlrdSBvbW9nb8SNZW5lIHBpxaFrb3RrZSAoY29va2llcyknKTsKICAgICAgICB9CiAgICB9KTsKPC9zY3JpcHQ+CgoKPGRpdiBpZD0iaW5mb21lc3NhZ2VfdGVtcGxhdGUiIGNsYXNzPSJpbmZvbWVzc2FnZSBoaWRkZW4iIG9uY2xpY2s9ImpRdWVyeSh0aGlzKS5mYWRlT3V0KCkiPjwvZGl2Pgo8ZGl2IGlkPSJlcnJvcm1lc3NhZ2VfdGVtcGxhdGUiIGNsYXNzPSJlcnJvcm1lc3NhZ2UgaGlkZGVuIiBvbmNsaWNrPSJqUXVlcnkodGhpcykuZmFkZU91dCgpIj48L2Rpdj4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KZnVuY3Rpb24gYWRkSW5mb01lc3NhZ2UobWVzc2FnZSkgewoJdmFyIGluZm9tID0galF1ZXJ5KCIjaW5mb21lc3NhZ2VfdGVtcGxhdGUiKS5jbG9uZSgpLnJlbW92ZUNsYXNzKCJoaWRkZW4iKS5yZW1vdmVBdHRyKCJpZCIpLmh0bWwobWVzc2FnZSk7CglqUXVlcnkoIiNpbmZvbWVzc2FnZV90ZW1wbGF0ZSIpLmJlZm9yZShpbmZvbSk7Cn0KZnVuY3Rpb24gYWRkRXJyb3JNZXNzYWdlKG1lc3NhZ2UpIHsKCXZhciBlcnJvcm0gPSBqUXVlcnkoIiNlcnJvcm1lc3NhZ2VfdGVtcGxhdGUiKS5jbG9uZSgpLnJlbW92ZUNsYXNzKCJoaWRkZW4iKS5yZW1vdmVBdHRyKCJpZCIpLmh0bWwobWVzc2FnZSk7CglqUXVlcnkoIiNlcnJvcm1lc3NhZ2VfdGVtcGxhdGUiKS5iZWZvcmUoZXJyb3JtKTsKfQogICAgCiAgICBmdW5jdGlvbiBjcmVhdGVDb29raWUobmFtZSwgdmFsdWUsIGRheXMpIHsKICAgICAgICB2YXIgZXhwaXJlczsKICAgICAgICBpZiAoZGF5cykgewogICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgICAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIChkYXlzICogMjQgKiA2MCAqIDYwICogMTAwMCkpOwogICAgICAgICAgICBleHBpcmVzID0gIjsgZXhwaXJlcz0iICsgZGF0ZS50b0dNVFN0cmluZygpOwogICAgICAgIH0KICAgICAgICBlbHNlIGV4cGlyZXMgPSAiIjsKICAgICAgICBkb2N1bWVudC5jb29raWUgPSBuYW1lICsgIj0iICsgdmFsdWUgKyBleHBpcmVzICsgIjsgcGF0aD0vIjsKICAgIH0KCiAgICBmdW5jdGlvbiByZWFkQ29va2llKG5hbWUpIHsKICAgICAgICB2YXIgbmFtZUVRID0gbmFtZSArICI9IjsKICAgICAgICB2YXIgY2EgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBjID0gY2FbaV07CiAgICAgICAgICAgIHdoaWxlIChjLmNoYXJBdCgwKSA9PSAnICcpIGMgPSBjLnN1YnN0cmluZygxLCBjLmxlbmd0aCk7CiAgICAgICAgICAgIGlmIChjLmluZGV4T2YobmFtZUVRKSA9PSAwKSByZXR1cm4gYy5zdWJzdHJpbmcobmFtZUVRLmxlbmd0aCwgYy5sZW5ndGgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICBmdW5jdGlvbiBlcmFzZUNvb2tpZShuYW1lKSB7CiAgICAgICAgY3JlYXRlQ29va2llKG5hbWUsICIiLCAtMSk7CiAgICB9CgogICAgZnVuY3Rpb24gYXJlQ29va2llc0VuYWJsZWQoKSB7CiAgICAgICAgdmFyIHIgPSBmYWxzZTsKICAgICAgICBjcmVhdGVDb29raWUoInRlc3RpbmciLCAiSGVsbG8iLCAxKTsKICAgICAgICBpZiAocmVhZENvb2tpZSgidGVzdGluZyIpICE9IG51bGwpIHsKICAgICAgICAgICAgciA9IHRydWU7CiAgICAgICAgICAgIGVyYXNlQ29va2llKCJ0ZXN0aW5nIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiByOwogICAgfSAgICAgICAgCjwvc2NyaXB0PgoKCQoJCQkKCQkJCQkJCQoKPGRpdiBjbGFzcz0iY29udGFpbmVyLWJvb3RzdHJhcCI+PGRpdiBjbGFzcz0icm93ICI+PGRpdiBjbGFzcz0iY29sLW1kLTEyIj48aDE+TGlnYSBOb3ZhIEtCTTwvaDE+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz0iY29udGFpbmVyLWJvb3RzdHJhcCI+PGRpdiBjbGFzcz0icm93Ij48ZGl2IGNsYXNzPSIgYXJ0LWNvbnRlbnQiPjxkaXYgY2xhc3M9InRhYnMtaGVhZGVyIHRleHQtY2VudGVyIj4KICAgICAgPGgyIGNsYXNzPSJoZWFkaW5nLW9uZSIgaWQ9ImZwX3dpZGdldF90YWJzX2NvbnQiPgoJCQk8YSBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkgYWN0aXZlIiBocmVmPSIjc3RhbmRpbmdzIj5MRVNUVklDQTwvYT4JCiAgICAgIDwvaDI+CiAgICAgIAk8L2Rpdj4KCjxkaXYgY2xhc3M9ImNvbnRhaW5lciI+Cgk8ZGl2IGlkPSJzY2hlZHVsZSIgbWJ0X3dpZGdldD0iMzAzIj48ZGl2IGlkPSJtYnQtdjItc2NoZWR1bGUtbG9uZyIgY2xhc3M9Im1idC12Mi13aWRnZXQiPgoJPGRpdiBjbGFzcz0ibWJ0LXYyLWhlYWRlciI+CgkJCQkJUmF6cG9yZWQgaW4gcmV6dWx0YXRpCgkJCTwvZGl2PgoJPGRpdiBjbGFzcz0ibWJ0LXYyLXdpZGdldC1jb250ZW50Ij4KCQk8ZGl2IGlkPSIzMy0zMDMtbW9iaWxlLW1lbnUiIGNsYXNzPSJtYnQtdjItbW9iaWxlLW1lbnUiPgoJCQlSYXpwb3JlZAoJCTwvZGl2PgoJCTxuYXYgaWQ9IjMzLTMwMy1tYnQtdjItbmF2aWdhdGlvbiIgY2xhc3M9Im1idC12Mi1uYXZpZ2F0aW9uIj4KCQkJCQkJPGRpdiBpZD0iMzMtMzAzLXRhYi0xIiBkYXRhLW5hbWU9InNjaGVkdWxlX2FuZF9yZXN1bHRzIiBkYXRhLXR5cGU9InNjaGVkdWxlX29ubHkiIGNsYXNzPSJtYnQtdjItbmF2aWdhdGlvbi10YWItYWN0aXZlIiBwcmV2Y2xhc3NuYW1lPSJtYnQtdjItbmF2aWdhdGlvbi10YWItYWN0aXZlIj4KCQkJCVJhenBvcmVkCgkJCTwvZGl2PgoJCQk8ZGl2IGlkPSIzMy0zMDMtdGFiLTIiIGRhdGEtbmFtZT0ic2NoZWR1bGVfYW5kX3Jlc3VsdHMiIGRhdGEtdHlwZT0icmVzdWx0c19vbmx5IiBjbGFzcz0ibWJ0LXYyLW5hdmlnYXRpb24tdGFiIj4KCQkJCVJlenVsdGF0aQoJCQk8L2Rpdj4KCQk8L25hdj4KCQk8ZGl2IGNsYXNzPSJtYnQtdjItZGl2aWRlciI+PC9kaXY+CgkJPGRpdiBpZD0iMzMtMzAzLW1vYmlsZS1maWx0ZXJzLWJsb2NrIiBjbGFzcz0ibWJ0LXYyLW1vYmlsZS1maWx0ZXJzLWJsb2NrIj4KCQkJRmlsdHJpCgkJPC9kaXY+CgkJPGRpdiBpZD0iMzMtMzAzLWZpbHRlcnMtYmxvY2siIGNsYXNzPSJtYnQtdjItZmlsdGVycy1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSIzMy0zMDMtZmlsdGVyLXNlYXNvbiIgY2xhc3M9Im1idC12Mi1zZWxlY3QiPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjEwNDc4NSIgc2VsZWN0ZWQ9InNlbGVjdGVkIj4KCQkJCQkJCTIwMTgtMjAxOQoJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSI5Nzk0NyI+CgkJCQkJCQkyMDE3LTIwMTgKCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iOTQxNjUiPgoJCQkJCQkJMjAxNi0yMDE3CgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjkxNDg3Ij4KCQkJCQkJCTIwMTUtMjAxNgoJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSI4OTYxMiI+CgkJCQkJCQkyMDE0LTIwMTUKCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iODcyMDEiPgoJCQkJCQkJMjAxMy0yMDE0CgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjYzMTkzIj4KCQkJCQkJCTIwMTItMjAxMwoJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIxNTc5MyI+CgkJCQkJCQkyMDExLTIwMTIKCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTEyODMiPgoJCQkJCQkJMjAxMC0yMDExCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjExMjUzIj4KCQkJCQkJCTIwMDktMjAxMAoJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIxMTIxMyI+CgkJCQkJCQkyMDA4LTIwMDkKCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTExNzMiPgoJCQkJCQkJMjAwNy0yMDA4CgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgCQkJCTxzZWxlY3QgaWQ9IjMzLTMwMy1maWx0ZXItc3RhZ2UiIGRhdGEtZmlsdGVyPSJzdGFnZSIgZGF0YS1sb2FkPSJnZXQtc3RhZ2VzIiBjbGFzcz0ibWJ0LXYyLXNlbGVjdCI+CgkJCQkJPG9wdGlvbiB2YWx1ZT0iIj4KCQkJCQkJVnNpIGRlbGkgdGVrbW92YW5qYQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjIxMjM5NSI+CgkJCQkJCQkxLiBkZWwKCQkJCQkJPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQk8L3NlbGVjdD4KCQkJCQkJCQkJCTxzZWxlY3QgaWQ9IjMzLTMwMy1maWx0ZXItZ2FtZS1kYXkiIGRhdGEtZmlsdGVyPSJnYW1lX2RheSIgZGF0YS1sb2FkPSJnZXQtZ2FtZS1kYXlzIiBjbGFzcz0ibWJ0LXYyLXNlbGVjdCI+CgkJCQkJPG9wdGlvbiB2YWx1ZT0iIj4KCQkJCQkJS29sbwoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjEiPgoJCQkJCQkJMQoJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIyIj4KCQkJCQkJCTIKCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMyI+CgkJCQkJCQkzCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjQiPgoJCQkJCQkJNAoJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSI1Ij4KCQkJCQkJCTUKCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iNiI+CgkJCQkJCQk2CgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjciPgoJCQkJCQkJNwoJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSI4Ij4KCQkJCQkJCTgKCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iOSI+CgkJCQkJCQk5CgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjEwIj4KCQkJCQkJCTEwCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjExIj4KCQkJCQkJCTExCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjEyIj4KCQkJCQkJCTEyCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjEzIj4KCQkJCQkJCTEzCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE0Ij4KCQkJCQkJCTE0CgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE1Ij4KCQkJCQkJCTE1CgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE2Ij4KCQkJCQkJCTE2CgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE3Ij4KCQkJCQkJCTE3CgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE4Ij4KCQkJCQkJCTE4CgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8L3NlbGVjdD4JCgkJCQkJCQkJCQk8c2VsZWN0IGlkPSIzMy0zMDMtZmlsdGVyLXRlYW0iIGRhdGEtZmlsdGVyPSJ0ZWFtIiBkYXRhLWxvYWQ9ImdldC10ZWFtcyIgY2xhc3M9Im1idC12Mi1zZWxlY3QiPgoJCQkJCTxvcHRpb24gdmFsdWU9IiI+CgkJCQkJCUVraXBhCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTY2NDkzIj4KCQkJCQkJCUhlbGlvcyBTdW5zCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE2NTU4MyI+CgkJCQkJCQlIb3BzaSBQb2x6ZWxhCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjMwOTM3MyI+CgkJCQkJCQlJbGlyaWphCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE2NjMyMyI+CgkJCQkJCQlLcmthCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE5ODMwMyI+CgkJCQkJCQlQZXRyb2wgT2xpbXBpamEKCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTY2NTUzIj4KCQkJCQkJCVJvZ2HFoWthCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE5NDk5MyI+CgkJCQkJCQnFoGVuxI11ciBHb3Jlbmpza2EgZ3JhZGJlbmEgZHJ1xb5iYQoJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIxNjY1MDMiPgoJCQkJCQkJxaBlbnRqdXIKCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTk1MzYzIj4KCQkJCQkJCVNpeHQgUHJpbW9yc2thCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE2NjUyMyI+CgkJCQkJCQlabGF0b3JvZyBMYcWha28KCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTwvc2VsZWN0PgoJCQkJCQk8c2VsZWN0IGlkPSIzMy0zMDMtZmlsdGVyLW1vbnRoIiBkYXRhLWZpbHRlcj0ibW9udGgiIGRhdGEtbG9hZD0iZ2V0LW1vbnRocyIgY2xhc3M9Im1idC12Mi1zZWxlY3QiPgoJCQkJPG9wdGlvbiB2YWx1ZT0iYWxsIj4KCQkJCQlNZXNlYwoJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjEwIj4KCQkJCQkJb2t0b2JlcgoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIxMSI+CgkJCQkJCW5vdmVtYmVyCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjEyIj4KCQkJCQkJZGVjZW1iZXIKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMSI+CgkJCQkJCWphbnVhcgoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIyIj4KCQkJCQkJZmVicnVhcgoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJPC9zZWxlY3Q+CgkJCQkKCQk8L2Rpdj4KCQk8ZGl2IGNsYXNzPSJtYnQtdjItZGl2aWRlciI+PC9kaXY+CgkJPGRpdiBpZD0iMzMtMzAzLWNvbnRhaW5lciI+CTx0YWJsZSBpZD0ibWJ0LXYyLXNjaGVkdWxlLXRhYmxlIiBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLWxvbmctdGFibGUgbWJ0LXYyLXRhYmxlIG1idC12Mi12ZXJ0aWNhbC1yZXNwb25zaXZlIj4KCQkJCgkJPHRib2R5PgoJCQkJCQkJPHRyPgoJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJJZ3JhbG5pIGRhbiI+CgkJCQkJCQk0CgkJCQkJCTwvdGQ+CgkJCQkJCQkJCQk8dGQgZGF0YS10aD0iRGF0dW0gaW4gxI1hcyI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg0ODEmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGdhbWVfaWQ9IjQyMzg0ODEiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODc5NTIwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPjAzLjExLjIwMTggMTk6MDA8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4Nzk1MjAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODc5NTIwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg3OTUyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg3OTUyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODc5NTIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1hIiBkYXRhLXRoPSJEb21hxI1pIj4KCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTMwOTM3MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjMwOTM3MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg4MDIxMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5JbGlyaWphPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODgwMjEwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4MDIxMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODAyMTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODAyMTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODQ4MSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NDgxIiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODgwODgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4MDg4MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODA4ODAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODgwODgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODgwODgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODA4ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1NTMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE2NjU1MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4ODEyNjAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+Um9nYcWha2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODEyNjAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODgxMjYwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4MTI2MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4MTI2MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgCQkJCQkJPHRkIGRhdGEtdGg9IkR2b3JhbmEiPgoJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExOSZhbXA7YXJlbmFfaWQ9MTE2NzE1IiBhcmVuYV9pZD0iMTE2NzE1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODgxNTkwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlN0b8W+aWNlPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODgxNTkwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4MTU5MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlQXJlbmEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODgxNTkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2FyZW5hX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iVFYiPgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAmbmJzcDsKCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQoJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iSWdyYWxuaSBkYW4iPgoJCQkJCQkJNAoJCQkJCQk8L3RkPgoJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IkRhdHVtIGluIMSNYXMiPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NDgzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBnYW1lX2lkPSI0MjM4NDgzIiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg4MjMxMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4wMy4xMS4yMDE4IDE5OjAwPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODgyMzEwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4MjMxMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODIzMTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODIzMTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4MjMxMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkJCQkKCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYSIgZGF0YS10aD0iRG9tYcSNaSI+CgkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1MjMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjY1MjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4ODI3MDAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+WmxhdG9yb2cgTGHFoWtvPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODgyNzAwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4MjcwMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODI3MDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODI3MDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODQ4MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NDgzIiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODgzMjAwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4MzIwMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODMyMDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODgzMjAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODgzMjAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODMyMDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xOTQ5OTMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE5NDk5MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4ODM5MDAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+xaBlbsSNdXIgR29yZW5qc2thIGdyYWRiZW5hIGRydcW+YmE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODM5MDAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODgzOTAwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4MzkwMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4MzkwMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgCQkJCQkJPHRkIGRhdGEtdGg9IkR2b3JhbmEiPgoJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExOSZhbXA7YXJlbmFfaWQ9NzEyMyIgYXJlbmFfaWQ9IjcxMjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4ODQyNTAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+VHJpIGxpbGlqZSwgTGHFoWtvPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODg0MjUwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4NDI1MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlQXJlbmEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODg0MjUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2FyZW5hX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iVFYiPgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAmbmJzcDsKCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQoJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iSWdyYWxuaSBkYW4iPgoJCQkJCQkJNAoJCQkJCQk8L3RkPgoJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IkRhdHVtIGluIMSNYXMiPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NDg3JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBnYW1lX2lkPSI0MjM4NDg3IiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg4NTI0MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4wMy4xMS4yMDE4IDE5OjAwPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODg1MjQwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4NTI0MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODUyNDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODUyNDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4NTI0MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkJCQkKCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYSIgZGF0YS10aD0iRG9tYcSNaSI+CgkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY0OTMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjY0OTMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4ODU2NDAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+SGVsaW9zIFN1bnM8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODU2NDAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODg1NjQwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4NTY0MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4NTY0MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICAJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGRhdGEtdGg9IlJlenVsdGF0Ij4KCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkJCQkJICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NDg3JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBjbGFzcz0ibWJ0LXYyLWdhbWUtbGluayIgc2Vhc29uX2lkPSIxMDQ3ODUiIGdhbWVfaWQ9IjQyMzg0ODciIHRpdGxlPSJQcmVkb2dsZWQiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4ODYxMjAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+Jm5ic3A7PC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODg2MTIwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4NjEyMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODYxMjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODYxMjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4NjEyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkgICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIAkKCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYiIgZGF0YS10aD0iR29zdGkiPgoJCQkJCSAgICAKCQkJCQkgICAgCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NjUwMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgdGVhbV9pZD0iMTY2NTAzIiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg4NjQzMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj7FoGVudGp1cjwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4NjQzMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODY0MzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODg2NDMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODg2NDMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICAJCQkJCQk8dGQgZGF0YS10aD0iRHZvcmFuYSI+CgkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE5JmFtcDthcmVuYV9pZD03MDUzIiBhcmVuYV9pZD0iNzA1MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg4NjcwMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj7FoEQgRG9txb5hbGU8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODY3MDAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODg2NzAwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVBcmVuYShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODY3MDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnYXJlbmFfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJUViI+CgkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICZuYnNwOwoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCgkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJJZ3JhbG5pIGRhbiI+CgkJCQkJCQk1CgkJCQkJCTwvdGQ+CgkJCQkJCQkJCQk8dGQgZGF0YS10aD0iRGF0dW0gaW4gxI1hcyI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg0OTMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGdhbWVfaWQ9IjQyMzg0OTMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODg3MzUwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPjA5LjExLjIwMTggMTk6MDA8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODczNTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODg3MzUwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4NzM1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4NzM1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODg3MzUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCQkJCQk8IS0tIFRvIGRvIC0tPgoJCQkJCQkJCQkJCQkJCQkJCQkKCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYSIgZGF0YS10aD0iRG9tYcSNaSI+CgkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1MDMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjY1MDMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4ODc3MTAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+xaBlbnRqdXI8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODc3MTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODg3NzEwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4NzcxMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4NzcxMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICAJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGRhdGEtdGg9IlJlenVsdGF0Ij4KCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkJCQkJICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NDkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBjbGFzcz0ibWJ0LXYyLWdhbWUtbGluayIgc2Vhc29uX2lkPSIxMDQ3ODUiIGdhbWVfaWQ9IjQyMzg0OTMiIHRpdGxlPSJQcmVkb2dsZWQiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4ODgxNzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+Jm5ic3A7PC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODg4MTcwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4ODE3MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODgxNzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODgxNzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4ODE3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkgICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIAkKCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYiIgZGF0YS10aD0iR29zdGkiPgoJCQkJCSAgICAKCQkJCQkgICAgCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NjMyMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgdGVhbV9pZD0iMTY2MzIzIiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg4ODQ3MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5LcmthPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODg4NDcwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4ODQ3MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODg0NzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODg0NzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIAkJCQkJCTx0ZCBkYXRhLXRoPSJEdm9yYW5hIj4KCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTkmYW1wO2FyZW5hX2lkPTcwNjMiIGFyZW5hX2lkPSI3MDYzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODg4NzUwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPk/FoCBIcnXFoWV2ZWMgxaBlbnRqdXI8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODg3NTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODg4NzUwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVBcmVuYShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4ODg3NTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnYXJlbmFfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJUViI+CgkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICZuYnNwOwoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCgkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJJZ3JhbG5pIGRhbiI+CgkJCQkJCQk1CgkJCQkJCTwvdGQ+CgkJCQkJCQkJCQk8dGQgZGF0YS10aD0iRGF0dW0gaW4gxI1hcyI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg0OTUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGdhbWVfaWQ9IjQyMzg0OTUiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODg5NDIwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPjEwLjExLjIwMTggMTc6MDA8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODk0MjAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODg5NDIwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4OTQyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg4OTQyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODg5NDIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1hIiBkYXRhLXRoPSJEb21hxI1pIj4KCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE5NTM2MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE5NTM2MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg4OTc3MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5TaXh0IFByaW1vcnNrYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg4OTc3MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4ODk3NzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODg5NzcwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODg5NzcwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgZGF0YS10aD0iUmV6dWx0YXQiPgoJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCQkJCQkgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg0OTUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGNsYXNzPSJtYnQtdjItZ2FtZS1saW5rIiBzZWFzb25faWQ9IjEwNDc4NSIgZ2FtZV9pZD0iNDIzODQ5NSIgdGl0bGU9IlByZWRvZ2xlZCIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg5MDI0MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4mbmJzcDs8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTAyNDAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODkwMjQwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg5MDI0MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg5MDI0MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODkwMjQwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCSAgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgCQoJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1iIiBkYXRhLXRoPSJHb3N0aSI+CgkJCQkJICAgIAoJCQkJCSAgICAJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NDkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiB0ZWFtX2lkPSIxNjY0OTMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODkwNTMwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPkhlbGlvcyBTdW5zPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODkwNTMwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5MDUzMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTA1MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTA1MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIAkJCQkJCTx0ZCBkYXRhLXRoPSJEdm9yYW5hIj4KCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTkmYW1wO2FyZW5hX2lkPTEwOTU3MSIgYXJlbmFfaWQ9IjEwOTU3MSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg5MDgxMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj7FoEQgQm9uaWZpa2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTA4MTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODkwODEwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVBcmVuYShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTA4MTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnYXJlbmFfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJUViI+CgkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgIMWgcG9ydCBUVgoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCgkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJJZ3JhbG5pIGRhbiI+CgkJCQkJCQk1CgkJCQkJCTwvdGQ+CgkJCQkJCQkJCQk8dGQgZGF0YS10aD0iRGF0dW0gaW4gxI1hcyI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg0OTEmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGdhbWVfaWQ9IjQyMzg0OTEiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODkxNDUwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPjEwLjExLjIwMTggMTk6MDA8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTE0NTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODkxNDUwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg5MTQ1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg5MTQ1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODkxNDUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1hIiBkYXRhLXRoPSJEb21hxI1pIj4KCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NTU4MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE2NTU4MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg5MTgxMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5Ib3BzaSBQb2x6ZWxhPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODkxODEwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5MTgxMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTE4MTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTE4MTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODQ5MSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NDkxIiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODkyMjgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5MjI4MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTIyODAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODkyMjgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODkyMjgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTIyODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0zMDkzNzMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjMwOTM3MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4OTI1NzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+SWxpcmlqYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5MjU3MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTI1NzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODkyNTcwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODkyNTcwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICAJCQkJCQk8dGQgZGF0YS10aD0iRHZvcmFuYSI+CgkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE5JmFtcDthcmVuYV9pZD03MTQzIiBhcmVuYV9pZD0iNzE0MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg5Mjg1MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj7FoEQgUG9semVsYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5Mjg1MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTI4NTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUFyZW5hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg5Mjg1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdhcmVuYV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IlRWIj4KCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkKCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IklncmFsbmkgZGFuIj4KCQkJCQkJCTUKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODQ5OSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODQ5OSIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4OTM0ODAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MTAuMTEuMjAxOCAxOTowMDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5MzQ4MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTM0ODAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODkzNDgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODkzNDgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTM0ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NTUzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2NTUzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODkzODIwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlJvZ2HFoWthPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODkzODIwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5MzgyMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTM4MjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTM4MjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODQ5OSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NDk5IiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODk0MjgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5NDI4MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTQyODAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODk0MjgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODk0MjgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTQyODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1MjMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE2NjUyMyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4OTQ1ODAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+WmxhdG9yb2cgTGHFoWtvPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODk0NTgwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5NDU4MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTQ1ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTQ1ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIAkJCQkJCTx0ZCBkYXRhLXRoPSJEdm9yYW5hIj4KCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTkmYW1wO2FyZW5hX2lkPTg3ODMiIGFyZW5hX2lkPSI4NzgzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODk0ODUwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgRCBSb2dhxaFrYSBTbGF0aW5hPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODk0ODUwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5NDg1MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlQXJlbmEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODk0ODUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2FyZW5hX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iVFYiPgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAmbmJzcDsKCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQoJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iSWdyYWxuaSBkYW4iPgoJCQkJCQkJNQoJCQkJCQk8L3RkPgoJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IkRhdHVtIGluIMSNYXMiPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NDk3JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBnYW1lX2lkPSI0MjM4NDk3IiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg5NTQ3MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4xMS4xMS4yMDE4IDE3OjAwPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODk1NDcwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5NTQ3MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTU0NzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTU0NzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg5NTQ3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkJCQkJPCEtLSBUbyBkbyAtLT4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk0OTkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk0OTkzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODk1ODMwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgZW7EjXVyIEdvcmVuanNrYSBncmFkYmVuYSBkcnXFvmJhPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODk1ODMwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5NTgzMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTU4MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTU4MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODQ5NyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NDk3IiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODk2MjkwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5NjI5MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTYyOTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODk2MjkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODk2MjkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTYyOTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xOTgzMDMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE5ODMwMyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4OTY1ODAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+UGV0cm9sIE9saW1waWphPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODk2NTgwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5NjU4MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTY1ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTY1ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIAkJCQkJCTx0ZCBkYXRhLXRoPSJEdm9yYW5hIj4KCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTkmYW1wO2FyZW5hX2lkPTc2MDMiIGFyZW5hX2lkPSI3NjAzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODk2ODYwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgRCDFoGVuxI11cjwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5Njg2MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTY4NjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUFyZW5hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg5Njg2MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdhcmVuYV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IlRWIj4KCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkKCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IklncmFsbmkgZGFuIj4KCQkJCQkJCTYKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUwNyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODUwNyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4OTc0ODAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MTUuMTEuMjAxOCAxOTowMDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5NzQ4MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTc0ODAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODk3NDgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODk3NDgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTc0ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2MzIzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2MzIzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODk3ODMwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPktya2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTc4MzAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODk3ODMwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg5NzgzMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg5NzgzMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICAJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGRhdGEtdGg9IlJlenVsdGF0Ij4KCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkJCQkJICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NTA3JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBjbGFzcz0ibWJ0LXYyLWdhbWUtbGluayIgc2Vhc29uX2lkPSIxMDQ3ODUiIGdhbWVfaWQ9IjQyMzg1MDciIHRpdGxlPSJQcmVkb2dsZWQiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk4OTg0ODAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+Jm5ic3A7PC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODk4NDgwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5ODQ4MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTg0ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTg0ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg5ODQ4MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkgICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIAkKCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYiIgZGF0YS10aD0iR29zdGkiPgoJCQkJCSAgICAKCQkJCQkgICAgCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE5NTM2MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgdGVhbV9pZD0iMTk1MzYzIiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg5ODgwMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5TaXh0IFByaW1vcnNrYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5ODgwMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTg4MDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODk4ODAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45ODk4ODAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICAJCQkJCQk8dGQgZGF0YS10aD0iRHZvcmFuYSI+CgkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE5JmFtcDthcmVuYV9pZD03MDkzIiBhcmVuYV9pZD0iNzA5MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTg5OTA4MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj7FoEQgTGVvbmEgxaB0dWtsamE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk4OTkwODAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODk5MDgwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVBcmVuYShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTkwODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnYXJlbmFfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJUViI+CgkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgIMWgcG9ydCBUVgoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCgkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJJZ3JhbG5pIGRhbiI+CgkJCQkJCQk2CgkJCQkJCTwvdGQ+CgkJCQkJCQkJCQk8dGQgZGF0YS10aD0iRGF0dW0gaW4gxI1hcyI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MDEmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGdhbWVfaWQ9IjQyMzg1MDEiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45ODk5ODQwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPjE3LjExLjIwMTggPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45ODk5ODQwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTg5OTg0MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTk4NDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk4OTk4NDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTg5OTg0MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkJCQkKCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYSIgZGF0YS10aD0iRG9tYcSNaSI+CgkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0zMDkzNzMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIzMDkzNzMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MDAyMDAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+SWxpcmlqYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwMDIwMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDAyMDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTAwMjAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTAwMjAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgZGF0YS10aD0iUmV6dWx0YXQiPgoJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCQkJCQkgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MDEmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGNsYXNzPSJtYnQtdjItZ2FtZS1saW5rIiBzZWFzb25faWQ9IjEwNDc4NSIgZ2FtZV9pZD0iNDIzODUwMSIgdGl0bGU9IlByZWRvZ2xlZCIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkwMDY3MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4mbmJzcDs8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDA2NzAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTAwNjcwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkwMDY3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkwMDY3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTAwNjcwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCSAgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgCQoJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1iIiBkYXRhLXRoPSJHb3N0aSI+CgkJCQkJICAgIAoJCQkJCSAgICAJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NTIzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiB0ZWFtX2lkPSIxNjY1MjMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTAwOTYwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlpsYXRvcm9nIExhxaFrbzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwMDk2MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDA5NjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTAwOTYwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTAwOTYwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICAJCQkJCQk8dGQgZGF0YS10aD0iRHZvcmFuYSI+CgkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE5JmFtcDthcmVuYV9pZD03MDIzIiBhcmVuYV9pZD0iNzAyMyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkwMTI0MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5IYWxhIFRpdm9saTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwMTI0MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDEyNDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUFyZW5hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkwMTI0MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdhcmVuYV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IlRWIj4KCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkKCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IklncmFsbmkgZGFuIj4KCQkJCQkJCTYKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUwNSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODUwNSIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MDE4NjAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MTcuMTEuMjAxOCAxOTowMDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwMTg2MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDE4NjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTAxODYwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTAxODYwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDE4NjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NDkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2NDkzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTAyMjAwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPkhlbGlvcyBTdW5zPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTAyMjAwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwMjIwMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDIyMDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDIyMDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUwNSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTA1IiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTAyNjYwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwMjY2MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDI2NjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTAyNjYwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTAyNjYwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDI2NjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xOTQ5OTMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE5NDk5MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MDMzMjAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+xaBlbsSNdXIgR29yZW5qc2thIGdyYWRiZW5hIGRydcW+YmE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDMzMjAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTAzMzIwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkwMzMyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkwMzMyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgCQkJCQkJPHRkIGRhdGEtdGg9IkR2b3JhbmEiPgoJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExOSZhbXA7YXJlbmFfaWQ9NzA1MyIgYXJlbmFfaWQ9IjcwNTMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MDM2NTAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+xaBEIERvbcW+YWxlPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTAzNjUwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwMzY1MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlQXJlbmEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTAzNjUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2FyZW5hX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iVFYiPgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAmbmJzcDsKCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQoJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iSWdyYWxuaSBkYW4iPgoJCQkJCQkJNgoJCQkJCQk8L3RkPgoJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IkRhdHVtIGluIMSNYXMiPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NTA5JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTA5IiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkwNDMwMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4xNy4xMS4yMDE4IDE5OjAwPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTA0MzAwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwNDMwMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDQzMDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDQzMDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkwNDMwMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkJCQkKCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYSIgZGF0YS10aD0iRG9tYcSNaSI+CgkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjU1ODMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjU1ODMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MDQ2NTAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+SG9wc2kgUG9semVsYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwNDY1MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDQ2NTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA0NjUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA0NjUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgZGF0YS10aD0iUmV6dWx0YXQiPgoJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCQkJCQkgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MDkmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGNsYXNzPSJtYnQtdjItZ2FtZS1saW5rIiBzZWFzb25faWQ9IjEwNDc4NSIgZ2FtZV9pZD0iNDIzODUwOSIgdGl0bGU9IlByZWRvZ2xlZCIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkwNTEyMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4mbmJzcDs8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDUxMjAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTA1MTIwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkwNTEyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkwNTEyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA1MTIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCSAgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgCQoJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1iIiBkYXRhLXRoPSJHb3N0aSI+CgkJCQkJICAgIAoJCQkJCSAgICAJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NTAzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiB0ZWFtX2lkPSIxNjY1MDMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTA1NDIwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgZW50anVyPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTA1NDIwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwNTQyMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDU0MjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDU0MjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIAkJCQkJCTx0ZCBkYXRhLXRoPSJEdm9yYW5hIj4KCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTkmYW1wO2FyZW5hX2lkPTcxNDMiIGFyZW5hX2lkPSI3MTQzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTA1NjkwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgRCBQb2x6ZWxhPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTA1NjkwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwNTY5MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlQXJlbmEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA1NjkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2FyZW5hX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iVFYiPgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAmbmJzcDsKCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQoJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iSWdyYWxuaSBkYW4iPgoJCQkJCQkJNgoJCQkJCQk8L3RkPgoJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IkRhdHVtIGluIMSNYXMiPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NTAzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTAzIiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkwNjMxMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4xOC4xMS4yMDE4IDE5OjAwPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTA2MzEwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwNjMxMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDYzMTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDYzMTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkwNjMxMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkJCQkKCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYSIgZGF0YS10aD0iRG9tYcSNaSI+CgkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xOTgzMDMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxOTgzMDMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MDY2NjAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+UGV0cm9sIE9saW1waWphPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTA2NjYwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwNjY2MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDY2NjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDY2NjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUwMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTAzIiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTA3MTIwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwNzEyMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDcxMjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA3MTIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA3MTIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDcxMjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1NTMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE2NjU1MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MDc0MTAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+Um9nYcWha2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDc0MTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTA3NDEwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkwNzQxMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkwNzQxMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgCQkJCQkJPHRkIGRhdGEtdGg9IkR2b3JhbmEiPgoJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExOSZhbXA7YXJlbmFfaWQ9MTE2NzE1IiBhcmVuYV9pZD0iMTE2NzE1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTA3NjgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlN0b8W+aWNlPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTA3NjgwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwNzY4MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlQXJlbmEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA3NjgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2FyZW5hX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iVFYiPgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAmbmJzcDsKCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQoJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iSWdyYWxuaSBkYW4iPgoJCQkJCQkJNwoJCQkJCQk8L3RkPgoJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IkRhdHVtIGluIMSNYXMiPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NTEzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTEzIiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkwODQyMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4yNC4xMS4yMDE4IDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwODQyMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDg0MjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA4NDIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA4NDIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDg0MjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk1MzYzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk1MzYzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTA4NzgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlNpeHQgUHJpbW9yc2thPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTA4NzgwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwODc4MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDg3ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDg3ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUxMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTEzIiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTA5MjMwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwOTIzMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDkyMzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA5MjMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA5MjMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MDkyMzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjU1ODMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE2NTU4MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MDk1MzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+SG9wc2kgUG9semVsYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwOTUzMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MDk1MzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA5NTMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA5NTMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICAJCQkJCQk8dGQgZGF0YS10aD0iRHZvcmFuYSI+CgkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE5JmFtcDthcmVuYV9pZD0xMDk1NzEiIGFyZW5hX2lkPSIxMDk1NzEiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MDk3OTAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+xaBEIEJvbmlmaWthPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTA5NzkwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkwOTc5MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlQXJlbmEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTA5NzkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2FyZW5hX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iVFYiPgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAmbmJzcDsKCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQoJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iSWdyYWxuaSBkYW4iPgoJCQkJCQkJNwoJCQkJCQk8L3RkPgoJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IkRhdHVtIGluIMSNYXMiPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NTE5JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTE5IiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkxMDQ3MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4yNC4xMS4yMDE4IDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxMDQ3MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTA0NzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTEwNDcwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTEwNDcwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MTA0NzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NTIzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2NTIzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTExMTgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlpsYXRvcm9nIExhxaFrbzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxMTE4MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTExODAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTExMTgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTExMTgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgZGF0YS10aD0iUmV6dWx0YXQiPgoJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCQkJCQkgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MTkmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGNsYXNzPSJtYnQtdjItZ2FtZS1saW5rIiBzZWFzb25faWQ9IjEwNDc4NSIgZ2FtZV9pZD0iNDIzODUxOSIgdGl0bGU9IlByZWRvZ2xlZCIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkxMTczMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4mbmJzcDs8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTE3MzAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTExNzMwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxMTczMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxMTczMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTExNzMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCSAgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgCQoJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1iIiBkYXRhLXRoPSJHb3N0aSI+CgkJCQkJICAgIAoJCQkJCSAgICAJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk4MzAzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiB0ZWFtX2lkPSIxOTgzMDMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTEyMDMwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlBldHJvbCBPbGltcGlqYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxMjAzMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTIwMzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTEyMDMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTEyMDMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICAJCQkJCQk8dGQgZGF0YS10aD0iRHZvcmFuYSI+CgkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE5JmFtcDthcmVuYV9pZD03MTIzIiBhcmVuYV9pZD0iNzEyMyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkxMjMwMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5UcmkgbGlsaWplLCBMYcWha288L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTIzMDAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTEyMzAwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVBcmVuYShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MTIzMDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnYXJlbmFfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJUViI+CgkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICZuYnNwOwoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCgkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJJZ3JhbG5pIGRhbiI+CgkJCQkJCQk3CgkJCQkJCTwvdGQ+CgkJCQkJCQkJCQk8dGQgZGF0YS10aD0iRGF0dW0gaW4gxI1hcyI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MTEmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGdhbWVfaWQ9IjQyMzg1MTEiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTEzMzcwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPjI0LjExLjIwMTggMTk6MDA8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTMzNzAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTEzMzcwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxMzM3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxMzM3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTEzMzcwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1hIiBkYXRhLXRoPSJEb21hxI1pIj4KCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NjUwMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE2NjUwMyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkxMzc4MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj7FoGVudGp1cjwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxMzc4MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTM3ODAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTEzNzgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTEzNzgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgZGF0YS10aD0iUmV6dWx0YXQiPgoJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCQkJCQkgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MTEmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGNsYXNzPSJtYnQtdjItZ2FtZS1saW5rIiBzZWFzb25faWQ9IjEwNDc4NSIgZ2FtZV9pZD0iNDIzODUxMSIgdGl0bGU9IlByZWRvZ2xlZCIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkxNDI1MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4mbmJzcDs8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTQyNTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTE0MjUwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxNDI1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxNDI1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE0MjUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCSAgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgCQoJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1iIiBkYXRhLXRoPSJHb3N0aSI+CgkJCQkJICAgIAoJCQkJCSAgICAJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MzA5MzczJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiB0ZWFtX2lkPSIzMDkzNzMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTE0NTUwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPklsaXJpamE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTQ1NTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTE0NTUwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxNDU1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxNDU1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgCQkJCQkJPHRkIGRhdGEtdGg9IkR2b3JhbmEiPgoJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExOSZhbXA7YXJlbmFfaWQ9NzA2MyIgYXJlbmFfaWQ9IjcwNjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MTQ4MzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+T8WgIEhydcWhZXZlYyDFoGVudGp1cjwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxNDgzMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTQ4MzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUFyZW5hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxNDgzMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdhcmVuYV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IlRWIj4KCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkKCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IklncmFsbmkgZGFuIj4KCQkJCQkJCTcKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUxNSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODUxNSIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MTU0NzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MjQuMTEuMjAxOCAxOTowMDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxNTQ3MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTU0NzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE1NDcwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE1NDcwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MTU0NzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk0OTkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk0OTkzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTE1ODIwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgZW7EjXVyIEdvcmVuanNrYSBncmFkYmVuYSBkcnXFvmJhPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTE1ODIwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxNTgyMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MTU4MjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MTU4MjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUxNSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTE1IiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTE2MjkwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxNjI5MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTYyOTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE2MjkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE2MjkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MTYyOTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjYzMjMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE2NjMyMyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MTY1OTAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+S3JrYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxNjU5MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTY1OTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE2NTkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE2NTkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICAJCQkJCQk8dGQgZGF0YS10aD0iRHZvcmFuYSI+CgkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE5JmFtcDthcmVuYV9pZD03NjAzIiBhcmVuYV9pZD0iNzYwMyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkxNjg2MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj7FoEQgxaBlbsSNdXI8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTY4NjAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTE2ODYwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVBcmVuYShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MTY4NjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnYXJlbmFfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJUViI+CgkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICZuYnNwOwoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCgkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJJZ3JhbG5pIGRhbiI+CgkJCQkJCQk3CgkJCQkJCTwvdGQ+CgkJCQkJCQkJCQk8dGQgZGF0YS10aD0iRGF0dW0gaW4gxI1hcyI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MTcmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGdhbWVfaWQ9IjQyMzg1MTciIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTE3NDcwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPjI0LjExLjIwMTggMTk6MDA8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTc0NzAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTE3NDcwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxNzQ3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxNzQ3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE3NDcwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1hIiBkYXRhLXRoPSJEb21hxI1pIj4KCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NjU1MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE2NjU1MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkxODIwMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5Sb2dhxaFrYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxODIwMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTgyMDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE4MjAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE4MjAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgZGF0YS10aD0iUmV6dWx0YXQiPgoJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCQkJCQkgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MTcmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGNsYXNzPSJtYnQtdjItZ2FtZS1saW5rIiBzZWFzb25faWQ9IjEwNDc4NSIgZ2FtZV9pZD0iNDIzODUxNyIgdGl0bGU9IlByZWRvZ2xlZCIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkxODY4MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4mbmJzcDs8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MTg2ODAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTE4NjgwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxODY4MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkxODY4MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE4NjgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCSAgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgCQoJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1iIiBkYXRhLXRoPSJHb3N0aSI+CgkJCQkJICAgIAoJCQkJCSAgICAJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NDkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiB0ZWFtX2lkPSIxNjY0OTMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTE4OTgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPkhlbGlvcyBTdW5zPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTE4OTgwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxODk4MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MTg5ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MTg5ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIAkJCQkJCTx0ZCBkYXRhLXRoPSJEdm9yYW5hIj4KCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTkmYW1wO2FyZW5hX2lkPTg3ODMiIGFyZW5hX2lkPSI4NzgzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTE5NTAwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgRCBSb2dhxaFrYSBTbGF0aW5hPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTE5NTAwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkxOTUwMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlQXJlbmEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTE5NTAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2FyZW5hX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iVFYiPgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAmbmJzcDsKCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQoJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iSWdyYWxuaSBkYW4iPgoJCQkJCQkJOAoJCQkJCQk8L3RkPgoJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IkRhdHVtIGluIMSNYXMiPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NTIxJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTIxIiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkyMDMwMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4wOC4xMi4yMDE4IDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyMDMwMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjAzMDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTIwMzAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTIwMzAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjAzMDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MzA5MzczJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMzA5MzczIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTIwNjYwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPklsaXJpamE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjA2NjAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTIwNjYwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyMDY2MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyMDY2MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICAJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGRhdGEtdGg9IlJlenVsdGF0Ij4KCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkJCQkJICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NTIxJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBjbGFzcz0ibWJ0LXYyLWdhbWUtbGluayIgc2Vhc29uX2lkPSIxMDQ3ODUiIGdhbWVfaWQ9IjQyMzg1MjEiIHRpdGxlPSJQcmVkb2dsZWQiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MjExMzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+Jm5ic3A7PC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTIxMTMwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyMTEzMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjExMzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjExMzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyMTEzMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkgICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIAkKCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYiIgZGF0YS10aD0iR29zdGkiPgoJCQkJCSAgICAKCQkJCQkgICAgCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE5ODMwMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgdGVhbV9pZD0iMTk4MzAzIiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkyMTQzMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5QZXRyb2wgT2xpbXBpamE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjE0MzAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTIxNDMwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyMTQzMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyMTQzMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgCQkJCQkJPHRkIGRhdGEtdGg9IkR2b3JhbmEiPgoJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExOSZhbXA7YXJlbmFfaWQ9NzAyMyIgYXJlbmFfaWQ9IjcwMjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MjE3MDAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+SGFsYSBUaXZvbGk8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjE3MDAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTIxNzAwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVBcmVuYShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjE3MDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnYXJlbmFfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJUViI+CgkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICZuYnNwOwoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCgkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJJZ3JhbG5pIGRhbiI+CgkJCQkJCQk4CgkJCQkJCTwvdGQ+CgkJCQkJCQkJCQk8dGQgZGF0YS10aD0iRGF0dW0gaW4gxI1hcyI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MjUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGdhbWVfaWQ9IjQyMzg1MjUiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTIyMzgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPjA4LjEyLjIwMTggPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTIyMzgwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyMjM4MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjIzODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjIzODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyMjM4MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkJCQkKCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYSIgZGF0YS10aD0iRG9tYcSNaSI+CgkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjYzMjMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjYzMjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MjI3MzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+S3JrYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyMjczMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjI3MzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTIyNzMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTIyNzMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgZGF0YS10aD0iUmV6dWx0YXQiPgoJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCQkJCQkgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MjUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGNsYXNzPSJtYnQtdjItZ2FtZS1saW5rIiBzZWFzb25faWQ9IjEwNDc4NSIgZ2FtZV9pZD0iNDIzODUyNSIgdGl0bGU9IlByZWRvZ2xlZCIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkyMzE5MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4mbmJzcDs8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjMxOTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTIzMTkwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyMzE5MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyMzE5MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTIzMTkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCSAgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgCQoJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1iIiBkYXRhLXRoPSJHb3N0aSI+CgkJCQkJICAgIAoJCQkJCSAgICAJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NTUzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiB0ZWFtX2lkPSIxNjY1NTMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTIzNDkwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlJvZ2HFoWthPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTIzNDkwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyMzQ5MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjM0OTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjM0OTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIAkJCQkJCTx0ZCBkYXRhLXRoPSJEdm9yYW5hIj4KCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTkmYW1wO2FyZW5hX2lkPTcwOTMiIGFyZW5hX2lkPSI3MDkzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTIzNzYwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgRCBMZW9uYSDFoHR1a2xqYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyMzc2MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjM3NjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUFyZW5hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyMzc2MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdhcmVuYV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IlRWIj4KCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkKCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IklncmFsbmkgZGFuIj4KCQkJCQkJCTgKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUyMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODUyMyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MjQ0MzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MDguMTIuMjAxOCAxOTowMDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyNDQzMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjQ0MzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI0NDMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI0NDMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjQ0MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NDkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2NDkzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTI0NzgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPkhlbGlvcyBTdW5zPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTI0NzgwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyNDc4MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjQ3ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjQ3ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUyMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTIzIiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTI1MjMwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyNTIzMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjUyMzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI1MjMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI1MjMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjUyMzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1MjMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE2NjUyMyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MjU1MzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+WmxhdG9yb2cgTGHFoWtvPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTI1NTMwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyNTUzMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjU1MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjU1MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIAkJCQkJCTx0ZCBkYXRhLXRoPSJEdm9yYW5hIj4KCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTkmYW1wO2FyZW5hX2lkPTcwNTMiIGFyZW5hX2lkPSI3MDUzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTI1ODAwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgRCBEb23FvmFsZTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyNTgwMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjU4MDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUFyZW5hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyNTgwMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdhcmVuYV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IlRWIj4KCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkKCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IklncmFsbmkgZGFuIj4KCQkJCQkJCTgKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUyNyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODUyNyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MjY0MjAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MDguMTIuMjAxOCAxOTowMDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyNjQyMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjY0MjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI2NDIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI2NDIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjY0MjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY1NTgzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY1NTgzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTI3MjAwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPkhvcHNpIFBvbHplbGE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjcyMDAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTI3MjAwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyNzIwMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyNzIwMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICAJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGRhdGEtdGg9IlJlenVsdGF0Ij4KCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkJCQkJICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NTI3JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBjbGFzcz0ibWJ0LXYyLWdhbWUtbGluayIgc2Vhc29uX2lkPSIxMDQ3ODUiIGdhbWVfaWQ9IjQyMzg1MjciIHRpdGxlPSJQcmVkb2dsZWQiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5Mjc3MzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+Jm5ic3A7PC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTI3NzMwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyNzczMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5Mjc3MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5Mjc3MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyNzczMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkgICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIAkKCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYiIgZGF0YS10aD0iR29zdGkiPgoJCQkJCSAgICAKCQkJCQkgICAgCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE5NDk5MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgdGVhbV9pZD0iMTk0OTkzIiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkyODA0MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj7FoGVuxI11ciBHb3Jlbmpza2EgZ3JhZGJlbmEgZHJ1xb5iYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyODA0MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjgwNDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI4MDQwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI4MDQwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICAJCQkJCQk8dGQgZGF0YS10aD0iRHZvcmFuYSI+CgkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE5JmFtcDthcmVuYV9pZD03MTQzIiBhcmVuYV9pZD0iNzE0MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkyODMxMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj7FoEQgUG9semVsYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyODMxMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MjgzMTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUFyZW5hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkyODMxMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdhcmVuYV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IlRWIj4KCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkKCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IklncmFsbmkgZGFuIj4KCQkJCQkJCTgKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUyOSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODUyOSIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5Mjg5ODAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MDguMTIuMjAxOCAxOTowMDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyODk4MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5Mjg5ODAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI4OTgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI4OTgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5Mjg5ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NTAzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2NTAzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTI5MzMwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgZW50anVyPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTI5MzMwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyOTMzMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjkzMzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MjkzMzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUyOSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTI5IiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTI5NzgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkyOTc4MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5Mjk3ODAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI5NzgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTI5NzgwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5Mjk3ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xOTUzNjMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE5NTM2MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MzAwODAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+U2l4dCBQcmltb3Jza2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzAwODAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTMwMDgwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzMDA4MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzMDA4MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgCQkJCQkJPHRkIGRhdGEtdGg9IkR2b3JhbmEiPgoJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExOSZhbXA7YXJlbmFfaWQ9NzA2MyIgYXJlbmFfaWQ9IjcwNjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MzAzNTAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+T8WgIEhydcWhZXZlYyDFoGVudGp1cjwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzMDM1MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzAzNTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUFyZW5hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzMDM1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdhcmVuYV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IlRWIj4KCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkKCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IklncmFsbmkgZGFuIj4KCQkJCQkJCTkKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUzOSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODUzOSIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MzA5NjAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MTQuMTIuMjAxOCAyMDowMDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzMDk2MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzA5NjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTMwOTYwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTMwOTYwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MzA5NjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk4MzAzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk4MzAzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTMxMzAwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlBldHJvbCBPbGltcGlqYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzMTMwMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzEzMDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTMxMzAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTMxMzAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgZGF0YS10aD0iUmV6dWx0YXQiPgoJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCQkJCQkgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MzkmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGNsYXNzPSJtYnQtdjItZ2FtZS1saW5rIiBzZWFzb25faWQ9IjEwNDc4NSIgZ2FtZV9pZD0iNDIzODUzOSIgdGl0bGU9IlByZWRvZ2xlZCIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkzMTc1MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4mbmJzcDs8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzE3NTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTMxNzUwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzMTc1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzMTc1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTMxNzUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCSAgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgCQoJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1iIiBkYXRhLXRoPSJHb3N0aSI+CgkJCQkJICAgIAoJCQkJCSAgICAJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NDkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiB0ZWFtX2lkPSIxNjY0OTMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTMyMDUwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPkhlbGlvcyBTdW5zPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTMyMDUwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzMjA1MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MzIwNTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MzIwNTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIAkJCQkJCTx0ZCBkYXRhLXRoPSJEdm9yYW5hIj4KCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTkmYW1wO2FyZW5hX2lkPTExNjcxNSIgYXJlbmFfaWQ9IjExNjcxNSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkzMjMyMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5TdG/FvmljZTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzMjMyMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzIzMjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUFyZW5hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzMjMyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdhcmVuYV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IlRWIj4KCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkKCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IklncmFsbmkgZGFuIj4KCQkJCQkJCTkKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUzMSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODUzMSIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MzMwMDAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MTUuMTIuMjAxOCA8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzMwMDAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTMzMDAwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzMzAwMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzMzAwMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTMzMDAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1hIiBkYXRhLXRoPSJEb21hxI1pIj4KCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE5NTM2MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE5NTM2MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkzMzM1MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5TaXh0IFByaW1vcnNrYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzMzM1MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzMzNTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTMzMzUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTMzMzUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgZGF0YS10aD0iUmV6dWx0YXQiPgoJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCQkJCQkgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1MzEmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGNsYXNzPSJtYnQtdjItZ2FtZS1saW5rIiBzZWFzb25faWQ9IjEwNDc4NSIgZ2FtZV9pZD0iNDIzODUzMSIgdGl0bGU9IlByZWRvZ2xlZCIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkzMzgwMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4mbmJzcDs8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzM4MDAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTMzODAwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzMzgwMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzMzgwMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTMzODAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCSAgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgCQoJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1iIiBkYXRhLXRoPSJHb3N0aSI+CgkJCQkJICAgIAoJCQkJCSAgICAJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MzA5MzczJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiB0ZWFtX2lkPSIzMDkzNzMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTM0NDQwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPklsaXJpamE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzQ0NDAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTM0NDQwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzNDQ0MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzNDQ0MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgCQkJCQkJPHRkIGRhdGEtdGg9IkR2b3JhbmEiPgoJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExOSZhbXA7YXJlbmFfaWQ9MTA5NTcxIiBhcmVuYV9pZD0iMTA5NTcxIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTM0NzkwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgRCBCb25pZmlrYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzNDc5MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzQ3OTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUFyZW5hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzNDc5MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdhcmVuYV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IlRWIj4KCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkKCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IklncmFsbmkgZGFuIj4KCQkJCQkJCTkKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUzNyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODUzNyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MzU4MjAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MTUuMTIuMjAxOCA8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzU4MjAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTM1ODIwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzNTgyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzNTgyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTM1ODIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1hIiBkYXRhLXRoPSJEb21hxI1pIj4KCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NjUyMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE2NjUyMyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkzNjIyMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5abGF0b3JvZyBMYcWha288L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzYyMjAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTM2MjIwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzNjIyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzNjIyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICAJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGRhdGEtdGg9IlJlenVsdGF0Ij4KCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkJCQkJICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NTM3JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBjbGFzcz0ibWJ0LXYyLWdhbWUtbGluayIgc2Vhc29uX2lkPSIxMDQ3ODUiIGdhbWVfaWQ9IjQyMzg1MzciIHRpdGxlPSJQcmVkb2dsZWQiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MzY2ODAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+Jm5ic3A7PC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTM2NjgwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzNjY4MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MzY2ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MzY2ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzNjY4MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkgICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIAkKCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYiIgZGF0YS10aD0iR29zdGkiPgoJCQkJCSAgICAKCQkJCQkgICAgCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NjMyMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgdGVhbV9pZD0iMTY2MzIzIiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTkzNjk4MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5LcmthPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTM2OTgwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzNjk4MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MzY5ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MzY5ODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIAkJCQkJCTx0ZCBkYXRhLXRoPSJEdm9yYW5hIj4KCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTkmYW1wO2FyZW5hX2lkPTcxMjMiIGFyZW5hX2lkPSI3MTIzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTM3MjQwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlRyaSBsaWxpamUsIExhxaFrbzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzNzI0MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzcyNDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUFyZW5hKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzNzI0MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdhcmVuYV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IlRWIj4KCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkKCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IklncmFsbmkgZGFuIj4KCQkJCQkJCTkKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUzMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODUzMyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MzgyMTAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MTUuMTIuMjAxOCAxOTowMDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzODIxMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzgyMTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTM4MjEwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTM4MjEwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MzgyMTAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk0OTkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk0OTkzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTM4NTcwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgZW7EjXVyIEdvcmVuanNrYSBncmFkYmVuYSBkcnXFvmJhPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTM4NTcwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzODU3MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5Mzg1NzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5Mzg1NzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODUzMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTMzIiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTM5MDMwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzOTAzMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzkwMzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTM5MDMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTM5MDMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5MzkwMzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1MDMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE2NjUwMyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5MzkzMzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+xaBlbnRqdXI8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5MzkzMzAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTM5MzMwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzOTMzMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTkzOTMzMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgCQkJCQkJPHRkIGRhdGEtdGg9IkR2b3JhbmEiPgoJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExOSZhbXA7YXJlbmFfaWQ9NzYwMyIgYXJlbmFfaWQ9Ijc2MDMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5Mzk2MDAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+xaBEIMWgZW7EjXVyPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTM5NjAwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTkzOTYwMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlQXJlbmEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTM5NjAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2FyZW5hX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iVFYiPgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAmbmJzcDsKCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQoJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iSWdyYWxuaSBkYW4iPgoJCQkJCQkJOQoJCQkJCQk8L3RkPgoJCQkJCQkJCQkJPHRkIGRhdGEtdGg9IkRhdHVtIGluIMSNYXMiPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NTM1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTM1IiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTk0MDIyMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4xNS4xMi4yMDE4IDE5OjAwPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQwMjIwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTk0MDIyMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5NDAyMjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5NDAyMjAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0MDIyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkJCQkKCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYSIgZGF0YS10aD0iRG9tYcSNaSI+CgkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1NTMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjY1NTMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5NDA1NzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+Um9nYcWha2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5NDA1NzAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQwNTcwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0MDU3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0MDU3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICAJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGRhdGEtdGg9IlJlenVsdGF0Ij4KCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkJCQkJICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExNCZhbXA7Z2FtZV9pZD00MjM4NTM1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBjbGFzcz0ibWJ0LXYyLWdhbWUtbGluayIgc2Vhc29uX2lkPSIxMDQ3ODUiIGdhbWVfaWQ9IjQyMzg1MzUiIHRpdGxlPSJQcmVkb2dsZWQiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5NDEwNzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+Jm5ic3A7PC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQxMDcwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTk0MTA3MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlR2FtZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5NDEwNzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnZ2FtZV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5NDEwNzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0MTA3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdsZWFndWVfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkgICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIAkKCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWJ0LXYyLXNjaGVkdWxlLXRlYW0tYiIgZGF0YS10aD0iR29zdGkiPgoJCQkJCSAgICAKCQkJCQkgICAgCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NTU4MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgdGVhbV9pZD0iMTY1NTgzIiBzZWFzb25faWQ9IjEwNDc4NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTk0MTU0MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5Ib3BzaSBQb2x6ZWxhPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQxNTQwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTk0MTU0MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5NDE1NDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5NDE1NDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIAkJCQkJCTx0ZCBkYXRhLXRoPSJEdm9yYW5hIj4KCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTkmYW1wO2FyZW5hX2lkPTg3ODMiIGFyZW5hX2lkPSI4NzgzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTQxODEwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPsWgRCBSb2dhxaFrYSBTbGF0aW5hPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQxODEwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTk0MTgxMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlQXJlbmEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTQxODEwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2FyZW5hX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iVFYiPgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAmbmJzcDsKCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQoJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iSWdyYWxuaSBkYW4iPgoJCQkJCQkJMTAKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODU0MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODU0MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5NDI0NDAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MjAuMTIuMjAxOCAyMDowMDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTk0MjQ0MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5NDI0NDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTQyNDQwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTQyNDQwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5NDI0NDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWEiIGRhdGEtdGg9IkRvbWHEjWkiPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk4MzAzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk4MzAzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTQyNzkwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlBldHJvbCBPbGltcGlqYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTk0Mjc5MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5NDI3OTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTQyNzkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTQyNzkwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgZGF0YS10aD0iUmV6dWx0YXQiPgoJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAJCQkJICAgICAgICAgICAKCQkJCSAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCQkJCQkgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9MTE0JmFtcDtnYW1lX2lkPTQyMzg1NDMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIGNsYXNzPSJtYnQtdjItZ2FtZS1saW5rIiBzZWFzb25faWQ9IjEwNDc4NSIgZ2FtZV9pZD0iNDIzODU0MyIgdGl0bGU9IlByZWRvZ2xlZCIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTk0MzI1MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj4mbmJzcDs8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5NDMyNTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQzMjUwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0MzI1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0MzI1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTQzMjUwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCSAgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgCQoJCSAgICAgICAgICAgIAkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1iIiBkYXRhLXRoPSJHb3N0aSI+CgkJCQkJICAgIAoJCQkJCSAgICAJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2MzIzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiB0ZWFtX2lkPSIxNjYzMjMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTQzNTUwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPktya2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5NDM1NTAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQzNTUwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0MzU1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0MzU1MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgCQkJCQkJPHRkIGRhdGEtdGg9IkR2b3JhbmEiPgoJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExOSZhbXA7YXJlbmFfaWQ9MTE2NzE1IiBhcmVuYV9pZD0iMTE2NzE1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTQzODEwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlN0b8W+aWNlPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQzODEwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTk0MzgxMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlQXJlbmEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTQzODEwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2FyZW5hX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iVFYiPgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICAmbmJzcDsKCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQoJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQk8dGQgZGF0YS10aD0iSWdyYWxuaSBkYW4iPgoJCQkJCQkJMTAKCQkJCQkJPC90ZD4KCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJEYXR1bSBpbiDEjWFzIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODU0MSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgZ2FtZV9pZD0iNDIzODU0MSIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5NDQ2MjAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+MjIuMTIuMjAxOCA8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5NDQ2MjAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQ0NjIwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVHYW1lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0NDYyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdnYW1lX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0NDYyMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTQ0NjIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2xlYWd1ZV9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgPHRkIGNsYXNzPSJtYnQtdjItc2NoZWR1bGUtdGVhbS1hIiBkYXRhLXRoPSJEb21hxI1pIj4KCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTMwOTM3MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjMwOTM3MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTk0NDk3MDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj5JbGlyaWphPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQ0OTcwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTk0NDk3MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5NDQ5NzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5NDQ5NzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJCQkJCQkJICAgICAgICAgICAgCQkgICAgICAgICAgICA8L3RkPgoJCSAgICAgICAgICAgIDx0ZCBkYXRhLXRoPSJSZXp1bHRhdCI+CgkJICAgICAgICAgICAgCQkJCSAgICAgICAgICAgIAkJCQkgICAgICAgICAgIAoJCQkJICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJCQkJCSAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD0xMTQmYW1wO2dhbWVfaWQ9NDIzODU0MSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgY2xhc3M9Im1idC12Mi1nYW1lLWxpbmsiIHNlYXNvbl9pZD0iMTA0Nzg1IiBnYW1lX2lkPSI0MjM4NTQxIiB0aXRsZT0iUHJlZG9nbGVkIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45OTQ1NDMwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPiZuYnNwOzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTk0NTQzMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5NDU0MzAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZUdhbWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTQ1NDMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ2dhbWVfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45OTQ1NDMwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5NDU0MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnbGVhZ3VlX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCSAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgCgkJCQkgICAgICAgICAgICAJCQkgICAgICAgICAgICAJCgkJICAgICAgICAgICAgCQkJICAgICAgICAgICAgPC90ZD4KCQkgICAgICAgICAgICA8dGQgY2xhc3M9Im1idC12Mi1zY2hlZHVsZS10ZWFtLWIiIGRhdGEtdGg9Ikdvc3RpIj4KCQkJCQkgICAgCgkJCQkJICAgIAkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY0OTMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHRlYW1faWQ9IjE2NjQ5MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5NDU3MzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+SGVsaW9zIFN1bnM8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5NDU3MzAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQ1NzMwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0NTczMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTk0NTczMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgIDwvdGQ+CgkJICAgICAgICAgICAgCQkJCQkJPHRkIGRhdGEtdGg9IkR2b3JhbmEiPgoJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTExOSZhbXA7YXJlbmFfaWQ9NzAyMyIgYXJlbmFfaWQ9IjcwMjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk5NDYwMDAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+SGFsYSBUaXZvbGk8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk5NDYwMDAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45OTQ2MDAwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVBcmVuYShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk5NDYwMDAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnYXJlbmFfaWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCTx0ZCBkYXRhLXRoPSJUViI+CgkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgICZuYnNwOwoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCgkJCQk8L3RyPgoJCQkJCTwvdGJvZHk+CQoJPC90YWJsZT4KCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWRpdmlkZXIiPjwvZGl2PgoJCTxkaXYgY2xhc3M9Im1idC12Mi1ncmlkIj4KCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1jb2wgbWJ0LXYyLWNvbC0xMiI+CgkJCQkJPHVsIGNsYXNzPSJtYnQtdjItcGFnaW5hdGlvbiI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTxsaSBjbGFzcz0ibWJ0LXYyLXBhZ2luYXRpb24tYWN0aXZlIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTxzcGFuPgoJCQkJCQkJCQkxCgkJCQkJCQkJPC9zcGFuPgoJCQkJCQkJCQkJCQkJCTwvbGk+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCTxsaT4JCgkJCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSIjIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7IiBpZD0iMzMtMzAzLXBhZ2UtMiI+CgkJCQkJCQkJCTIKCQkJCQkJCQk8L2E+CgkJCQkJCQkJCQkJCQkJPC9saT4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGxpPgkKCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9IiMiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiIGlkPSIzMy0zMDMtcGFnZS0zIj4KCQkJCQkJCQkJMwoJCQkJCQkJCTwvYT4KCQkJCQkJCQkJCQkJCQk8L2xpPgoJCQkJCQkJCQkJCQkJCQkJCQkJPGxpIGNsYXNzPSJtYnQtdjItcGFnaW5hdGlvbi1uZXh0Ij4KCQkJCQkJCQk8YSBocmVmPSIjIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7IiBpZD0iMzMtMzAzLXBhZ2UtbmV4dCI+CgkJCQkJCQkJCeKdryAKCQkJCQkJCQk8L2E+CgkJCQkJCQk8L2xpPgoJCQkJCQkJCQkJCTwvdWw+CgkJCQk8L2Rpdj4KCQkJCQoJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWNvbCBtYnQtdjItY29sLTEyIG1idC12Mi1ncmlkLWVuZCI+CgkJCQkJPGEgaHJlZj0iIyIgaWQ9IjMzLTMwMy1leHBvcnQiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiIGNsYXNzPSJtYnQtdjItZXhwb3J0LWxpbmsiPgoJCQkJCQlJenZvemkKCQkJCQk8L2E+CgkJCQk8L2Rpdj4KCQkJCQoJCTwvZGl2PgoJCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KLy88IVtDREFUQVsKCiAgICAKCXZhciBuYW1lc3BhY2UgPSBNQlQuQVBJLlNhZmVOYW1lcy5Db250YWluZXIoJzMzLTMwMycpOwoKCXZhciBnYW1lc0NvdW50ID0gMzA7CgoJaWYgKGdhbWVzQ291bnQgPT0gMCAmJiBuYW1lc3BhY2UuYWN0aXZlVGFiID09IDApIHsKCQluYW1lc3BhY2UudGFiQ29udHJvbGxlclswXS5zZXRBY3RpdmVUYWIoMSk7Cgl9CgoJbmFtZXNwYWNlLm9uUGFnZUNsaWNrID0gZnVuY3Rpb24oZSwgcGFnZSkgewoJCQoJCW5hbWVzcGFjZS5maWx0ZXJzLnBhZ2UgPSBwYWdlOwoKCQl2YXIgcGFyYW1zID0ge307CgoJICAgIGlmKG5hbWVzcGFjZS5maWx0ZXJzLnN0YWdlKSB7CgkJCXBhcmFtcy5zdGFnZV9pZCA9IG5hbWVzcGFjZS5maWx0ZXJzLnN0YWdlOwoJCX0KCgkJaWYobmFtZXNwYWNlLmZpbHRlcnMuc2Vhc29uKSB7CgkJCXBhcmFtcy5zZWFzb25faWQgPSBuYW1lc3BhY2UuZmlsdGVycy5zZWFzb247CgkJfQoKCQlpZihuYW1lc3BhY2UuZmlsdGVycy5wYWdlKSB7CgkJCXBhcmFtcy5wYWdlID0gbmFtZXNwYWNlLmZpbHRlcnMucGFnZTsKCQl9CgoJCXBhcmFtcy5maWx0ZXIgPSBuYW1lc3BhY2UuZmlsdGVyczsKCQkKCQlNQlQuQVBJLkhpc3Rvcnkuc2V0UGFyYW0oJzMzLTMwMycsIE1CVC5BUEkuSGlzdG9yeS5wYWdlSW5kZXgsIDAsIHBhZ2UpOwoKCQluZXcgTUJULkFQSS5XaWRnZXRzLldpZGdldCh7CgkJCXdpZGdldElkOiAzMDMsCgkJCWNvbnRhaW5lcjogJzMzLTMwMy1jb250YWluZXInLAoJCQlzdGF0ZTogJ016Z3hNemMwTXpBMk5XRTZNakE2ZTNNNk1UYzZJblJsWVcxZmJHbHVhMTkyYVhOcFlteGxJanR6T2pFNklqRWlPM002TWpBNkluTm9iM2RmYzJWaGMyOXVYM05sYkdWamRHOXlJanR6T2pFNklqRWlPM002TVRjNkltZGhiV1ZmYkdsdWExOTJhWE5wWW14bElqdHpPakU2SWpFaU8zTTZNVGs2SW5Cc1lYbGxjbDlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hORG9pZEdWaGJWOXNhVzVyWDNSNWNHVWlPM002TVRvaU15STdjem94TkRvaVoyRnRaVjlzYVc1clgzUjVjR1VpTzNNNk1Ub2lNeUk3Y3pveE5qb2ljR3hoZVdWeVgyeHBibXRmZEhsd1pTSTdjem94T2lJeklqdHpPakUzT2lKMFpXRnRYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hNam9pYm1GMmFXZGhkR1ZVWldGdElqdHpPakUzT2lKbllXMWxYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hNam9pYm1GMmFXZGhkR1ZIWVcxbElqdHpPakU1T2lKd2JHRjVaWEpmYkdsdWExOW9ZVzVrYkdWeUlqdHpPakUwT2lKdVlYWnBaMkYwWlZCc1lYbGxjaUk3Y3pveE9Eb2lZWEpsYm1GZmJHbHVhMTkyYVhOcFlteGxJanR6T2pFNklqRWlPM002TVRVNkltRnlaVzVoWDJ4cGJtdGZkSGx3WlNJN2N6b3hPaUl6SWp0ek9qRTRPaUpoY21WdVlWOXNhVzVyWDJoaGJtUnNaWElpTzNNNk1UTTZJbTVoZG1sbllYUmxRWEpsYm1FaU8zTTZPVG9pYkdWaFozVmxYMmxrSWp0ek9qUTZJamt6TXpNaU8zTTZPVG9pWjJGdFpWOWtZWGx6SWp0ek9qRTZJakVpTzNNNk1UYzZJbk5vYjNkZmNtVm1aWEpsWlY5amFYUjVJanR6T2pFNklqRWlPM002TVRNNkltbDBaVzF6WDI5dVgzQmhaMlVpTzNNNk1qb2lNekFpTzNNNk1qQTZJbk4wWVdkbFgyeGxkbVZzYzE5MmFYTnBZbXhsSWp0ek9qRTZJaklpTzNNNk9Eb2lkR1Z0Y0d4aGRHVWlPM002TWpvaWRqSWlPM002TmpvaVptbHNkR1Z5SWp0aE9qTTZlM002TmpvaWMyVmhjMjl1SWp0ek9qWTZJakV3TkRjNE5TSTdjem8wT2lKMGVYQmxJanR6T2pFek9pSnpZMmhsWkhWc1pWOXZibXg1SWp0ek9qTTZJblJoWWlJN2N6b3lNRG9pYzJOb1pXUjFiR1ZmWVc1a1gzSmxjM1ZzZEhNaU8zMTknLAoJCQlwYXJhbXM6IHBhcmFtcwoJCX0pLnJlbmRlclBhcnRpYWwobmFtZXNwYWNlLmZpbHRlcnMudGFiKTsKCX0KCgkKCQkJCQkJCQkJCQkJCQkJCQlNQlQuQVBJLkV2ZW50Lm9ic2VydmUoJzMzLTMwMy1wYWdlLTInLCAiY2xpY2siLCBNQlQuQVBJLkZ1bmN0aW9uLmNyZWF0ZURlbGVnYXRlKG5hbWVzcGFjZS5vblBhZ2VDbGljaywgbnVsbCwgWzIsIGZhbHNlXSwgMikpOyAKCQkJCQkJCQkJCQkJTUJULkFQSS5FdmVudC5vYnNlcnZlKCczMy0zMDMtcGFnZS0zJywgImNsaWNrIiwgTUJULkFQSS5GdW5jdGlvbi5jcmVhdGVEZWxlZ2F0ZShuYW1lc3BhY2Uub25QYWdlQ2xpY2ssIG51bGwsIFszLCBmYWxzZV0sIDIpKTsgCgkJCQkJCQkJCQlNQlQuQVBJLkV2ZW50Lm9ic2VydmUoJzMzLTMwMy1wYWdlLW5leHQnLCAiY2xpY2siLCBNQlQuQVBJLkZ1bmN0aW9uLmNyZWF0ZURlbGVnYXRlKG5hbWVzcGFjZS5vblBhZ2VDbGljaywgbnVsbCwgWzIsIGZhbHNlXSwgMikpOyAKCQkJCgoKCW5hbWVzcGFjZS5leHBvcnRTY2hlZHVsZSA9IGZ1bmN0aW9uKCkgewoKCQl2YXIgdXJsID0gTUJULkFQSS5TZXJ2aWNlVXJsICsgIndpZGdldC1zZXJ2aWNlL2V4cG9ydC92aWV3L3NjaGVkdWxlX2FuZF9yZXN1bHRzP2FwaT0iICsgTUJULkFQSS5BcGlJZDsKCgkJaWYgKE1CVC5BUEkuTGFuZykgewoJCQl1cmwgKz0gIiZsYW5nPSIgKyBNQlQuQVBJLkxhbmc7CgkJfQoKCQlmb3IoZmlsdGVyIGluIG5hbWVzcGFjZS5maWx0ZXJzKSB7CgkJCWlmKGZpbHRlciA9PSAnc2Vhc29uJykgewoJCQkJbmFtZXNwYWNlLmZpbHRlcnMuc2Vhc29uX2lkID0gbmFtZXNwYWNlLmZpbHRlcnNbZmlsdGVyXTsKCQkJCWZpbHRlciA9ICdzZWFzb25faWQnOwoJCQl9CgkJCXVybCArPSAnJicgK2ZpbHRlciArICc9JyArIG5hbWVzcGFjZS5maWx0ZXJzW2ZpbHRlcl07CgkJfQoKCQl3aW5kb3cubG9jYXRpb24gPSB1cmw7Cgl9CgoJTUJULkFQSS5FdmVudC5vYnNlcnZlKCIzMy0zMDMtZXhwb3J0IiwgImNsaWNrIiwgTUJULkFQSS5GdW5jdGlvbi5jcmVhdGVEZWxlZ2F0ZShuYW1lc3BhY2UuZXhwb3J0U2NoZWR1bGUpKTsKCgkJCgovL11dPgo8L3NjcmlwdD4JPC9kaXY+Cgk8L2Rpdj4KPC9kaXY+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8vPCFbQ0RBVEFbCgoJCgl2YXIgbmFtZXNwYWNlID0gTUJULkFQSS5TYWZlTmFtZXMuQ29udGFpbmVyKCczMy0zMDMnKTsKCgluYW1lc3BhY2UubW9iaWxlTWVudSA9IG5ldyBNQlQuQVBJLmNyZWF0ZVJlc3BvbnNpdmVOYXZpZ2F0aW9uKHsKCQltZW51Q29udGFpbmVyIDogIjMzLTMwMy1tYnQtdjItbmF2aWdhdGlvbiIsCgkJbW9iaWxlTWVudUNvbnRhaW5lciA6ICIzMy0zMDMtbW9iaWxlLW1lbnUiLAoJCW1vYmlsZU1lbnVDbG9zZVRleHQ6ICJJemJlcmkiLAoJfSk7CgoJbmFtZXNwYWNlLm1vYmlsZUZpbHRlcnMgPSBuZXcgTUJULkFQSS5jcmVhdGVSZXNwb25zaXZlTmF2aWdhdGlvbih7CgkJbWVudUNvbnRhaW5lciA6ICIzMy0zMDMtZmlsdGVycy1ibG9jayIsCgkJbW9iaWxlTWVudUNvbnRhaW5lciA6ICIzMy0zMDMtbW9iaWxlLWZpbHRlcnMtYmxvY2siLAoJCWZpbHRlcnNNb2RlOiB0cnVlCgl9KTsKCgluYW1lc3BhY2UuZmlsdGVycyA9IHt9OwoKCW5hbWVzcGFjZS5maWx0ZXJzWydzZWFzb24nXSA9IDEwNDc4NTsKCgluYW1lc3BhY2UuYXZhaWxhYmxlRmlsdGVycyA9IHt9OwoKCXZhciBmaWx0ZXJzID0gTUJULkFQSS5nZXQoJzMzLTMwMy1maWx0ZXJzLWJsb2NrJykuY2hpbGROb2RlczsKCgkKCQkJCgoJaWYoZmlsdGVycykgewoJCWZvcih2YXIgaSA9IDA7IGkgPCAgZmlsdGVycy5sZW5ndGg7IGkrKykgewoJICAgICAgICBpZihmaWx0ZXJzW2ldLm5vZGVUeXBlID09IDEgJiYgZmlsdGVyc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmlsdGVyJykpIHsKCSAgICAgICAgCW5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzW2ZpbHRlcnNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLWZpbHRlcicpXSA9IGZpbHRlcnNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLWxvYWQnKTsKCgkgICAgICAgIH0KCQl9Cgl9CgoJbmFtZXNwYWNlLm9uRmlsdGVyQ2hhbmdlID0gZnVuY3Rpb24oZSwgZmlsdGVyLCBuZWVkUmVsb2FkRmlsdGVycykgewoKCQluYW1lc3BhY2UuZmlsdGVyc1tmaWx0ZXJdID0gZS50YXJnZXQudmFsdWU7CgoJCXZhciBwYXJhbXMgPSB7fTsKCgkJZGVsZXRlIG5hbWVzcGFjZS5maWx0ZXJzLnBhZ2U7CgkJbmFtZXNwYWNlLnJlbG9hZEZpbHRlcnMoZmlsdGVyLCB0cnVlKTsKCgkJaWYobmVlZFJlbG9hZEZpbHRlcnMpIHsKCQkJTUJULkFQSS5IaXN0b3J5LnNldFBhcmFtKCczMy0zMDMnLCBNQlQuQVBJLkhpc3RvcnkucGFnZUluZGV4LCAwLCBudWxsKTsKCQl9CgkgICAgCgkgICAgaWYobmFtZXNwYWNlLmZpbHRlcnMuc3RhZ2UpIHsKCQkJcGFyYW1zLnN0YWdlX2lkID0gbmFtZXNwYWNlLmZpbHRlcnMuc3RhZ2U7CgkJfQoKCQlpZihuYW1lc3BhY2UuZmlsdGVycy5zZWFzb24pIHsKCQkJcGFyYW1zLnNlYXNvbl9pZCA9IG5hbWVzcGFjZS5maWx0ZXJzLnNlYXNvbjsKCQl9CgoJCWlmKG5hbWVzcGFjZS5maWx0ZXJzLnBhZ2UpIHsKCQkJcGFyYW1zLnBhZ2UgPSBuYW1lc3BhY2UuZmlsdGVycy5wYWdlOwoJCX0KCgkJcGFyYW1zLmZpbHRlciA9IG5hbWVzcGFjZS5maWx0ZXJzOwoKCQlNQlQuQVBJLkhpc3Rvcnkuc2V0UGFyYW0oJzMzLTMwMycsIE1CVC5BUEkuSGlzdG9yeS5maWx0ZXJJbmRleCwgZmlsdGVyLCBlLnRhcmdldC52YWx1ZSk7CgoJCW5ldyBNQlQuQVBJLldpZGdldHMuV2lkZ2V0KHsKCQkJd2lkZ2V0SWQ6IDMwMywKCQkJY29udGFpbmVyOiAnMzMtMzAzLWNvbnRhaW5lcicsCgkJCXN0YXRlOiAnTVRRMU16QTJOemt4T1dFNk1UazZlM002TVRjNkluUmxZVzFmYkdsdWExOTJhWE5wWW14bElqdHpPakU2SWpFaU8zTTZNakE2SW5Ob2IzZGZjMlZoYzI5dVgzTmxiR1ZqZEc5eUlqdHpPakU2SWpFaU8zTTZNVGM2SW1kaGJXVmZiR2x1YTE5MmFYTnBZbXhsSWp0ek9qRTZJakVpTzNNNk1UazZJbkJzWVhsbGNsOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE5Eb2lkR1ZoYlY5c2FXNXJYM1I1Y0dVaU8zTTZNVG9pTXlJN2N6b3hORG9pWjJGdFpWOXNhVzVyWDNSNWNHVWlPM002TVRvaU15STdjem94TmpvaWNHeGhlV1Z5WDJ4cGJtdGZkSGx3WlNJN2N6b3hPaUl6SWp0ek9qRTNPaUowWldGdFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVlVaV0Z0SWp0ek9qRTNPaUpuWVcxbFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVkhZVzFsSWp0ek9qRTVPaUp3YkdGNVpYSmZiR2x1YTE5b1lXNWtiR1Z5SWp0ek9qRTBPaUp1WVhacFoyRjBaVkJzWVhsbGNpSTdjem94T0RvaVlYSmxibUZmYkdsdWExOTJhWE5wWW14bElqdHpPakU2SWpFaU8zTTZNVFU2SW1GeVpXNWhYMnhwYm10ZmRIbHdaU0k3Y3pveE9pSXpJanR6T2pFNE9pSmhjbVZ1WVY5c2FXNXJYMmhoYm1Sc1pYSWlPM002TVRNNkltNWhkbWxuWVhSbFFYSmxibUVpTzNNNk9Ub2liR1ZoWjNWbFgybGtJanR6T2pRNklqa3pNek1pTzNNNk9Ub2laMkZ0WlY5a1lYbHpJanR6T2pFNklqRWlPM002TVRjNkluTm9iM2RmY21WbVpYSmxaVjlqYVhSNUlqdHpPakU2SWpFaU8zTTZNVE02SW1sMFpXMXpYMjl1WDNCaFoyVWlPM002TWpvaU16QWlPM002TWpBNkluTjBZV2RsWDJ4bGRtVnNjMTkyYVhOcFlteGxJanR6T2pFNklqSWlPM002T0RvaWRHVnRjR3hoZEdVaU8zTTZNam9pZGpJaU8zMD0nLAoJCQlwYXJhbXM6IHBhcmFtcwoJCX0pLnJlbmRlclBhcnRpYWwobmFtZXNwYWNlLmZpbHRlcnMudGFiKTsKCX0KCgluYW1lc3BhY2UucmVsb2FkRmlsdGVycyA9IGZ1bmN0aW9uKGZpbHRlciwgcmVtb3ZlSGFzaCkgewoKCQlmb3Ioa2V5IGluIG5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzKSB7CgkJCWlmKGtleSAhPSBmaWx0ZXIgKSB7CgkJCQlpZihrZXkgICE9ICdzZWFzb24nKSB7CgkJCQkJaWYocmVtb3ZlSGFzaCkgewoJCQkJCQlNQlQuQVBJLkhpc3Rvcnkuc2V0UGFyYW0oJzMzLTMwMycsIE1CVC5BUEkuSGlzdG9yeS5maWx0ZXJJbmRleCwga2V5LCBudWxsKTsKCQkJCQl9CgkJCQkJZGVsZXRlIG5hbWVzcGFjZS5maWx0ZXJzW2tleV07CgkJCQl9CgkJCQl2YXIgcGFyYW1zID0ge307CgoJCQkgICAgaWYobmFtZXNwYWNlLmZpbHRlcnMuc3RhZ2UpIHsKCQkJCQlwYXJhbXMuc3RhZ2VfaWQgPSBuYW1lc3BhY2UuZmlsdGVycy5zdGFnZTsKCQkJCX0KCgkJCQlpZihuYW1lc3BhY2UuZmlsdGVycy5zZWFzb24pIHsKCQkJCQlwYXJhbXMuc2Vhc29uX2lkID0gbmFtZXNwYWNlLmZpbHRlcnMuc2Vhc29uOwoJCQkJfQoJCQkJbmV3IE1CVC5BUEkuV2lkZ2V0cy5XaWRnZXQoewoJCQkJCXdpZGdldElkOiAzMDMsCgkJCQkJY29udGFpbmVyOiAnMzMtMzAzLWNvbnRhaW5lcicsCgkJCQkJc3RhdGU6ICdNVFExTXpBMk56a3hPV0U2TVRrNmUzTTZNVGM2SW5SbFlXMWZiR2x1YTE5MmFYTnBZbXhsSWp0ek9qRTZJakVpTzNNNk1qQTZJbk5vYjNkZmMyVmhjMjl1WDNObGJHVmpkRzl5SWp0ek9qRTZJakVpTzNNNk1UYzZJbWRoYldWZmJHbHVhMTkyYVhOcFlteGxJanR6T2pFNklqRWlPM002TVRrNkluQnNZWGxsY2w5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94TkRvaWRHVmhiVjlzYVc1clgzUjVjR1VpTzNNNk1Ub2lNeUk3Y3pveE5Eb2laMkZ0WlY5c2FXNXJYM1I1Y0dVaU8zTTZNVG9pTXlJN2N6b3hOam9pY0d4aGVXVnlYMnhwYm10ZmRIbHdaU0k3Y3pveE9pSXpJanR6T2pFM09pSjBaV0Z0WDJ4cGJtdGZhR0Z1Wkd4bGNpSTdjem94TWpvaWJtRjJhV2RoZEdWVVpXRnRJanR6T2pFM09pSm5ZVzFsWDJ4cGJtdGZhR0Z1Wkd4bGNpSTdjem94TWpvaWJtRjJhV2RoZEdWSFlXMWxJanR6T2pFNU9pSndiR0Y1WlhKZmJHbHVhMTlvWVc1a2JHVnlJanR6T2pFME9pSnVZWFpwWjJGMFpWQnNZWGxsY2lJN2N6b3hPRG9pWVhKbGJtRmZiR2x1YTE5MmFYTnBZbXhsSWp0ek9qRTZJakVpTzNNNk1UVTZJbUZ5Wlc1aFgyeHBibXRmZEhsd1pTSTdjem94T2lJeklqdHpPakU0T2lKaGNtVnVZVjlzYVc1clgyaGhibVJzWlhJaU8zTTZNVE02SW01aGRtbG5ZWFJsUVhKbGJtRWlPM002T1RvaWJHVmhaM1ZsWDJsa0lqdHpPalE2SWprek16TWlPM002T1RvaVoyRnRaVjlrWVhseklqdHpPakU2SWpFaU8zTTZNVGM2SW5Ob2IzZGZjbVZtWlhKbFpWOWphWFI1SWp0ek9qRTZJakVpTzNNNk1UTTZJbWwwWlcxelgyOXVYM0JoWjJVaU8zTTZNam9pTXpBaU8zTTZNakE2SW5OMFlXZGxYMnhsZG1Wc2MxOTJhWE5wWW14bElqdHpPakU2SWpJaU8zTTZPRG9pZEdWdGNHeGhkR1VpTzNNNk1qb2lkaklpTzMwPScsCgkJCQkJcGFyYW1zOiBwYXJhbXMKCQkJCX0pLnJlbmRlclBhcnRpYWwobmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnNba2V5XSk7CgkJCX0KCQl9Cgl9CgoJbmFtZXNwYWNlLm9uVGFiQ2xpY2sgPSBmdW5jdGlvbih0YWJQYW5lbCwgaW5kZXgsIHBhcnQsIHR5cGUpIHsKCgkJbmFtZXNwYWNlLmFjdGl2ZVRhYiA9IGluZGV4OwoKCQluYW1lc3BhY2UuZmlsdGVycy50eXBlID0gdHlwZTsKCQluYW1lc3BhY2UuZmlsdGVycy50YWIgPSBwYXJ0OwoKCQl2YXIgcGFyYW1zID0ge307CgoJCWlmKG5hbWVzcGFjZS5maWx0ZXJzLnBhZ2UpIHsKCQkJcGFyYW1zLnBhZ2UgPSBuYW1lc3BhY2UuZmlsdGVycy5wYWdlOwoJCX0KCgkJcGFyYW1zLmZpbHRlciAgPSAgbmFtZXNwYWNlLmZpbHRlcnM7CgoJCW5ldyBNQlQuQVBJLldpZGdldHMuV2lkZ2V0KHsKCQkJd2lkZ2V0SWQ6IDMwMywKCQkJY29udGFpbmVyOiAnMzMtMzAzLWNvbnRhaW5lcicsCgkJCXN0YXRlOiAnTVRRMU16QTJOemt4T1dFNk1UazZlM002TVRjNkluUmxZVzFmYkdsdWExOTJhWE5wWW14bElqdHpPakU2SWpFaU8zTTZNakE2SW5Ob2IzZGZjMlZoYzI5dVgzTmxiR1ZqZEc5eUlqdHpPakU2SWpFaU8zTTZNVGM2SW1kaGJXVmZiR2x1YTE5MmFYTnBZbXhsSWp0ek9qRTZJakVpTzNNNk1UazZJbkJzWVhsbGNsOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE5Eb2lkR1ZoYlY5c2FXNXJYM1I1Y0dVaU8zTTZNVG9pTXlJN2N6b3hORG9pWjJGdFpWOXNhVzVyWDNSNWNHVWlPM002TVRvaU15STdjem94TmpvaWNHeGhlV1Z5WDJ4cGJtdGZkSGx3WlNJN2N6b3hPaUl6SWp0ek9qRTNPaUowWldGdFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVlVaV0Z0SWp0ek9qRTNPaUpuWVcxbFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVkhZVzFsSWp0ek9qRTVPaUp3YkdGNVpYSmZiR2x1YTE5b1lXNWtiR1Z5SWp0ek9qRTBPaUp1WVhacFoyRjBaVkJzWVhsbGNpSTdjem94T0RvaVlYSmxibUZmYkdsdWExOTJhWE5wWW14bElqdHpPakU2SWpFaU8zTTZNVFU2SW1GeVpXNWhYMnhwYm10ZmRIbHdaU0k3Y3pveE9pSXpJanR6T2pFNE9pSmhjbVZ1WVY5c2FXNXJYMmhoYm1Sc1pYSWlPM002TVRNNkltNWhkbWxuWVhSbFFYSmxibUVpTzNNNk9Ub2liR1ZoWjNWbFgybGtJanR6T2pRNklqa3pNek1pTzNNNk9Ub2laMkZ0WlY5a1lYbHpJanR6T2pFNklqRWlPM002TVRjNkluTm9iM2RmY21WbVpYSmxaVjlqYVhSNUlqdHpPakU2SWpFaU8zTTZNVE02SW1sMFpXMXpYMjl1WDNCaFoyVWlPM002TWpvaU16QWlPM002TWpBNkluTjBZV2RsWDJ4bGRtVnNjMTkyYVhOcFlteGxJanR6T2pFNklqSWlPM002T0RvaWRHVnRjR3hoZEdVaU8zTTZNam9pZGpJaU8zMD0nLAoJCQlwYXJhbXM6IHBhcmFtcwoJCX0pLnJlbmRlclBhcnRpYWwocGFydCk7Cgl9CgoJdmFyIHRhYnMgPSBbXTsKCQoJdmFyIG1lbnVJdGVtcyA9IE1CVC5BUEkuZ2V0KCczMy0zMDMtbWJ0LXYyLW5hdmlnYXRpb24nKS5jaGlsZE5vZGVzOwoJCglmb3IodmFyIGkgPSAwOyBpIDwgIG1lbnVJdGVtcy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmKG1lbnVJdGVtc1tpXS5ub2RlVHlwZSA9PSAxKSB7CiAgICAgICAgCXRhYnMucHVzaCh7CiAgICAgICAgCQl0YWJJZDogbWVudUl0ZW1zW2ldLmlkLAogICAgICAgIAkJbmVlZExvYWQ6IE1CVC5BUEkuRnVuY3Rpb24uY3JlYXRlRGVsZWdhdGUobmFtZXNwYWNlLm9uVGFiQ2xpY2ssIG51bGwsIFttZW51SXRlbXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKSwgbWVudUl0ZW1zW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJyldLCAyKSwKICAgICAgICAJfSk7CiAgICAgICAgfQoJfQoKCQoJCQkJCXZhciBhY3RpdmVUYWIgPSAwOwoJCQkKCglpZiAodHlwZW9mIChuYW1lc3BhY2UuaW5pdENvbmZpZykgIT0gJ3VuZGVmaW5lZCcpIHsJCgkJaWYodHlwZW9mIChuYW1lc3BhY2UuaW5pdENvbmZpZy5maWx0ZXJzKSAhPSAndW5kZWZpbmVkJykgewoJCQlmb3IodmFyIGtleSBpbiBuYW1lc3BhY2UuaW5pdENvbmZpZy5maWx0ZXJzKSB7CgkJCQluYW1lc3BhY2UuZmlsdGVyc1trZXldID0gbmFtZXNwYWNlLmluaXRDb25maWcuZmlsdGVyc1trZXldLnZhbHVlOwoJCQkJaWYoa2V5ID09ICdzZWFzb24nIHx8IGtleSA9PSAnc3RhZ2UnKSB7CgkJCQkJbmFtZXNwYWNlLnJlbG9hZEZpbHRlcnMoa2V5LCBmYWxzZSk7CgkJCQl9CgkJCX0KCQl9CgoJCWlmKHR5cGVvZiAobmFtZXNwYWNlLmluaXRDb25maWcucGFnZXMpICE9ICd1bmRlZmluZWQnKSB7CgkJCW5hbWVzcGFjZS5maWx0ZXJzLnBhZ2UgPSBuYW1lc3BhY2UuaW5pdENvbmZpZy5wYWdlc1swXS5wYWdlOwoJCX0KCgkJaWYodHlwZW9mKG5hbWVzcGFjZS5pbml0Q29uZmlnLnRhYnMpICE9ICd1bmRlZmluZWQnKSB7CgkJCWFjdGl2ZVRhYiA9IG5hbWVzcGFjZS5pbml0Q29uZmlnLnRhYnNbMF0uYWN0aXZlVGFiOwoJCX0KCX0KCgluYW1lc3BhY2UudGFiQ29udHJvbGxlciA9IFtdOwoKCW5hbWVzcGFjZS50YWJDb250cm9sbGVyWzBdID0gbmV3IE1CVC5BUEkuVUkuVGFiUGFuZWwoewoJCXBhcmVudEluc3RhbmNlSWQ6ICczMy0zMDMnLAoJCWNvbnRhaW5lcjogJzMzLTMwMy1jb250YWluZXInLAoJCXRhYkNsYXNzOiAnbWJ0LXYyLW5hdmlnYXRpb24tdGFiJywKICAgICAgICBhY3RpdmVUYWJDbGFzczogJ21idC12Mi1uYXZpZ2F0aW9uLXRhYi1hY3RpdmUnLAogICAgICAgIHRhYnM6IHRhYnMsCiAgICAgICAgYWN0aXZlVGFiOiBhY3RpdmVUYWIsCiAgICAgICAgbm9DYWNoZTogdHJ1ZQoJfSk7CgoJTUJULkFQSS5FdmVudC5vYnNlcnZlKCczMy0zMDMtZmlsdGVyLXNlYXNvbicsICJjaGFuZ2UiLCBNQlQuQVBJLkZ1bmN0aW9uLmNyZWF0ZURlbGVnYXRlKG5hbWVzcGFjZS5vbkZpbHRlckNoYW5nZSwgbnVsbCwgWydzZWFzb24nLCB0cnVlXSwgMikpOwoJTUJULkFQSS5FdmVudC5vYnNlcnZlKCczMy0zMDMtZmlsdGVyLXN0YWdlJywgImNoYW5nZSIsIE1CVC5BUEkuRnVuY3Rpb24uY3JlYXRlRGVsZWdhdGUobmFtZXNwYWNlLm9uRmlsdGVyQ2hhbmdlLCBudWxsLCBbJ3N0YWdlJywgdHJ1ZV0sIDIpKTsKCU1CVC5BUEkuRXZlbnQub2JzZXJ2ZSgnMzMtMzAzLWZpbHRlci1nYW1lLWRheScsICJjaGFuZ2UiLCBNQlQuQVBJLkZ1bmN0aW9uLmNyZWF0ZURlbGVnYXRlKG5hbWVzcGFjZS5vbkZpbHRlckNoYW5nZSwgbnVsbCwgWydnYW1lX2RheSddLCAxKSk7CglNQlQuQVBJLkV2ZW50Lm9ic2VydmUoJzMzLTMwMy1maWx0ZXItdGVhbScsICJjaGFuZ2UiLCBNQlQuQVBJLkZ1bmN0aW9uLmNyZWF0ZURlbGVnYXRlKG5hbWVzcGFjZS5vbkZpbHRlckNoYW5nZSwgbnVsbCwgWyd0ZWFtJ10sIDEpKTsKCU1CVC5BUEkuRXZlbnQub2JzZXJ2ZSgnMzMtMzAzLWZpbHRlci1tb250aCcsICJjaGFuZ2UiLCBNQlQuQVBJLkZ1bmN0aW9uLmNyZWF0ZURlbGVnYXRlKG5hbWVzcGFjZS5vbkZpbHRlckNoYW5nZSwgbnVsbCwgWydtb250aCddLCAxKSk7CglNQlQuQVBJLkV2ZW50Lm9ic2VydmUoJzMzLTMwMy1maWx0ZXItYXJlbmEnLCAiY2hhbmdlIiwgTUJULkFQSS5GdW5jdGlvbi5jcmVhdGVEZWxlZ2F0ZShuYW1lc3BhY2Uub25GaWx0ZXJDaGFuZ2UsIG51bGwsIFsnYXJlbmEnXSwgMSkpOwogICAgCgoKLy9dXT4KPC9zY3JpcHQ+PC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJjb250YWluZXIiPgoJPGRpdiBpZD0ic3RhbmRpbmdzIiBtYnRfd2lkZ2V0PSIzMDEiPjxkaXYgaWQ9Im1idC12Mi1zdGFuZGluZ3MtbG9uZy13aWRnZXQiIGNsYXNzPSJtYnQtdjItd2lkZ2V0Ij4KCTxkaXYgY2xhc3M9Im1idC12Mi1oZWFkZXIiPgoJCUxlc3R2aWNhCgk8L2Rpdj4KCTxkaXYgY2xhc3M9Im1idC12Mi13aWRnZXQtY29udGVudCI+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSIzMy0zMDEtc3RhbmRpbmdzLWNvbnRhaW5lciIgY2xhc3M9Im1idC12Mi0zMy0zMDEtc3RhbmRpbmdzLWNvbnRhaW5lciI+CQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXRhYmxlLWhlYWRlci1iZWZvcmUtdGFibGUiPjEuIGRlbDwvZGl2PgoJCQk8ZGl2IGlkPSIzMy0zMDEtdGFibGVzLWNvbnRhaW5lci0wIiBjbGFzcz0ibWJ0LXYyLXJlc3BvbnNpdmUtdGFibGUtY29udGFpbmVyIj4KCQkJCTx0YWJsZSBpZD0ibWJ0LXYyLXN0YW5kaW5ncy1sb25nLXRhYmxlLTAiIGNsYXNzPSJtYnQtdjItdGFibGUgbWJ0LXYyLXN0YW5kaW5ncy1sb25nLXRhYmxlIj4KCQkJCQk8dGhlYWQ+CgkJCQkJCTx0cj4KCQkJCQkJCQkJCQkJCQkJPHRoPk08L3RoPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJPHRoPkVraXBhPC90aD4KCQkJCQkJCQkJCQkJCSAgICAJCQkJCQkJICAgIDx0aD5UPC90aD4KCQkJCQkJICAgIAkJCQkJCSAgICAJCQkJCQkJICAgIAkJCQkJCQkJICAgIDx0aD5aPC90aD4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTx0aD5QPC90aD4KCQkJCQkJCQkJCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkgICAgCQkJCQkJICAgIAkJCQkJCSAgICAJCQkJCQkJICAgIAkJCQkJCQkJCTx0aD5UxIw8L3RoPiAgICAKCQkJCQkJCSAgICAJCQkJCQkgICAgCQkJCQkJICAgIAkJCQkJCQkJPHRoPlTEjC9QUjwvdGg+CgkJCQkJCSAgICAJCQkJCQkgICAgCgkJCQkJCSAgICAJCQkJCQkJCTx0aD4rLy08L3RoPgoJCQkJCQkgICAgCQkJCQkJICAgIAkJCQkJCQkgICAgPHRoPkRUL1BUPC90aD4KCQkJCQkJICAgIAkJCQkJCSAgICAJCQkJCQkJICAgIDx0aD5Eb20uIFovUDwvdGg+CgkJCQkJCSAgICAJCQkJCQkgICAgCQkJCSAgICAgICAgICAgICAgICA8dGg+R29zdC4gWi9QPC90aD4KCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIDx0aD5Eb20uICsvLTwvdGg+CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICA8dGg+R29zdC4gKy8tPC90aD4KCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIDx0aD5aYWQuIDU8L3RoPgoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgPHRoPlphZC4gMTA8L3RoPgoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRoPlNlci48L3RoPgoJCQkgICAgICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICA8dGg+U2VyLiBkb21hPC90aD4KCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIDx0aD5TZXIuIHYgZ29zdC48L3RoPgoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJPHRoIHRpdGxlPSJUZXNuZSB0LiI+CgkJCSAgICAgICAgICAgICAgICAJCSsvLTUKCQkJICAgICAgICAgICAgICAgIAk8L3RoPgoJCQkgICAgICAgICAgICAgICAgCQkJCQkJPC90cj4KCQkJCQk8L3RoZWFkPgoJCQkJCTx0Ym9keT4KCQkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJCQkJCQkJPHRkPgoJCQkJCQkJCQkJMS4KCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCTx0ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjYzMjMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjYzMjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjAzNzM4ODAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+S3JrYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMDM3Mzg4MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjAzNzM4ODAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzczODgwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzczODgwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkKCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICA0CgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjQ8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDAKCQkJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjg8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMzQ5PHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MjgzCgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICA2NgoJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJCSAgICAgICAgICAgICAgICAgICAgODcuMzxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjcwLjgJCQkJCSAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMzxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjAJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjAJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA5MC43PHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+NzIuNwoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJICAgICAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD43Ny4wPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+NjUuMDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+NDxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPjQ8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4wPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+KzQ8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPiszPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4rMTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+MDxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAKCQkJCQkJCTwvdHI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPgoJCQkJCQkJCQkJCQkJCQkJCTx0ZD4KCQkJCQkJCQkJCTIuCgkJCQkJCQkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkKCQkJCQkJCQkJCQkJCQkJCQk8dGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk4MzAzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk4MzAzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4wMzc2NDYwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPlBldHJvbCBPbGltcGlqYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMDM3NjQ2MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjAzNzY0NjAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzc2NDYwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzc2NDYwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkKCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICA0CgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjM8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDEKCQkJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjc8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMzQ2PHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MzM2CgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAxMAoJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJCSAgICAgICAgICAgICAgICAgICAgODYuNTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjg0LjAJCQkJCSAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMjxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjAJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjEJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA4OS41PHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+NzguMAoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJICAgICAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD44My41PHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+OTAuMDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+MzxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjE8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPjM8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4xPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+KzM8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPisyPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4rMTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+MTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAKCQkJCQkJCTwvdHI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPgoJCQkJCQkJCQkJCQkJCQkJCTx0ZD4KCQkJCQkJCQkJCTMuCgkJCQkJCQkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkKCQkJCQkJCQkJCQkJCQkJCQk8dGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk1MzYzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk1MzYzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4wMzc4MzkwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPlNpeHQgUHJpbW9yc2thPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4wMzc4MzkwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMDM3ODM5MDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjAzNzgzOTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjAzNzgzOTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCQoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDQKCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+MjwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgMgoJCQkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+NjwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAyODQ8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4yNzAKCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDE0CgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkJICAgICAgICAgICAgICAgICAgICA3MS4wPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+NjcuNQkJCQkJICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAyPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MAkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAwPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc5LjU8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj41OS41CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkgICAgICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPjYyLjU8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj43NS41PC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4yPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MjwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+MjxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjI8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4tMTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+KzI8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPi0yPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4wPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAoJCQkJCQkJPC90cj4KCQkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJCQkJCQkJPHRkPgoJCQkJCQkJCQkJNC4KCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCTx0ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1NTMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjY1NTMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjAzODAxNzAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+Um9nYcWha2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjAzODAxNzAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4wMzgwMTcwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMDM4MDE3MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMDM4MDE3MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJCgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMwoJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4zPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJICAgICAgICAgICAgICAgICAgICAwCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD42PC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDIzMTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjIyMAoJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMTEKCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCQkgICAgICAgICAgICAgICAgICAgIDc3LjA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj43My4zCQkJCQkgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDE8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4wCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDI8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4wCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgNzAuMDxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjY0LjAKCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+ODAuNTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjc4LjA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPjM8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4wPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4zPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPiszPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4rMTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+KzI8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPjI8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4wPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCgkJCQkJCQk8L3RyPgoJCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQkJCQkJCQk8dGQ+CgkJCQkJCQkJCQk1LgoJCQkJCQkJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJPHRkPgoJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NTU4MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE2NTU4MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMDM4MjMzMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5Ib3BzaSBQb2x6ZWxhPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4wMzgyMzMwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMDM4MjMzMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjAzODIzMzAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjAzODIzMzAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCQkJCQkJCQoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDQKCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+MTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgMwoJCQkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+NTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAyOTM8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4zMTEKCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIC0xOAoJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJCSAgICAgICAgICAgICAgICAgICAgNzMuMzxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjc3LjgJCQkJCSAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjEJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMDxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjIJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA3MC4wPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+NjQuNQoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJICAgICAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD43Ni41PHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+OTEuMDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+MTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjM8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPjE8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4zPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+LTE8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPisxPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4tMjwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+MDxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjI8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAKCQkJCQkJCTwvdHI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJPHRyPgoJCQkJCQkJCQkJCQkJCQkJCTx0ZD4KCQkJCQkJCQkJCTYuCgkJCQkJCQkJCQkJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkKCQkJCQkJCQkJCQkJCQkJCQk8dGQ+CgkJCQkJCQkJCQkJCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk0OTkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk0OTkzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4wMzg0MDgwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPsWgZW7EjXVyIEdHRDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMDM4NDA4MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjAzODQwODAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzg0MDgwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzg0MDgwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkKCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAzCgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjE8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDIKCQkJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjQ8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMjI2PHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MjE4CgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICA4CgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkJICAgICAgICAgICAgICAgICAgICA3NS4zPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+NzIuNwkJCQkJICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAwPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MQkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAxPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MQkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCQkJCSAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc5LjA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj44MS4wCgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkgICAgICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPjczLjU8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj42OC41PC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4xPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MjwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+MTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjI8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4tMTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+LTE8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPisxPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4wPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAoJCQkJCQkJPC90cj4KCQkJCQkJCQkJCQkJCQkJCQkJCQk8dHI+CgkJCQkJCQkJCQkJCQkJCQkJPHRkPgoJCQkJCQkJCQkJNy4KCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCTx0ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1MDMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjY1MDMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjAzODU3NTAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+xaBlbnRqdXI8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjAzODU3NTAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4wMzg1NzUwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMDM4NTc1MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMDM4NTc1MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCQk8L3RkPgoJCQkJCQkJCQkJCQkJCQkJCgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMwoJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4xPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJICAgICAgICAgICAgICAgICAgICAyCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD40PC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDI0MzxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjI0OQoJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgLTYKCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCQkgICAgICAgICAgICAgICAgICAgIDgxLjA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj44My4wCQkJCQkgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDE8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4yCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4wCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgODEuMDxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjgzLjAKCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+LS8tPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4xPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MjwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+MTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjI8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4tMTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+LTE8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPi08L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPjA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4xPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCgkJCQkJCQk8L3RyPgoJCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQkJCQkJCQk8dGQ+CgkJCQkJCQkJCQk4LgoJCQkJCQkJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJPHRkPgoJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NjQ5MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE2NjQ5MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMDM4NzM0MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5IZWxpb3MgU3VuczwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMDM4NzM0MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjAzODczNDAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzg3MzQwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzg3MzQwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkKCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAzCgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjE8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDIKCQkJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjQ8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMTk1PHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MjA1CgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAtMTAKCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCQkgICAgICAgICAgICAgICAgICAgIDY1LjA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj42OC4zCQkJCQkgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDE8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4xCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4xCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgNzEuNTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjY4LjUKCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+NTIuMDxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjY4LjA8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPjE8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4yPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4xPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MjwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPi0yPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4tMTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+LTE8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPjA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4wPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCgkJCQkJCQk8L3RyPgoJCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQkJCQkJCQk8dGQ+CgkJCQkJCQkJCQk5LgoJCQkJCQkJCQkJCQkJCQkJCQkJPC90ZD4KCQkJCQkJCQkJCgkJCQkJCQkJCQkJCQkJCQkJPHRkPgoJCQkJCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NjUyMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE2NjUyMyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMDM4OTAwMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5abGF0b3JvZzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMDM4OTAwMDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjAzODkwMDAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzg5MDAwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzg5MDAwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkKCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAzCgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjE8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDIKCQkJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjQ8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMjAxPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MjMzCgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAtMzIKCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCQkgICAgICAgICAgICAgICAgICAgIDY3LjA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj43Ny43CQkJCQkgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4wCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDE8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4yCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS8tCgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJCQkgICAgICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPjY3LjA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj43Ny43PC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4xPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MjwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+MTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjI8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4tMjwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+LTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+LTI8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPjE8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4wPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCgkJCQkJCQk8L3RyPgoJCQkJCQkJCQkJCQkJCQkJCQkJCTx0cj4KCQkJCQkJCQkJCQkJCQkJCQk8dGQ+CgkJCQkJCQkJCQkxMC4KCQkJCQkJCQkJCQkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQoJCQkJCQkJCQkJCQkJCQkJCTx0ZD4KCQkJCQkJCQkJCQkJCQkJCQkJCQk8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0zMDkzNzMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIzMDkzNzMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjAzOTA1ODAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+SWxpcmlqYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMDM5MDU4MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjAzOTA1ODAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzkwNTgwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4wMzkwNTgwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJCQkJCQkJCTwvdGQ+CgkJCQkJCQkJCQkJCQkJCQkKCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAzCgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjA8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDMKCQkJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjM8L3RkPgoJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgMjEzPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MjU2CgkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAtNDMKCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCQkgICAgICAgICAgICAgICAgICAgIDcxLjA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj44NS4zCQkJCQkgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4xCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4yCQkJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJCQkJICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgNjIuMDxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjgxLjAKCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+NzUuNTxzcGFuPjwvc3Bhbj4vPHNwYW4+PC9zcGFuPjg3LjU8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCQkgICAgICAgICAgICAgICAgPHRkPjA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4zPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4wPHNwYW4+PC9zcGFuPi88c3Bhbj48L3NwYW4+MzwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPi0zPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJICAgICAgICAgICAgICAgIAkJCQkJICAgICAgICAgICAgICAgIDx0ZD4tMTwvdGQ+CgkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAJCQkJCSAgICAgICAgICAgICAgICA8dGQ+LTI8L3RkPgoJCQkJICAgICAgICAgICAgICAgIAkJCQkgICAgICAgICAgICAgICAgCQkJCSAgICAgICAgICAgICAgICAgICAgPHRkPjA8c3Bhbj48L3NwYW4+LzxzcGFuPjwvc3Bhbj4wPC90ZD4KCQkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCgkJCQkJCQk8L3RyPgoJCQkJCQkJCQkJCTwvdGJvZHk+CgkJCQk8L3RhYmxlPgoJCQk8L2Rpdj4KCQkJPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJCQkJLy88IVtDREFUQVsKCQkJCQoJCQkJICAgIAoJCQkJICAgIG5ldyBNQlQuQVBJLnJlc3BvbnNpdmVUYWJsZSAoewoJCQkJCQl0YWJsZTogJ21idC12Mi1zdGFuZGluZ3MtbG9uZy10YWJsZS0wJywKCQkJCQkJdGFibGVzQ29udGFpbmVyOiAnMzMtMzAxLXRhYmxlcy1jb250YWluZXItMCcsCgkJCQkJCWNvbHVtbnNUb1BpbjogMgoJCQkJCX0pLndhdGNoVGFibGUoKTsKCgkJCQkKCQkJCS8vXV0+CQoJCQk8L3NjcmlwdD4KCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1kaXZpZGVyIj48L2Rpdj4KCQkJCTxkaXYgaWQ9Im1idC12Mi1zdGFuZGluZ3MtbG9uZy10aWVicmVha2VycyIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPgoJCQkJICAgPGRpdiBjbGFzcz0ibWJ0LXYyLXN1YmhlYWRlciI+CgkJCSAgIE9kbG/EjWl0dmUgbmEgbGVzdHZpY2kgb2Iga29uY3UKCQkJICAgCQkJPC9kaXY+CgkJCTx0YWJsZSBjbGFzcz0ibWJ0LXYyLXRhYmxlIG1idC12Mi10aWVicmVha2Vycy10YWJsZSBtYnQtdjItdGFibGUtYm9yZGVyZWQiPgoJCQkgICAgPHRoZWFkPgoJCQkgICAgICAgIDx0cj4KCQkJICAgICAgICAgICAgPHRoPgoJCQkgICAgICAgICAgICAgICAgTQoJCQkgICAgICAgICAgICA8L3RoPgoJCQkgICAgICAgICAgICA8dGg+CgkJCSAgICAgICAgICAgICAgICBJbWUKCQkJICAgICAgICAgICAgPC90aD4KCQkJICAgICAgICAgICAgPHRoPgoJCQkgICAgICAgICAgICAgICAgT3BpcwoJCQkgICAgICAgICAgICA8L3RoPgoJCQkgICAgICAgIDwvdHI+CgkJCSAgICA8L3RoZWFkPgoJCQkgICAgPHRib2R5PgoJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgICAgIDx0cj4KCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgPHRkPgoJCQkgICAgICAgICAgICAgICAgICAgIDEuCgkJCSAgICAgICAgICAgICAgICA8L3RkPgoJCQkgICAgICAgICAgICAgICAgPHRkPgoJCQkgICAgICAgICAgICAgICAgICAgIFRvxI1rZQoJCQkgICAgICAgICAgICAgICAgPC90ZD4KCQkJICAgICAgICAgICAgICAgIDx0ZD4KCQkJICAgICAgICAgICAgICAgICAgICBUb8SNa2UKCQkJICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgIDwvdHI+CgkJICAgICAgICAgICAgCQkgICAgICAgICAgICAgICAgPHRyPgoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICA8dGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgMi4KCQkJICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgICAgICA8dGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgSW5uZXIgcG9pbnRzCgkJCSAgICAgICAgICAgICAgICA8L3RkPgoJCQkgICAgICAgICAgICAgICAgPHRkPgoJCQkgICAgICAgICAgICAgICAgICAgIFBvaW50cyBjb3VudGluZyB0aGUgZ2FtZXMgYmV0d2VlbiB0aWVkIHRlYW1zIG9ubHkKCQkJICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgIDwvdHI+CgkJICAgICAgICAgICAgCQkgICAgICAgICAgICAgICAgPHRyPgoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICA8dGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgMy4KCQkJICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgICAgICA8dGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgSW5uZXIgZ29hbCBkaWZmZXJlbmNlCgkJCSAgICAgICAgICAgICAgICA8L3RkPgoJCQkgICAgICAgICAgICAgICAgPHRkPgoJCQkgICAgICAgICAgICAgICAgICAgIEdvYWwgZGlmZmVyZW5jZSBiZXR3ZWVuIHRpZWQgdGVhbXMKCQkJICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgIDwvdHI+CgkJICAgICAgICAgICAgCQkgICAgICAgICAgICAgICAgPHRyPgoJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICA8dGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgNC4KCQkJICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgICAgICA8dGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgSW5uZXIgZ29hbHMKCQkJICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgICAgICA8dGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgR29hbHMgY291bnRpbmcgdGhlIGdhbWVzIGJldHdlZW4gdGllZCB0ZWFtcyBvbmx5CgkJCSAgICAgICAgICAgICAgICA8L3RkPgoJCQkgICAgICAgICAgICA8L3RyPgoJCSAgICAgICAgICAgIAkJICAgICAgICAgICAgICAgIDx0cj4KCQkJICAgICAgICAgICAgICAgIAkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgPHRkPgoJCQkgICAgICAgICAgICAgICAgICAgIDUuCgkJCSAgICAgICAgICAgICAgICA8L3RkPgoJCQkgICAgICAgICAgICAgICAgPHRkPgoJCQkgICAgICAgICAgICAgICAgICAgIFJhemxpa2EgdiBrb8WhaWggKHZzZSB0ZWttZSkKCQkJICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgICAgICA8dGQ+CgkJCSAgICAgICAgICAgICAgICAgICAgUmF6bGlrYSB2IGtvxaFpaCAodnNlIHRla21lKQoJCQkgICAgICAgICAgICAgICAgPC90ZD4KCQkJICAgICAgICAgICAgPC90cj4KCQkgICAgICAgICAgICAJCSAgICAgICAgICAgICAgICA8dHI+CgkJCSAgICAgICAgICAgICAgICAJCQkgICAgICAgICAgICAgICAgCQkJICAgICAgICAgICAgICAgIDx0ZD4KCQkJICAgICAgICAgICAgICAgICAgICA2LgoJCQkgICAgICAgICAgICAgICAgPC90ZD4KCQkJICAgICAgICAgICAgICAgIDx0ZD4KCQkJICAgICAgICAgICAgICAgICAgICBUb3RhbCBnb2FscwoJCQkgICAgICAgICAgICAgICAgPC90ZD4KCQkJICAgICAgICAgICAgICAgIDx0ZD4KCQkJICAgICAgICAgICAgICAgICAgICBUb3RhbCBnb2FscyBzY29yZWQKCQkJICAgICAgICAgICAgICAgIDwvdGQ+CgkJCSAgICAgICAgICAgIDwvdHI+CgkJICAgICAgICAgICAgCQkJICAgIDwvdGJvZHk+CgkJCTwvdGFibGU+CgkJCTwvZGl2PgoJPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaWQ9Im1idC12Mi1zdGFuZGluZ3MtbG9uZy10aWVicmVha2Vycy1saW5rIiBocmVmPSIjIiBvbmNsaWNrPSJyZXR1cm4gZmFsc2U7Ij4KICAgICAgICAgICAgICAgIE9kbG/EjWl0dmUgbmEgbGVzdHZpY2kgb2Iga29uY3UgwrsKICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgaWQ9IjMzLTMwMS10bXAtY29udGFpbmVyIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjwvZGl2PgoKCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCi8vPCFbQ0RBVEFbCgoKdmFyIG5hbWVzcGFjZSA9IE1CVC5BUEkuU2FmZU5hbWVzLkNvbnRhaW5lcignMzMtMzAxJyk7CgpuYW1lc3BhY2UuZ2V0U2Vhc29uID0gZnVuY3Rpb24gKCkgewoKICAgIHZhciBzZWFzb25JZCA9IDEwNDc4NTsKCiAgICAgICAgCgogICAgcmV0dXJuIHNlYXNvbklkOwp9CgpuYW1lc3BhY2UubG9hZEdyb3VwcyA9IGZ1bmN0aW9uICgpIHsKCiAgICB2YXIgd2lkZ2V0ID0gbmV3IE1CVC5BUEkuV2lkZ2V0cy5XaWRnZXQoe3dpZGdldElkOiAzMDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogJzMzLTMwMS10bXAtY29udGFpbmVyJywKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFzb25faWQ6IG5hbWVzcGFjZS5nZXRTZWFzb24oKQogICAgICAgICAgICAgICAgICAgICAgICB9fSk7CiAgICB3aWRnZXQuc2V0Q2FsbGJhY2soJ25hbWVzcGFjZS5sb2FkU3RhbmRpbmdzJyk7CiAgICB3aWRnZXQucmVuZGVyUGFydGlhbCgnZ2V0LWdyb3VwcycpOyAKCn0KCm5hbWVzcGFjZS5jaGFuZ2VTZWFzb24gPSBmdW5jdGlvbigpIHsKCiAgICAKICAgICAgICBuYW1lc3BhY2UubG9hZFN0YW5kaW5ncygpOwogICAgICAgIAp9CgoKbmFtZXNwYWNlLnNob3dMZWdlbmQgPSBmdW5jdGlvbigpIHsKCWlmIChNQlQuQVBJLmdldCgnMzMtMzAxLXRpZWJyZWFrZXJzJykpIHsKCQlNQlQuQVBJLmdldCgnMzMtMzAxLXRpZWJyZWFrZXJzJykuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCX0KCWlmIChNQlQuQVBJLmdldCgnMzMtMzAxLWxlZ2VuZCcpKSB7CgkJTUJULkFQSS5nZXQoJzMzLTMwMS1sZWdlbmQnKS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCX0KfQoKbmFtZXNwYWNlLnNob3dUaWVicmVha2VycyA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGVsID0gTUJULkFQSS5nZXQoJ21idC12Mi1zdGFuZGluZ3MtbG9uZy10aWVicmVha2VycycpOwoJaWYgKGVsLnN0eWxlLmRpc3BsYXkgPT0gImJsb2NrIikgewogICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7Cgl9IGVsc2UgewogICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgfQp9CgoKCk1CVC5BUEkuRXZlbnQub2JzZXJ2ZSgnMzMtMzAxLWxlZ2VuZC1saW5rJywgImNsaWNrIiwgbmFtZXNwYWNlLnNob3dMZWdlbmQpOwpNQlQuQVBJLkV2ZW50Lm9ic2VydmUoJ21idC12Mi1zdGFuZGluZ3MtbG9uZy10aWVicmVha2Vycy1saW5rJywgImNsaWNrIiwgbmFtZXNwYWNlLnNob3dUaWVicmVha2Vycyk7CgoKCm5hbWVzcGFjZS5sb2FkU3RhbmRpbmdzID0gZnVuY3Rpb24oKSB7CiAgICBuZXcgTUJULkFQSS5XaWRnZXRzLldpZGdldCh7CiAgICAgICAgd2lkZ2V0SWQ6IDMwMSwgCiAgICAgICAgY29udGFpbmVyOiAnMzMtMzAxLXN0YW5kaW5ncy1jb250YWluZXInLAogICAgICAgIHN0YXRlOiAnTVRZNU1EYzNNekV3T0dFNk1USTZlM002TVRrNklteGxZV2QxWlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1pSTdjem94TnpvaWRHVmhiVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hOem9pWjJGdFpWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNaUk3Y3pveE9Ub2ljR3hoZVdWeVgyeHBibXRmZG1semFXSnNaU0k3Y3pveE9pSXhJanR6T2pJM09pSm1kV3hzWDNOMFlXNWthVzVuYzE5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1pSTdjem95TURvaWMzUmhaMlZmYkdWMlpXeHpYM1pwYzJsaWJHVWlPM002TVRvaU1pSTdjem81T2lKc1pXRm5kV1ZmYVdRaU8zTTZORG9pT1RNek15STdjem94TkRvaWRHVmhiVjlzYVc1clgzUjVjR1VpTzNNNk1Ub2lNeUk3Y3pveE56b2lkR1ZoYlY5c2FXNXJYMmhoYm1Sc1pYSWlPM002TVRJNkltNWhkbWxuWVhSbFZHVmhiU0k3Y3pveU5Eb2lablZzYkY5emRHRnVaR2x1WjNOZmJHbHVhMTkwZVhCbElqdHpPakU2SWpNaU8zTTZNamM2SW1aMWJHeGZjM1JoYm1ScGJtZHpYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hOem9pYm1GMmFXZGhkR1ZUZEdGdVpHbHVaM01pTzNNNk9Eb2lkR1Z0Y0d4aGRHVWlPM002TWpvaWRqSWlPMzA9JywKICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAgc2Vhc29uX2lkOiBuYW1lc3BhY2UuZ2V0U2Vhc29uKCksCiAgICAgICAgICAgIHNob3dUZWFtTG9nbzonJywKICAgICAgICAgICAgdGVhbUxvZ29TaXplOiAnMjB4MjAnCiAgICAgICAgfQogICAgfSkucmVuZGVyUGFydGlhbCgidGFibGUiKTsKICAgIAp9CgoKbmFtZXNwYWNlLmFwcGx5RmlsdGVyID0gZnVuY3Rpb24ocGwsIG5ld1NlYXJjaCkgewoJbmFtZXNwYWNlID0gTUJULkFQSS5TYWZlTmFtZXMuQ29udGFpbmVyKCczMy0zMDEnKTsKCW5hbWVzcGFjZS5sb2FkU3RhbmRpbmdzKCk7Cn07Cgp0cnkgewoJaWYgKE1CVC5BUEkuSGlzdG9yeS5ub3RGb3VuZFtNQlQuQVBJLkhpc3RvcnkuZmlsdGVySW5kZXhdICYmIE1CVC5BUEkuSGlzdG9yeS5ub3RGb3VuZFtNQlQuQVBJLkhpc3RvcnkuZmlsdGVySW5kZXhdWydncm91cCddID4gMCkgewoJCU1CVC5BUEkuZ2V0KCczMy0zMDEtZmlsdGVyLWdyb3VwJykudmFsdWUgPSBNQlQuQVBJLkhpc3Rvcnkubm90Rm91bmRbTUJULkFQSS5IaXN0b3J5LmZpbHRlckluZGV4XVsnZ3JvdXAnXTsKCQkKCX0KfSBjYXRjaCAoZSkge30KCm5hbWVzcGFjZS5sb2FkU3RhbmRpbmdzKCk7CgogICAgTUJULkFQSS5FdmVudC5vYnNlcnZlKCczMy0zMDEtZmlsdGVyLXNlYXNvbicsICJjaGFuZ2UiLCBuYW1lc3BhY2UuY2hhbmdlU2Vhc29uICk7CgovL11dPgkKPC9zY3JpcHQ+PC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJjb250YWluZXIiPgoJPGRpdiBpZD0ic3RhbmRpbmdzIj4KCQkmbmJzcDs8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImNvbnRhaW5lciI+Cgk8ZGl2IGlkPSJzdGF0cy1wbGF5ZXIiIG1idF93aWRnZXQ9IjYwMCI+PGRpdiBpZD0ibWJ0LXYyLXBsYXllcnMtc3RhdHMiIGNsYXNzPSJtYnQtdjItd2lkZ2V0Ij4KCTxkaXYgY2xhc3M9Im1idC12Mi1oZWFkZXIiPgoJCQkJCVN0YXRpc3Rpa2EKCQkJCgk8L2Rpdj4KCTxkaXYgY2xhc3M9Im1idC12Mi13aWRnZXQtY29udGVudCI+CgkJPGRpdiBpZD0iMzMtNjAwLW1vYmlsZS1tZW51IiBjbGFzcz0ibWJ0LXYyLW1vYmlsZS1tZW51Ij4KCQkJUG92cHJlxI1qZQoJCTwvZGl2PgoJCTxuYXYgaWQ9IjMzLTYwMC1tYnQtdjItbmF2aWdhdGlvbiIgY2xhc3M9Im1idC12Mi1uYXZpZ2F0aW9uIj4KCQkJPGRpdiBpZD0iMzMtNjAwLXRhYi0wIiBkYXRhLW5hbWU9ImF2ZXJhZ2VzIiBjbGFzcz0ibWJ0LXYyLW5hdmlnYXRpb24tdGFiLWFjdGl2ZSIgcHJldmNsYXNzbmFtZT0ibWJ0LXYyLW5hdmlnYXRpb24tdGFiLWFjdGl2ZSI+CgkJCQlQb3ZwcmXEjWplCgkJCTwvZGl2PgoJCQk8ZGl2IGlkPSIzMy02MDAtdGFiLTEiIGRhdGEtbmFtZT0iaGlnaHMiIGNsYXNzPSJtYnQtdjItbmF2aWdhdGlvbi10YWIiPgoJCQkJUmVrb3JkaQoJCQk8L2Rpdj4KCQkgICAgPGRpdiBpZD0iMzMtNjAwLXRhYi0yIiBkYXRhLW5hbWU9InRvdGFscyIgY2xhc3M9Im1idC12Mi1uYXZpZ2F0aW9uLXRhYiI+CgkJCQlTa3Vwbm8KCQkJPC9kaXY+CgkJCQkJPC9uYXY+CgkJPGRpdiBjbGFzcz0ibWJ0LXYyLWRpdmlkZXIiPjwvZGl2PgoJCTxkaXYgaWQ9IjMzLTYwMC1tb2JpbGUtZmlsdGVycy1ibG9jayIgY2xhc3M9Im1idC12Mi1tb2JpbGUtZmlsdGVycy1ibG9jayI+CgkJCUZpbHRyaQoJCTwvZGl2PgoJCTxkaXYgaWQ9IjMzLTYwMC1maWx0ZXJzLWJsb2NrIiBjbGFzcz0ibWJ0LXYyLWZpbHRlcnMtYmxvY2siPgoJCQk8c2VsZWN0IGlkPSIzMy02MDAtZmlsdGVyLXN0YXRzIiBkYXRhLW5hbWU9InN0YXRfY2F0IiBjbGFzcz0ibWJ0LXYyLXNlbGVjdCI+PG9wdGlvbiB2YWx1ZT0icHRzIj5Ub8SNa2U8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJydCI+U2tva2k8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJlcSI+VmFsb3JpemFjaWphPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iYXMiPkFzaXN0ZW5jZTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9InNlYyI+TWludXRlPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMmEiPsWgdC4gbWV0b3YgemEgMiB0b8SNa2k8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIybSI+xaB0LiB6YWRldGloIG1ldG92IHphIDIgdG/EjWtpPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMnAiPiUgemEgMiB0b8SNa2k8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIzYSI+xaB0LiBtZXRvdiB6YSAzIHRvxI1rZTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjNtIj5aYWRldGkgbWV0aSB6YSAzIHRvxI1rZTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjNwIj4lIHphIDMgdG/EjWtlPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iZmdhIj5NZXQgaXogaWdyZTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9ImZnbSI+VXNwZcWhZW4gbWV0IGl6IGlncmU8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJmZ3AiPiUgbWV0YSBpeiBpZ3JlPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMWEiPkl6dmVkZW5pIHByb3N0aSBtZXRpPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMW0iPlphZGV0aSBwcm9zdGkgbWV0aTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjFwIj4lIHByb3N0aSBtZXRpPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0icm8iPk5hcGFkYWxuaSBza29raTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9InJkIj5Ta29raSB2IG9icmFtYmk8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJwZl9jbSI+T3NlYm5lIG5hcGFrZTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9InBmX3J2Ij5Pc2VibmUgbmFwYWtlIG5hZCBpZ3JhbGNlbTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9InRvIj5JemcuIMW+b2dlPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0ic3QiPlByaWQuIMW+b2dlPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iYmxfZnYiPkJsb2thZGU8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJibF9hZyI+UHJlamV0ZSBibG9rYWRlPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iYXNfdG8iPkFzaXN0ZW5jZS9pemcuIMW+b2dlPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0ic3RfdG8iPlByaWQuL2l6Zy4gxb5vZ2U8L29wdGlvbj48b3B0aW9uIHZhbHVlPSJkZCI+RHZvam5pIGR2b2rEjWtpPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0icGx1c21pbnVzIj4rLy08L29wdGlvbj48L3NlbGVjdD4KCQkgICAgCQkJICAgIDxzZWxlY3QgaWQ9IjMzLTYwMC1maWx0ZXItc2Vhc29uIiBkYXRhLW5hbWU9InNlYXNvbl9pZCIgY2xhc3M9Im1idC12Mi1zZWxlY3QiPgoJCQkJCTxvcHRpb24gdmFsdWU9IiI+CgkJCQkJCVZzZSBzZXpvbmUKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjEwNDc4NSIgc2VsZWN0ZWQ9InNlbGVjdGVkIj4KCQkJCQkJCQkyMDE4LTIwMTkKCQkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iOTc5NDciPgoJCQkJCQkJCTIwMTctMjAxOAoJCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSI5NDE2NSI+CgkJCQkJCQkJMjAxNi0yMDE3CgkJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjkxNDg3Ij4KCQkJCQkJCQkyMDE1LTIwMTYKCQkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iODk2MTIiPgoJCQkJCQkJCTIwMTQtMjAxNQoJCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSI4NzIwMSI+CgkJCQkJCQkJMjAxMy0yMDE0CgkJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjYzMTkzIj4KCQkJCQkJCQkyMDEyLTIwMTMKCQkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTU3OTMiPgoJCQkJCQkJCTIwMTEtMjAxMgoJCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIxMTI4MyI+CgkJCQkJCQkJMjAxMC0yMDExCgkJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjExMjUzIj4KCQkJCQkJCQkyMDA5LTIwMTAKCQkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTEyMTMiPgoJCQkJCQkJCTIwMDgtMjAwOQoJCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIxMTE3MyI+CgkJCQkJCQkJMjAwNy0yMDA4CgkJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCTwvc2VsZWN0PgoJCQkJCQkJCQk8c2VsZWN0IGlkPSIzMy02MDAtZmlsdGVyLXN0YWdlIiBkYXRhLW5hbWU9InN0YWdlX2lkIiBjbGFzcz0ibWJ0LXYyLXNlbGVjdCI+CgkJCQk8b3B0aW9uIHZhbHVlPSIiPgoJCQkJCVZzaSBkZWxpIHRla21vdmFuamkKCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIyMTIzOTUiPgoJCQkJCQkJMS4gZGVsCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCQk8L3NlbGVjdD4KCQkJCQkJCTxzZWxlY3QgaWQ9IjMzLTYwMC1maWx0ZXItdGVhbSIgZGF0YS1uYW1lPSJ0ZWFtX2lkIiBjbGFzcz0ibWJ0LXYyLXNlbGVjdCI+CgkJCQkJPG9wdGlvbiB2YWx1ZT0iIj4KCQkJCQkJVnNlIGVraXBlCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTY2NDkzIj4KCQkJCQkJCUhlbGlvcyBTdW5zCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE2NTU4MyI+CgkJCQkJCQlIb3BzaSBQb2x6ZWxhCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjMwOTM3MyI+CgkJCQkJCQlJbGlyaWphCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE2NjMyMyI+CgkJCQkJCQlLcmthCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE5ODMwMyI+CgkJCQkJCQlQZXRyb2wgT2xpbXBpamEKCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTY2NTUzIj4KCQkJCQkJCVJvZ2HFoWthCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE5NDk5MyI+CgkJCQkJCQnFoGVuxI11ciBHb3Jlbmpza2EgZ3JhZGJlbmEgZHJ1xb5iYQoJCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIxNjY1MDMiPgoJCQkJCQkJxaBlbnRqdXIKCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTk1MzYzIj4KCQkJCQkJCVNpeHQgUHJpbW9yc2thCgkJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjE2NjUyMyI+CgkJCQkJCQlabGF0b3JvZyBMYcWha28KCQkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTwvc2VsZWN0PgoJCQkJCQk8c2VsZWN0IGlkPSIzMy02MDAtZmlsdGVyLXBvc2l0aW9uIiBkYXRhLW5hbWU9InBvc2l0aW9uIiBjbGFzcz0ibWJ0LXYyLXNlbGVjdCI+CgkJCQk8b3B0aW9uIHZhbHVlPSIiPgoJCQkJCVZzYSBpZ3JhbG5hIG1lc3RhCgkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMSI+CgkJCQkJCUtyaWxvCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjIiPgoJCQkJCQlCcmFuaWxlYwoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIzIj4KCQkJCQkJQ2VudGVyCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjQiPgoJCQkJCQlPcmdhbml6YXRvciBpZ3JlCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjUiPgoJCQkJCQlCcmFuaWxlYwoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSI2Ij4KCQkJCQkJS3JpbG8KCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iNyI+CgkJCQkJCUtyaWxuaSBjZW50ZXIKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iOCI+CgkJCQkJCUJyYW5pbGVjL0tyaWxvCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjkiPgoJCQkJCQlLcmlsby9DZW50ZXIKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTAiPgoJCQkJCQlQRy9TRwoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIxMSI+CgkJCQkJCVNHL1NGCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjEyIj4KCQkJCQkJU0YvUEYKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMTMiPgoJCQkJCQlQRi9DCgkJCQkJPC9vcHRpb24+CgkJCQkJCQk8L3NlbGVjdD4KCQk8L2Rpdj4KCQk8ZGl2IGNsYXNzPSJtYnQtdjItZGl2aWRlciI+PC9kaXY+CgkgICAgPGRpdiBpZD0iMzMtNjAwLXRhYi1jb250YWluZXIiPgk8ZGl2IGNsYXNzPSJtYnQtdjItZGl2aWRlciI+PC9kaXY+Cgk8ZGl2IGNsYXNzPSJtYnQtdjItc3ViaGVhZGVyIj4KCQlUb8SNa2UKCTwvZGl2PgoJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllcnMiPgoJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXJzLWxpbmUiPgoJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWdyaWQgbWJ0LXYyLWFsaWduLWl0ZW1zLXZlcnRpY2FsbHkiPgoJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1jb2wgbWJ0LXYyLWNvbC1sYXJnZS02ICBtYnQtdjItY29sLW1lZGl1bS02IG1idC12Mi1jb2wtc21hbGwtNiAgbWJ0LXYyLWNvbC14c21hbGwtNiI+CgkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1ncmlkIG1idC12Mi1hbGlnbi1pdGVtcy12ZXJ0aWNhbGx5Ij4KCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1jb2wgbWJ0LXYyLWNvbC0yIj4KCQkJCQkJCQkJCQkJCQkJCQk8aW1nIHNyYz0iaHR0cDovL3dpZGdldHMuYmFza2V0aG90ZWwuY29tL2ltYWdlLnBocD9jbGllbnQ9MjcmYW1wO2lkPTEyMTAzMDUmYW1wO3ZlcnNpb249NTB4NzAiIGNsYXNzPSJtYnQtdjItaW1hZ2UiIGFsdD0ixJBva28gxaBhbGnEhyI+CgkJCQkJCQkJCQoJCQkJCQkJPC9kaXY+CgkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItY29sIG1idC12Mi1jb2wtNyI+CgkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllci1jYXRlZ29yeSI+CgkJCQkJCQkJCSMxCgkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllci1uYW1lIj4KCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD01NzU4ODU3IiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSI1NzU4ODU3IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTUzMDgwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPsSQb2tvIMWgYWxpxIc8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExNTMwODAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTUzMDgwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTUzMDgwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExNTMwODAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVyLWJpbyI+CgkJCQkJCQkJCTIxMCBjbSwJCQkJCQkJCQkJCQkJCQkJCQkyMyBMZXQJCQkJCQkJCQkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1jb2wgbWJ0LXYyLWNvbC0zIj4KCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllci10ZWFtIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGltZyBzcmM9Imh0dHA6Ly93aWRnZXRzLmJhc2tldGhvdGVsLmNvbS9pbWFnZS5waHA/Y2xpZW50PTI3JmFtcDtpZD02MDA4ODcmYW1wO3ZlcnNpb249NTB4NzAiIGNsYXNzPSJtYnQtdjItaW1hZ2UiIGFsdD0iSGVsaW9zIFN1bnMiPgoJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJPC9kaXY+CQoJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQoJCQkJCQk8L2Rpdj4KCQkJCQk8L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItY29sIG1idC12Mi1jb2wtbGFyZ2UtNiAgbWJ0LXYyLWNvbC1tZWRpdW0tNiBtYnQtdjItY29sLXNtYWxsLTYgIG1idC12Mi1jb2wteHNtYWxsLTYgbWJ0LXYyLWdyaWQtZW5kIj4KCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWdyaWQgbWJ0LXYyLWFsaWduLWl0ZW1zLXZlcnRpY2FsbHkiPgoJCQkJCQkJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItY29sIG1idC12Mi1jb2wtNCI+CgkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXJzLXN0YXRzIj4KCQkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXJzLXZhbHVlIj4KCQkJCQkJCQkJCQkyCgkJCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXJzLXZhbHVlLWRlc2MiPgoJCQkJCQkJCQkJCVNrdXBubzxicj5UZWttZQoJCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1jb2wgbWJ0LXYyLWNvbC00Ij4KCQkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXJzLXN0YXRzIj4KCQkJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVycy12YWx1ZSI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkzNgoJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllcnMtdmFsdWUtZGVzYyI+CgkJCQkJCQkJCQkJCVNrdXBubzxicj4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkJCQkJCQkJVG/EjWtlCgkJCQkJCQkJCQkJCQkKCQkJCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkJCgkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWNvbCBtYnQtdjItY29sLTQgbWJ0LXYyLWdyaWQtZW5kIj4KCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllcnMtc3RhdHMiPgoJCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllcnMtdmFsdWUiPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTE4LjAwCgkJCQkJCQkJCQkJCQkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllcnMtdmFsdWUtZGVzYyI+CgkJCQkJCQkJCQkJUG92cHJlxI1qZTxicj5Ub8SNa2UKCQkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkKCQkJCQkJPC9kaXY+CgkJCQkJPC9kaXY+CgkJCQk8L2Rpdj4KCQkJPC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllcnMtbGluZSI+CgkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItZ3JpZCBtYnQtdjItYWxpZ24taXRlbXMtdmVydGljYWxseSI+CgkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWNvbCBtYnQtdjItY29sLWxhcmdlLTYgIG1idC12Mi1jb2wtbWVkaXVtLTYgbWJ0LXYyLWNvbC1zbWFsbC02ICBtYnQtdjItY29sLXhzbWFsbC02Ij4KCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWdyaWQgbWJ0LXYyLWFsaWduLWl0ZW1zLXZlcnRpY2FsbHkiPgoJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWNvbCBtYnQtdjItY29sLTIiPgoJCQkJCQkJCQkJCQkJCQkJCTxpbWcgc3JjPSJodHRwOi8vd2lkZ2V0cy5iYXNrZXRob3RlbC5jb20vaW1hZ2UucGhwP2NsaWVudD0yNyZhbXA7aWQ9MTIxOTM2NyZhbXA7dmVyc2lvbj01MHg3MCIgY2xhc3M9Im1idC12Mi1pbWFnZSIgYWx0PSJEYXZvciBLb25qZXZpxIciPgoJCQkJCQkJCQkKCQkJCQkJCTwvZGl2PgoJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWNvbCBtYnQtdjItY29sLTciPgoJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXItY2F0ZWdvcnkiPgoJCQkJCQkJCQkjMgoJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXItbmFtZSI+CgkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTc3MjcxNSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTc3MjcxNSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE1NjU1MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5EYXZvciBLb25qZXZpxIc8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExNTY1NTAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTU2NTUwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTU2NTUwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExNTY1NTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVyLWJpbyI+CgkJCQkJCQkJCTE5OCBjbSwJCQkJCQkJCQkJCQkJCQkJCQkyNyBMZXQJCQkJCQkJCQkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1jb2wgbWJ0LXYyLWNvbC0zIj4KCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllci10ZWFtIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJPGltZyBzcmM9Imh0dHA6Ly93aWRnZXRzLmJhc2tldGhvdGVsLmNvbS9pbWFnZS5waHA/Y2xpZW50PTI3JmFtcDtpZD0xMDA2NjcxJmFtcDt2ZXJzaW9uPTUweDcwIiBjbGFzcz0ibWJ0LXYyLWltYWdlIiBhbHQ9IsWgZW50anVyIj4KCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCQkJCQkJCTwvZGl2PgkKCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkKCQkJCQkJPC9kaXY+CgkJCQkJPC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWNvbCBtYnQtdjItY29sLWxhcmdlLTYgIG1idC12Mi1jb2wtbWVkaXVtLTYgbWJ0LXYyLWNvbC1zbWFsbC02ICBtYnQtdjItY29sLXhzbWFsbC02IG1idC12Mi1ncmlkLWVuZCI+CgkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1ncmlkIG1idC12Mi1hbGlnbi1pdGVtcy12ZXJ0aWNhbGx5Ij4KCQkJCQkJCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWNvbCBtYnQtdjItY29sLTQiPgoJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVycy1zdGF0cyI+CgkJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVycy12YWx1ZSI+CgkJCQkJCQkJCQkJMwoJCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVycy12YWx1ZS1kZXNjIj4KCQkJCQkJCQkJCQlTa3Vwbm88YnI+VGVrbWUKCQkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItY29sIG1idC12Mi1jb2wtNCI+CgkJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVycy1zdGF0cyI+CgkJCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllcnMtdmFsdWUiPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJNTMKCQkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXJzLXZhbHVlLWRlc2MiPgoJCQkJCQkJCQkJCQlTa3Vwbm88YnI+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCQkJCQkJCVRvxI1rZQoJCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCQoJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1jb2wgbWJ0LXYyLWNvbC00IG1idC12Mi1ncmlkLWVuZCI+CgkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXJzLXN0YXRzIj4KCQkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXJzLXZhbHVlIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkxNy42NwoJCQkJCQkJCQkJCQkJCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXJzLXZhbHVlLWRlc2MiPgoJCQkJCQkJCQkJCVBvdnByZcSNamU8YnI+VG/EjWtlCgkJCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCgkJCQkJCTwvZGl2PgoJCQkJCTwvZGl2PgoJCQkJPC9kaXY+CgkJCTwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXJzLWxpbmUiPgoJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWdyaWQgbWJ0LXYyLWFsaWduLWl0ZW1zLXZlcnRpY2FsbHkiPgoJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1jb2wgbWJ0LXYyLWNvbC1sYXJnZS02ICBtYnQtdjItY29sLW1lZGl1bS02IG1idC12Mi1jb2wtc21hbGwtNiAgbWJ0LXYyLWNvbC14c21hbGwtNiI+CgkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1ncmlkIG1idC12Mi1hbGlnbi1pdGVtcy12ZXJ0aWNhbGx5Ij4KCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1jb2wgbWJ0LXYyLWNvbC0yIj4KCQkJCQkJCQkJCQkJCQkJCQk8aW1nIHNyYz0iaHR0cDovL3dpZGdldHMuYmFza2V0aG90ZWwuY29tL2ltYWdlLnBocD9jbGllbnQ9MjcmYW1wO2lkPTEyMTEzODcmYW1wO3ZlcnNpb249NTB4NzAiIGNsYXNzPSJtYnQtdjItaW1hZ2UiIGFsdD0iSm9zaHVhIFN0YW5sZXkgSGVhdGgiPgoJCQkJCQkJCQkKCQkJCQkJCTwvZGl2PgoJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWNvbCBtYnQtdjItY29sLTciPgoJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXItY2F0ZWdvcnkiPgoJCQkJCQkJCQkjMwoJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXItbmFtZSI+CgkJCQkJCQkJCTxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTgzMjI3NyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTgzMjI3NyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE1ODk5MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5Kb3NodWEgU3RhbmxleSBIZWF0aDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE1ODk5MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExNTg5OTAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExNTg5OTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE1ODk5MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXItYmlvIj4KCQkJCQkJCQkJMTgwIGNtLAkJCQkJCQkJCQkJCQkJCQkJCTIzIExldAkJCQkJCQkJCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWNvbCBtYnQtdjItY29sLTMiPgoJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVyLXRlYW0iPgoJCQkJCQkJCQkJCQkJCQkJCQkJCQk8aW1nIHNyYz0iaHR0cDovL3dpZGdldHMuYmFza2V0aG90ZWwuY29tL2ltYWdlLnBocD9jbGllbnQ9MjcmYW1wO2lkPTEwNTM3MDUmYW1wO3ZlcnNpb249NTB4NzAiIGNsYXNzPSJtYnQtdjItaW1hZ2UiIGFsdD0iSWxpcmlqYSI+CgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkJCQk8L2Rpdj4JCgkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCgkJCQkJCTwvZGl2PgoJCQkJCTwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1jb2wgbWJ0LXYyLWNvbC1sYXJnZS02ICBtYnQtdjItY29sLW1lZGl1bS02IG1idC12Mi1jb2wtc21hbGwtNiAgbWJ0LXYyLWNvbC14c21hbGwtNiBtYnQtdjItZ3JpZC1lbmQiPgoJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItZ3JpZCBtYnQtdjItYWxpZ24taXRlbXMtdmVydGljYWxseSI+CgkJCQkJCQkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1jb2wgbWJ0LXYyLWNvbC00Ij4KCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllcnMtc3RhdHMiPgoJCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllcnMtdmFsdWUiPgoJCQkJCQkJCQkJCTMKCQkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllcnMtdmFsdWUtZGVzYyI+CgkJCQkJCQkJCQkJU2t1cG5vPGJyPlRla21lCgkJCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLWNvbCBtYnQtdjItY29sLTQiPgoJCQkJCQkJCQkJPGRpdiBjbGFzcz0ibWJ0LXYyLXBsYXllcnMtc3RhdHMtdG9wLXBsYXllcnMtc3RhdHMiPgoJCQkJCQkJCQkJCTxkaXYgY2xhc3M9Im1idC12Mi1wbGF5ZXJzLXN0YXRzLXRvcC1wbGF5ZXJzLXZhbHVlIj4KCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCTUyCgkJCQkJCQkJCQkJCQkKCQkJCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVycy12YWx1ZS1kZXNjIj4KCQkJCQkJCQkJCQkJU2t1cG5vPGJyPgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkJCQkJCQlUb8SNa2UKCQkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQkKCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItY29sIG1idC12Mi1jb2wtNCBtYnQtdjItZ3JpZC1lbmQiPgoJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVycy1zdGF0cyI+CgkJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVycy12YWx1ZSI+CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJMTcuMzMKCQkJCQkJCQkJCQkJCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCQk8ZGl2IGNsYXNzPSJtYnQtdjItcGxheWVycy1zdGF0cy10b3AtcGxheWVycy12YWx1ZS1kZXNjIj4KCQkJCQkJCQkJCQlQb3ZwcmXEjWplPGJyPlRvxI1rZQoJCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQoJCQkJCQk8L2Rpdj4KCQkJCQk8L2Rpdj4KCQkJCTwvZGl2PgoJCQk8L2Rpdj4KCQkJPC9kaXY+CQoJCQoJPGRpdiBjbGFzcz0ibWJ0LXYyLWRpdmlkZXIiPjwvZGl2PgoJPGRpdiBpZD0ibWJ0LXYyLXBsYXllci1zdGF0cy10YWJsZS1hdmVyYWdlcy1jb250YWluZXIiIGNsYXNzPSJtYnQtdjItcmVzcG9uc2l2ZS10YWJsZS1jb250YWluZXIiPgogICAgPHRhYmxlIGlkPSJtYnQtdjItcGxheWVyLXN0YXRzLWF2ZXJhZ2VzLXRhYmxlIiBjbGFzcz0ibWJ0LXYyLXRhYmxlIG1idC12Mi1wbGF5ZXItc3RhdHMtdGFibGUiPgogICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRoPsWgdC48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+SWdyYWxlYzwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Fa2lwYTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VGVrbWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5UT8SMPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UG92cHJlxI1qZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgPC90aGVhZD4KICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAxLgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItaGlkZGVuLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTc1ODg1NyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTc1ODg1NyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE3OTM3MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj7EkG9rbyDFoGFsacSHPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTc5MzcwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE3OTM3MDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE3OTM3MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTc5MzcwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi12aXNpYmxlLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTc1ODg1NyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTc1ODg1NyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE3OTk1MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj7EkC7FoGFsacSHPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTc5OTUwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE3OTk1MDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE3OTk1MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTc5OTUwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY0OTMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjY0OTMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjExODA1MTAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+SGVsaW9zIFN1bnM8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODA1MTAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTgwNTEwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4MDUxMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4MDUxMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMzYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOC4wMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAyLgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItaGlkZGVuLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTc3MjcxNSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTc3MjcxNSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE4MTkwMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5EYXZvciBLb25qZXZpxIc8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODE5MDAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTgxOTAwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTgxOTAwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExODE5MDAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLXZpc2libGUteHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD01NzcyNzE1IiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSI1NzcyNzE1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTgyMjkwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPkQuS29uamV2acSHPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTgyMjkwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE4MjI5MDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4MjI5MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTgyMjkwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1MDMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjY1MDMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjExODI2MzAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+xaBlbnRqdXI8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODI2MzAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTgyNjMwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4MjYzMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4MjYzMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNy42NwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAzLgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItaGlkZGVuLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTgzMjI3NyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTgzMjI3NyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE4MzgzMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5Kb3NodWEgU3RhbmxleSBIZWF0aDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE4MzgzMDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODM4MzAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExODM4MzAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4MzgzMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItdmlzaWJsZS14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTU4MzIyNzciIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9IjU4MzIyNzciIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjExODQxODAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+Si5IZWF0aDwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE4NDE4MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODQxODAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExODQxODAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4NDE4MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MzA5MzczJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMzA5MzczIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTg0NDkwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPklsaXJpamE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODQ0OTAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTg0NDkwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4NDQ5MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4NDQ5MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNy4zMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICA0LgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItaGlkZGVuLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTYzNDQ2NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTYzNDQ2NSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE4NTczMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5DbGV2ZWxhbmQgSm9zZXBoIFRob21hcyBKUjwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE4NTczMDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODU3MzAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExODU3MzAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4NTczMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItdmlzaWJsZS14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTU2MzQ0NjUiIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9IjU2MzQ0NjUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjExODYxMjAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+Qy5UaG9tYXMgSlI8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODYxMjAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTg2MTIwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTg2MTIwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExODYxMjAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NjUyMyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE2NjUyMyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE4NjQzMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5abGF0b3JvZyBMYcWha288L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODY0MzAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTg2NDMwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4NjQzMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4NjQzMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNy4zMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICA1LgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItaGlkZGVuLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9MTQ1ODgzIiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSIxNDU4ODMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjExODc1MjAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+SmFuIMWgcGFuPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTg3NTIwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE4NzUyMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4NzUyMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTg3NTIwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi12aXNpYmxlLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9MTQ1ODgzIiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSIxNDU4ODMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjExODc5NDAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+Si7FoHBhbjwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE4Nzk0MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODc5NDAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExODc5NDAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4Nzk0MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk4MzAzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk4MzAzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTg4MzUwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPlBldHJvbCBPbGltcGlqYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE4ODM1MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODgzNTAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTg4MzUwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTg4MzUwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA2OAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE3LjAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDYuCiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi1oaWRkZW4teHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD0xNjQ3NDMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9IjE2NDc0MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE4OTQ0MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5OZWpjIEJhcmnEjTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE4OTQ0MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExODk0NDAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExODk0NDAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4OTQ0MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItdmlzaWJsZS14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTE2NDc0MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iMTY0NzQzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTg5NzgwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPk4uQmFyacSNPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTg5NzgwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE4OTc4MDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE4OTc4MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTg5NzgwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1MjMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjY1MjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjExOTAwODAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+WmxhdG9yb2cgTGHFoWtvPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTkwMDgwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE5MDA4MDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTAwODAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTAwODAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTcuMDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgNy4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLWhpZGRlbi14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTU1NDg4NTEiIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9IjU1NDg4NTEiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjExOTE0NDAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+TWlsb8WhIFBlxaFpxIc8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExOTE0NDAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTkxNDQwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTkxNDQwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTE0NDAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLXZpc2libGUteHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD01NTQ4ODUxIiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSI1NTQ4ODUxIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTkxODAwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPk0uUGXFoWnEhzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE5MTgwMDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExOTE4MDAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTE4MDAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE5MTgwMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NTAzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2NTAzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTkyMjAwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPsWgZW50anVyPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTkyMjAwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE5MjIwMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTIyMDAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTIyMDAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTYuNjcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgOC4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLWhpZGRlbi14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTE2NTIxMyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iMTY1MjEzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTkzMzEwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPkFsamHFviBTdG9wYXI8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExOTMzMTAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTkzMzEwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTkzMzEwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTMzMTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLXZpc2libGUteHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD0xNjUyMTMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9IjE2NTIxMyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE5MzY0MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5BLlN0b3BhcjwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE5MzY0MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExOTM2NDAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTM2NDAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE5MzY0MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MzA5MzczJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMzA5MzczIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTkzOTQwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPklsaXJpamE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExOTM5NDAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTkzOTQwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE5Mzk0MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE5Mzk0MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNi4wMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICA5LgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItaGlkZGVuLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NzcwNjkzIiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSI3NzA2OTMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjExOTQ5NzAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+U21pbGphbiBQYXZpxIc8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExOTQ5NzAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTk0OTcwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTk0OTcwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTQ5NzAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLXZpc2libGUteHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD03NzA2OTMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9Ijc3MDY5MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE5NTMxMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5TLlBhdmnEhzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE5NTMxMDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExOTUzMTAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTUzMTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE5NTMxMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk0OTkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk0OTkzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTk1NjIwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPsWgZW7EjXVyIEdvcmVuanNrYSBncmFkYmVuYSBkcnXFvmJhPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTk1NjIwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE5NTYyMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTU2MjAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTU2MjAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTQuMzMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgMTAuCiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi1oaWRkZW4teHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD04ODMyMzMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9Ijg4MzIzMyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE5NjY2MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5UamHFviBSb3RhcjwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE5NjY2MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExOTY2NjAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTY2NjAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE5NjY2MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItdmlzaWJsZS14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTg4MzIzMyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iODgzMjMzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTk3MDAwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPlQuUm90YXI8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExOTcwMDAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTk3MDAwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTk3MDAwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTcwMDAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NTU4MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE2NTU4MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE5NzMxMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5Ib3BzaSBQb2x6ZWxhPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTk3MzEwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE5NzMxMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTczMTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTczMTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTQuMDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgMTEuCiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi1oaWRkZW4teHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD0xNzA0NzMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9IjE3MDQ3MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTE5ODM5MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5KdXJlIExhbGnEhzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE5ODM5MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExOTgzOTAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjExOTgzOTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE5ODM5MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItdmlzaWJsZS14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTE3MDQ3MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iMTcwNDczIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMTk4ODEwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPkouTGFsacSHPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMTk4ODEwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE5ODgxMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTE5ODgxMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTk4ODEwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjYzMjMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjYzMjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjExOTkxOTAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+S3JrYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTE5OTE5MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjExOTkxOTAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTk5MTkwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMTk5MTkwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1NQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEzLjc1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDEyLgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItaGlkZGVuLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTQ5NDE1MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTQ5NDE1MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTIwMDQxMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5SYXNodW4gSmFycmVsIERhdmlzPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjAwNDEwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIwMDQxMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwMDQxMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjAwNDEwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi12aXNpYmxlLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTQ5NDE1MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTQ5NDE1MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTIwMDc5MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5SLkRhdmlzPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjAwNzkwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIwMDc5MDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwMDc5MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjAwNzkwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1NTMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjY1NTMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjEyMDExMjAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+Um9nYcWha2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMDExMjAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjAxMTIwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwMTEyMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwMTEyMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMy4zMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAxMy4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLWhpZGRlbi14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTQ4MzgyMTkiIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9IjQ4MzgyMTkiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjEyMDIyMjAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+UGFvbG8gTWFyaW5lbGxpPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjAyMjIwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIwMjIyMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwMjIyMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjAyMjIwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi12aXNpYmxlLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NDgzODIxOSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNDgzODIxOSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTIwMjU2MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5QLk1hcmluZWxsaTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIwMjU2MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMDI1NjAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMDI1NjAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwMjU2MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2MzIzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2MzIzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjAzMDEwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPktya2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMDMwMTAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjAzMDEwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwMzAxMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwMzAxMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMy4yNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAxNC4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLWhpZGRlbi14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTE0MzYyMyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iMTQzNjIzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjA0MTMwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPkJsYcW+IE1haGtvdmljPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjA0MTMwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIwNDEzMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwNDEzMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjA0MTMwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi12aXNpYmxlLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9MTQzNjIzIiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSIxNDM2MjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjEyMDQ0NzAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+Qi5NYWhrb3ZpYzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIwNDQ3MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMDQ0NzAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMDQ0NzAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwNDQ3MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2MzIzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2MzIzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjA0NzgwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPktya2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMDQ3ODAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjA0NzgwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwNDc4MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwNDc4MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMzkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMy4wMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAxNS4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLWhpZGRlbi14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTI2NjM2NTMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9IjI2NjM2NTMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjEyMDU3OTAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+QWxla3NhbmRhciBMYXppxIc8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMDU3OTAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjA1NzkwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjA1NzkwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMDU3OTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLXZpc2libGUteHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD0yNjYzNjUzIiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSIyNjYzNjUzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjA2MTIwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPkEuTGF6acSHPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjA2MTIwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIwNjEyMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwNjEyMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjA2MTIwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xOTgzMDMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxOTgzMDMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjEyMDY1MTAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+UGV0cm9sIE9saW1waWphPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjA2NTEwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIwNjUxMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMDY1MTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMDY1MTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTMuMDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgMTYuCiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi1oaWRkZW4teHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD01NzY0OTgxIiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSI1NzY0OTgxIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjA3NzgwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPkRvbm92b24gTWF0dGhldyBKYWNrPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjA3NzgwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIwNzc4MDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIwNzc4MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjA3NzgwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi12aXNpYmxlLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTc2NDk4MSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTc2NDk4MSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTIwODEyMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5ELkphY2s8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMDgxMjAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjA4MTIwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjA4MTIwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMDgxMjAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE2NTU4MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE2NTU4MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTIwODUxMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5Ib3BzaSBQb2x6ZWxhPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjA4NTEwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIwODUxMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMDg1MTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMDg1MTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTIuNTAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgMTcuCiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi1oaWRkZW4teHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD0xNjg0MTQzIiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSIxNjg0MTQzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjA5NzMwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPkhhcmlzIMSMdcSNb3ZpxIc8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMDk3MzAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjA5NzMwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjA5NzMwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMDk3MzAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLXZpc2libGUteHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD0xNjg0MTQzIiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSIxNjg0MTQzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjEwMDgwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPkguxIx1xI1vdmnEhzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIxMDA4MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMTAwODAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMTAwODAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIxMDA4MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MzA5MzczJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMzA5MzczIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjEwNTkwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPklsaXJpamE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMTA1OTAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjEwNTkwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIxMDU5MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIxMDU5MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMzYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMi4wMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAxOC4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLWhpZGRlbi14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTE0MTM0MyIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iMTQxMzQzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjExNjYwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPkx1a2EgTGFwb3JuaWs8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMTE2NjAwMTU0MTIzNDEwMyIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjExNjYwMDE1NDEyMzQxMDMiKS5ocmVmID0gbmF2aWdhdGVQbGF5ZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjExNjYwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3BsYXllcl9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMTE2NjAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWJ0LXYyLXZpc2libGUteHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD0xNDEzNDMiIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9IjE0MTM0MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTIxMTk5MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5MLkxhcG9ybmlrPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjExOTkwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIxMTk5MDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIxMTk5MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjExOTkwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjYzMjMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjYzMjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjEyMTIyOTAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+S3JrYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIxMjI5MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMTIyOTAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjEyMjkwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjEyMjkwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0NwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExLjc1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDE5LgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItaGlkZGVuLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTMyOTMxMSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTMyOTMxMSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTIxMzMxMDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5OaWtvbGEgR2FqacSHPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjEzMzEwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIxMzMxMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlUGxheWVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIxMzMxMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdwbGF5ZXJfaWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC4xMjEzMzEwMDE1NDEyMzQxMDMnKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi12aXNpYmxlLXhzbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY4JmFtcDtzZWFzb25faWQ9MTA0Nzg1JmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtwbGF5ZXJfaWQ9NTMyOTMxMSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHBsYXllcl9pZD0iNTMyOTMxMSIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuMTIxMzY0MDAxNTQxMjM0MTAzIiBvbmx5dXJsPSIxIj5OLkdhamnEhzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIxMzY0MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMTM2NDAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMTM2NDAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIxMzY0MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NDkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2NDkzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjEzOTMwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPkhlbGlvcyBTdW5zPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjEzOTMwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIxMzkzMDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMTM5MzAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMTM5MzAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTEuMzMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgMjAuCiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1idC12Mi1oaWRkZW4teHNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjgmYW1wO3NlYXNvbl9pZD0xMDQ3ODUmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3BsYXllcl9pZD01NzY5MTc1IiBzZWFzb25faWQ9IjEwNDc4NSIgcGxheWVyX2lkPSI1NzY5MTc1IiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjE1MTAwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPlN0ZWZhbiBNaWpvdmnEhzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIxNTEwMDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMTUxMDAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMTUxMDAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIxNTEwMDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYnQtdjItdmlzaWJsZS14c21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2OCZhbXA7c2Vhc29uX2lkPTEwNDc4NSZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7cGxheWVyX2lkPTU3NjkxNzUiIHNlYXNvbl9pZD0iMTA0Nzg1IiBwbGF5ZXJfaWQ9IjU3NjkxNzUiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjEyMTU0NTAwMTU0MTIzNDEwMyIgb25seXVybD0iMSI+Uy5NaWpvdmnEhzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIxNTQ1MDAxNTQxMjM0MTAzIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjEyMTU0NTAwMTU0MTIzNDEwMyIpLmhyZWYgPSBuYXZpZ2F0ZVBsYXllcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMTU0NTAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgncGxheWVyX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuMTIxNTQ1MDAxNTQxMjM0MTAzJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NTUzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2NTUzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC4xMjE1NzYwMDE1NDEyMzQxMDMiIG9ubHl1cmw9IjEiPlJvZ2HFoWthPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC4xMjE1NzYwMDE1NDEyMzQxMDMiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuMTIxNTc2MDAxNTQxMjM0MTAzIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMTU3NjAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjEyMTU3NjAwMTU0MTIzNDEwMycpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTEuMzMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICA8L3RhYmxlPgo8L2Rpdj4KCgk8ZGl2IGNsYXNzPSJtYnQtdjItZGl2aWRlciI+PC9kaXY+Cgk8ZGl2IGNsYXNzPSJtYnQtdjItZ3JpZCI+CgkJPGRpdiBjbGFzcz0ibWJ0LXYyLWNvbCBtYnQtdjItY29sLTEyIj4KCQkJPHVsIGNsYXNzPSJtYnQtdjItcGFnaW5hdGlvbiI+CgkJCQkJCQkJCQkJCQkJCQkJCQk8bGkgY2xhc3M9Im1idC12Mi1wYWdpbmF0aW9uLWFjdGl2ZSI+CgkJCQkJCQkJCQkJCQkJCQk8c3Bhbj4KCQkJCQkJCTEKCQkJCQkJPC9zcGFuPgoJCQkJCQkJCQkJPC9saT4KCQkJCQkJCQkJCQkJCQkJPGxpPgkKCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9IiMiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiIGlkPSIzMy02MDAtcGFnZS0yIj4KCQkJCQkJCTIKCQkJCQkJPC9hPgoJCQkJCQkJCQkJPC9saT4KCQkJCQkJCQkJCQkJCQkJPGxpPgkKCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9IiMiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiIGlkPSIzMy02MDAtcGFnZS0zIj4KCQkJCQkJCTMKCQkJCQkJPC9hPgoJCQkJCQkJCQkJPC9saT4KCQkJCQkJCQkJCQkJCQkJPGxpPgkKCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9IiMiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiIGlkPSIzMy02MDAtcGFnZS00Ij4KCQkJCQkJCTQKCQkJCQkJPC9hPgoJCQkJCQkJCQkJPC9saT4KCQkJCQkJCQkJCQkJCQkJPGxpPgkKCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9IiMiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiIGlkPSIzMy02MDAtcGFnZS01Ij4KCQkJCQkJCTUKCQkJCQkJPC9hPgoJCQkJCQkJCQkJPC9saT4KCQkJCQkJCQkJCQkJCQkJPGxpPgkKCQkJCQkJCQkJCQkJCQkJCTxhIGhyZWY9IiMiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiIGlkPSIzMy02MDAtcGFnZS02Ij4KCQkJCQkJCTYKCQkJCQkJPC9hPgoJCQkJCQkJCQkJPC9saT4KCQkJCQkJCQkJCQkJCTxsaSBjbGFzcz0ibWJ0LXYyLXBhZ2luYXRpb24tbmV4dCI+CgkJCQkJCTxhIGhyZWY9IiMiIG9uY2xpY2s9InJldHVybiBmYWxzZTsiIGlkPSIzMy02MDAtcGFnZS1uZXh0Ij4KCQkJCQkJCeKdryAKCQkJCQkJPC9hPgoJCQkJCTwvbGk+CgkJCQkJCQk8L3VsPgoJCTwvZGl2PgoJPC9kaXY+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8vPCFbQ0RBVEFbCgoJdmFyIG5hbWVzcGFjZSA9IE1CVC5BUEkuU2FmZU5hbWVzLkNvbnRhaW5lcignMzMtNjAwJyk7CgkKCW5hbWVzcGFjZS5vblBhZ2VDbGljayA9IGZ1bmN0aW9uKGUsIHBhZ2UpIHsKCgkJbmFtZXNwYWNlLnBhcmFtcy5wYWdlID0gcGFnZTsKCQkKCQluZXcgTUJULkFQSS5XaWRnZXRzLldpZGdldCh7CgkJCXdpZGdldElkOiA2MDAsCgkJCWNvbnRhaW5lcjogJzMzLTYwMC10YWItY29udGFpbmVyJywKCQkJc3RhdGU6ICdJRFU0T0RBMk9EUTJOMkU2TVRVNmUzTTZNVGs2SW14bFlXZDFaVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hOem9pZEdWaGJWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE56b2laMkZ0WlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94T1RvaWNHeGhlV1Z5WDJ4cGJtdGZkbWx6YVdKc1pTSTdjem94T2lJeElqdHpPams2SW14bFlXZDFaVjlwWkNJN2N6bzBPaUk1TXpNeklqdHpPakUwT2lKbllXMWxYMnhwYm10ZmRIbHdaU0k3Y3pveE9pSXpJanR6T2pFM09pSm5ZVzFsWDJ4cGJtdGZhR0Z1Wkd4bGNpSTdjem94TWpvaWJtRjJhV2RoZEdWSFlXMWxJanR6T2pFME9pSjBaV0Z0WDJ4cGJtdGZkSGx3WlNJN2N6b3hPaUl6SWp0ek9qRTNPaUowWldGdFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVlVaV0Z0SWp0ek9qRTJPaUp3YkdGNVpYSmZiR2x1YTE5MGVYQmxJanR6T2pFNklqTWlPM002TVRrNkluQnNZWGxsY2w5c2FXNXJYMmhoYm1Sc1pYSWlPM002TVRRNkltNWhkbWxuWVhSbFVHeGhlV1Z5SWp0ek9qZzZJblJsYlhCc1lYUmxJanR6T2pJNkluWXlJanR6T2pFNU9pSjFjMlZmWVdSMllXNWpaV1JmWm1sc2RHVnlJanR6T2pRNkluUnlkV1VpTzNNNk5qb2labWxzZEdWeUlqdGhPalU2ZTNNNk9Eb2ljM1JoZEY5allYUWlPM002TXpvaWNIUnpJanR6T2prNkluTmxZWE52Ymw5cFpDSTdjem8yT2lJeE1EUTNPRFVpTzNNNk9Eb2ljM1JoWjJWZmFXUWlPM002TURvaUlqdHpPamM2SW5SbFlXMWZhV1FpTzNNNk1Eb2lJanR6T2pnNkluQnZjMmwwYVc5dUlqdHpPakE2SWlJN2ZYTTZORG9pY0dGblpTSTdjem94T2lJd0lqdDknLAoJCQlwYXJhbXM6IG5hbWVzcGFjZS5wYXJhbXMKCQl9KS5yZW5kZXJQYXJ0aWFsKG5hbWVzcGFjZS5wYXJ0aWFsKTsKCX0KCgkJCQkJCQkJCQkJCQkJCQkJTUJULkFQSS5FdmVudC5vYnNlcnZlKCczMy02MDAtcGFnZS0yJywgImNsaWNrIiwgTUJULkFQSS5GdW5jdGlvbi5jcmVhdGVEZWxlZ2F0ZShuYW1lc3BhY2Uub25QYWdlQ2xpY2ssIG51bGwsIFsyXSwgMSkpOyAKCQkJCQkJCQkJCQkJTUJULkFQSS5FdmVudC5vYnNlcnZlKCczMy02MDAtcGFnZS0zJywgImNsaWNrIiwgTUJULkFQSS5GdW5jdGlvbi5jcmVhdGVEZWxlZ2F0ZShuYW1lc3BhY2Uub25QYWdlQ2xpY2ssIG51bGwsIFszXSwgMSkpOyAKCQkJCQkJCQkJCQkJTUJULkFQSS5FdmVudC5vYnNlcnZlKCczMy02MDAtcGFnZS00JywgImNsaWNrIiwgTUJULkFQSS5GdW5jdGlvbi5jcmVhdGVEZWxlZ2F0ZShuYW1lc3BhY2Uub25QYWdlQ2xpY2ssIG51bGwsIFs0XSwgMSkpOyAKCQkJCQkJCQkJCQkJTUJULkFQSS5FdmVudC5vYnNlcnZlKCczMy02MDAtcGFnZS01JywgImNsaWNrIiwgTUJULkFQSS5GdW5jdGlvbi5jcmVhdGVEZWxlZ2F0ZShuYW1lc3BhY2Uub25QYWdlQ2xpY2ssIG51bGwsIFs1XSwgMSkpOyAKCQkJCQkJCQkJCQkJTUJULkFQSS5FdmVudC5vYnNlcnZlKCczMy02MDAtcGFnZS02JywgImNsaWNrIiwgTUJULkFQSS5GdW5jdGlvbi5jcmVhdGVEZWxlZ2F0ZShuYW1lc3BhY2Uub25QYWdlQ2xpY2ssIG51bGwsIFs2XSwgMSkpOyAKCQkJCQkJCQkJCU1CVC5BUEkuRXZlbnQub2JzZXJ2ZSgnMzMtNjAwLXBhZ2UtbmV4dCcsICJjbGljayIsIE1CVC5BUEkuRnVuY3Rpb24uY3JlYXRlRGVsZWdhdGUobmFtZXNwYWNlLm9uUGFnZUNsaWNrLCBudWxsLCBbMl0sIDEpKTsgCgkJCS8vXV0+Cjwvc2NyaXB0PgogICAgPHAgY2xhc3M9Im1idC12Mi1pbmZvLXRleHQiPgogICAgICAgIElncmFsZWMgamUgdXZyxaHEjWVuIHYgdG8ga2F0ZWdvcmlqbywgxI1lIGplIGlncmFsIG5hIG5ham1hbmogNTAlIHRla21haAogICAgPC9wPgogICAKCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KLy88IVtDREFUQVsKCiAgICBuZXcgTUJULkFQSS5yZXNwb25zaXZlVGFibGUgKHsKICAgICAgICB0YWJsZTogJ21idC12Mi1wbGF5ZXItc3RhdHMtYXZlcmFnZXMtdGFibGUnLAogICAgICAgIHRhYmxlc0NvbnRhaW5lcjogJ21idC12Mi1wbGF5ZXItc3RhdHMtdGFibGUtYXZlcmFnZXMtY29udGFpbmVyJywKICAgICAgICBjb2x1bW5zVG9QaW46IDIKICAgIH0pLndhdGNoVGFibGUoKTsKCi8vXV0+Cjwvc2NyaXB0PjwvZGl2PgoJPC9kaXY+CjwvZGl2PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgovLzwhW0NEQVRBWwoJCgl2YXIgbmFtZXNwYWNlID0gTUJULkFQSS5TYWZlTmFtZXMuQ29udGFpbmVyKCczMy02MDAnKTsKCgluYW1lc3BhY2UubW9iaWxlTWVudSA9IG5ldyBNQlQuQVBJLmNyZWF0ZVJlc3BvbnNpdmVOYXZpZ2F0aW9uKHsKCQltZW51Q29udGFpbmVyIDogIjMzLTYwMC1tYnQtdjItbmF2aWdhdGlvbiIsCgkJbW9iaWxlTWVudUNvbnRhaW5lciA6ICIzMy02MDAtbW9iaWxlLW1lbnUiLAoJCW1vYmlsZU1lbnVDbG9zZVRleHQ6ICJJemJlcmkiLAoJfSk7CgoJbmFtZXNwYWNlLm1vYmlsZUZpbHRlcnMgPSBuZXcgTUJULkFQSS5jcmVhdGVSZXNwb25zaXZlTmF2aWdhdGlvbih7CgkJbWVudUNvbnRhaW5lciA6ICIzMy02MDAtZmlsdGVycy1ibG9jayIsCgkJbW9iaWxlTWVudUNvbnRhaW5lciA6ICIzMy02MDAtbW9iaWxlLWZpbHRlcnMtYmxvY2siLAoJCWZpbHRlcnNNb2RlOiB0cnVlCgl9KTsKCgluYW1lc3BhY2UucGFyYW1zID0ge307CgoJbmFtZXNwYWNlLnBhcmFtcy51c2VfYWR2YW5jZWRfZmlsdGVyID0gdHJ1ZTsKCgluYW1lc3BhY2UucGFyYW1zLmZpbHRlciA9IHt9OwoKCW5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzID0gTUJULkFQSS5nZXQoJzMzLTYwMC1maWx0ZXJzLWJsb2NrJykuY2hpbGROb2RlczsKCglmb3Ioa2V5IGluIG5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzKSB7CgkJaWYobmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnNba2V5XS5ub2RlVHlwZSA9PSAxKSB7CgkJCW5hbWVzcGFjZS5wYXJhbXMuZmlsdGVyW25hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzW2tleV0uZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKV0gPSBuYW1lc3BhY2UuYXZhaWxhYmxlRmlsdGVyc1trZXldLnZhbHVlOwoJCX0KCX0KCgluYW1lc3BhY2Uub25GaWx0ZXJDaGFuZ2UgPSBmdW5jdGlvbihlLCBmaWx0ZXIpIHsKCgkJbmFtZXNwYWNlLnBhcmFtcy5maWx0ZXJbZmlsdGVyXSA9IGUudGFyZ2V0LnZhbHVlOwoKCQluYW1lc3BhY2UucGFyYW1zLnBhZ2UgPSAwOwoKCQlpZihmaWx0ZXIgPT0gJ3NlYXNvbl9pZCcgfHwgZmlsdGVyID09ICdzdGFnZV9pZCcpIHsKCQkJaWYobmFtZXNwYWNlLnBhcmFtcy5maWx0ZXIudGVhbV9pZCkgewoJCQkJZGVsZXRlIG5hbWVzcGFjZS5wYXJhbXMuZmlsdGVyLnRlYW1faWQ7CgkJCQlpZihmaWx0ZXIgPT0gJ3NlYXNvbl9pZCcpIHsKCQkJCQlkZWxldGUgbmFtZXNwYWNlLnBhcmFtcy5maWx0ZXIuc3RhZ2VfaWQ7CgkJCQl9CgkJCQluZXcgTUJULkFQSS5XaWRnZXRzLldpZGdldCh7CgkJCQkJd2lkZ2V0SWQ6IDYwMCwKCQkJCQljb250YWluZXI6ICczMy02MDAtZmlsdGVyLXRlYW0nLAoJCQkJCXN0YXRlOiAnTVRneU5EUTFPRFU1TkdFNk1USTZlM002TVRrNklteGxZV2QxWlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94TnpvaWRHVmhiVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hOem9pWjJGdFpWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE9Ub2ljR3hoZVdWeVgyeHBibXRmZG1semFXSnNaU0k3Y3pveE9pSXhJanR6T2prNklteGxZV2QxWlY5cFpDSTdjem8wT2lJNU16TXpJanR6T2pFME9pSm5ZVzFsWDJ4cGJtdGZkSGx3WlNJN2N6b3hPaUl6SWp0ek9qRTNPaUpuWVcxbFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVkhZVzFsSWp0ek9qRTBPaUowWldGdFgyeHBibXRmZEhsd1pTSTdjem94T2lJeklqdHpPakUzT2lKMFpXRnRYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hNam9pYm1GMmFXZGhkR1ZVWldGdElqdHpPakUyT2lKd2JHRjVaWEpmYkdsdWExOTBlWEJsSWp0ek9qRTZJak1pTzNNNk1UazZJbkJzWVhsbGNsOXNhVzVyWDJoaGJtUnNaWElpTzNNNk1UUTZJbTVoZG1sbllYUmxVR3hoZVdWeUlqdHpPamc2SW5SbGJYQnNZWFJsSWp0ek9qSTZJbll5SWp0OScsCgkJCQkJcGFyYW1zOiB7CgkJCQkJCXNlYXNvbl9pZDogbmFtZXNwYWNlLnBhcmFtcy5maWx0ZXIuc2Vhc29uX2lkLAoJCQkJCQlzdGFnZV9pZDogbmFtZXNwYWNlLnBhcmFtcy5maWx0ZXIuc3RhZ2VfaWQKCQkJCQl9CgkJCQl9KS5yZW5kZXJQYXJ0aWFsKCdnZXQtdGVhbXMnKTsKCQkJfQoKCQkJaWYoZmlsdGVyICE9ICdzdGFnZV9pZCcpIHsKCQkJCW5ldyBNQlQuQVBJLldpZGdldHMuV2lkZ2V0KHsKCQkJCQl3aWRnZXRJZDogNjAwLAoJCQkJCWNvbnRhaW5lcjogJzMzLTYwMC1maWx0ZXItc3RhZ2UnLAoJCQkJCXN0YXRlOiAnTVRneU5EUTFPRFU1TkdFNk1USTZlM002TVRrNklteGxZV2QxWlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94TnpvaWRHVmhiVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hOem9pWjJGdFpWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE9Ub2ljR3hoZVdWeVgyeHBibXRmZG1semFXSnNaU0k3Y3pveE9pSXhJanR6T2prNklteGxZV2QxWlY5cFpDSTdjem8wT2lJNU16TXpJanR6T2pFME9pSm5ZVzFsWDJ4cGJtdGZkSGx3WlNJN2N6b3hPaUl6SWp0ek9qRTNPaUpuWVcxbFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVkhZVzFsSWp0ek9qRTBPaUowWldGdFgyeHBibXRmZEhsd1pTSTdjem94T2lJeklqdHpPakUzT2lKMFpXRnRYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hNam9pYm1GMmFXZGhkR1ZVWldGdElqdHpPakUyT2lKd2JHRjVaWEpmYkdsdWExOTBlWEJsSWp0ek9qRTZJak1pTzNNNk1UazZJbkJzWVhsbGNsOXNhVzVyWDJoaGJtUnNaWElpTzNNNk1UUTZJbTVoZG1sbllYUmxVR3hoZVdWeUlqdHpPamc2SW5SbGJYQnNZWFJsSWp0ek9qSTZJbll5SWp0OScsCgkJCQkJcGFyYW1zOiB7CgkJCQkJCXNlYXNvbl9pZDogbmFtZXNwYWNlLnBhcmFtcy5maWx0ZXIuc2Vhc29uX2lkCgkJCQkJfQoJCQkJfSkucmVuZGVyUGFydGlhbCgnZ2V0LXN0YWdlcycpOwoJCQl9CgkJfQoKCQluZXcgTUJULkFQSS5XaWRnZXRzLldpZGdldCh7CgkJCXdpZGdldElkOiA2MDAsCgkJCWNvbnRhaW5lcjogJzMzLTYwMC10YWItY29udGFpbmVyJywKCQkJc3RhdGU6ICdNVGd5TkRRMU9EVTVOR0U2TVRJNmUzTTZNVGs2SW14bFlXZDFaVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hOem9pZEdWaGJWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE56b2laMkZ0WlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94T1RvaWNHeGhlV1Z5WDJ4cGJtdGZkbWx6YVdKc1pTSTdjem94T2lJeElqdHpPams2SW14bFlXZDFaVjlwWkNJN2N6bzBPaUk1TXpNeklqdHpPakUwT2lKbllXMWxYMnhwYm10ZmRIbHdaU0k3Y3pveE9pSXpJanR6T2pFM09pSm5ZVzFsWDJ4cGJtdGZhR0Z1Wkd4bGNpSTdjem94TWpvaWJtRjJhV2RoZEdWSFlXMWxJanR6T2pFME9pSjBaV0Z0WDJ4cGJtdGZkSGx3WlNJN2N6b3hPaUl6SWp0ek9qRTNPaUowWldGdFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVlVaV0Z0SWp0ek9qRTJPaUp3YkdGNVpYSmZiR2x1YTE5MGVYQmxJanR6T2pFNklqTWlPM002TVRrNkluQnNZWGxsY2w5c2FXNXJYMmhoYm1Sc1pYSWlPM002TVRRNkltNWhkbWxuWVhSbFVHeGhlV1Z5SWp0ek9qZzZJblJsYlhCc1lYUmxJanR6T2pJNkluWXlJanQ5JywKCQkJcGFyYW1zOiBuYW1lc3BhY2UucGFyYW1zCgkJfSkucmVuZGVyUGFydGlhbChuYW1lc3BhY2UucGFydGlhbCk7Cgl9CgoJbmFtZXNwYWNlLm9uVGFiQ2xpY2sgPSBmdW5jdGlvbih0YWJQYW5lbCwgaW5kZXgsIHBhcnQpIHsKCgkJbmFtZXNwYWNlLnBhcmFtcy5wYWdlID0gMDsKCgkJZm9yKGtleSBpbiBuYW1lc3BhY2UuYXZhaWxhYmxlRmlsdGVycykgewoJCQlpZihuYW1lc3BhY2UuYXZhaWxhYmxlRmlsdGVyc1trZXldLm5vZGVUeXBlID09IDEpIHsKCQkJCWlmKG5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzW2tleV0uZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKSA9PSAnc2Vhc29uX2lkJykgewoJCQkJCWlmKG5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzW2tleV0ub3B0aW9uc1swXS52YWx1ZSA9PSAiIikgewoJCQkJCQluYW1lc3BhY2UuYXZhaWxhYmxlRmlsdGVyc1trZXldLnNlbGVjdGVkSW5kZXggPSAxOwoJCQkJCQluYW1lc3BhY2UucGFyYW1zLmZpbHRlci5zZWFzb25faWQgPSBuYW1lc3BhY2UuYXZhaWxhYmxlRmlsdGVyc1trZXldLm9wdGlvbnNbMV0udmFsdWU7CgkJCQkJfSBlbHNlIHsKCQkJCQkgICAgbmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnNbJ2tleSddLnNlbGVjdGVkSW5kZXggPSAxOwoJCQkJCSAgICBuYW1lc3BhY2UucGFyYW1zLmZpbHRlci5zZWFzb25faWQgPSBuYW1lc3BhY2UuYXZhaWxhYmxlRmlsdGVyc1trZXldLm9wdGlvbnNbMV0udmFsdWU7CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQluYW1lc3BhY2UuYXZhaWxhYmxlRmlsdGVyc1trZXldLnNlbGVjdGVkSW5kZXggPTA7CgkJCQkJbmFtZXNwYWNlLnBhcmFtcy5maWx0ZXJbbmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnNba2V5XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpXSA9IG5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzW2tleV0ub3B0aW9uc1swXS52YWx1ZTsKCQkJCX0KCQkJfQoJCX0KCgkJbmFtZXNwYWNlLnBhcnRpYWwgPSBwYXJ0OwoKCQluZXcgTUJULkFQSS5XaWRnZXRzLldpZGdldCh7CgkJCQl3aWRnZXRJZDogNjAwLAoJCQkJY29udGFpbmVyOiAnMzMtNjAwLWZpbHRlci1zdGF0cycsCgkJCQlzdGF0ZTogJ01UZ3lORFExT0RVNU5HRTZNVEk2ZTNNNk1UazZJbXhsWVdkMVpWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE56b2lkR1ZoYlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94TnpvaVoyRnRaVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hPVG9pY0d4aGVXVnlYMnhwYm10ZmRtbHphV0pzWlNJN2N6b3hPaUl4SWp0ek9qazZJbXhsWVdkMVpWOXBaQ0k3Y3pvME9pSTVNek16SWp0ek9qRTBPaUpuWVcxbFgyeHBibXRmZEhsd1pTSTdjem94T2lJeklqdHpPakUzT2lKbllXMWxYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hNam9pYm1GMmFXZGhkR1ZIWVcxbElqdHpPakUwT2lKMFpXRnRYMnhwYm10ZmRIbHdaU0k3Y3pveE9pSXpJanR6T2pFM09pSjBaV0Z0WDJ4cGJtdGZhR0Z1Wkd4bGNpSTdjem94TWpvaWJtRjJhV2RoZEdWVVpXRnRJanR6T2pFMk9pSndiR0Y1WlhKZmJHbHVhMTkwZVhCbElqdHpPakU2SWpNaU8zTTZNVGs2SW5Cc1lYbGxjbDlzYVc1clgyaGhibVJzWlhJaU8zTTZNVFE2SW01aGRtbG5ZWFJsVUd4aGVXVnlJanR6T2pnNkluUmxiWEJzWVhSbElqdHpPakk2SW5ZeUlqdDknLAoJCQkJcGFyYW1zOiB7CgkJCQkJdGFiOiBwYXJ0CgkJCQl9CgkJCX0pLnJlbmRlclBhcnRpYWwoJ2dldC1zdGF0LWNhdGVnb3JpZXMnKTsKCgkJbmV3IE1CVC5BUEkuV2lkZ2V0cy5XaWRnZXQoewoJCQl3aWRnZXRJZDogNjAwLAoJCQljb250YWluZXI6ICczMy02MDAtdGFiLWNvbnRhaW5lcicsCgkJCXN0YXRlOiAnTVRneU5EUTFPRFU1TkdFNk1USTZlM002TVRrNklteGxZV2QxWlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94TnpvaWRHVmhiVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hOem9pWjJGdFpWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE9Ub2ljR3hoZVdWeVgyeHBibXRmZG1semFXSnNaU0k3Y3pveE9pSXhJanR6T2prNklteGxZV2QxWlY5cFpDSTdjem8wT2lJNU16TXpJanR6T2pFME9pSm5ZVzFsWDJ4cGJtdGZkSGx3WlNJN2N6b3hPaUl6SWp0ek9qRTNPaUpuWVcxbFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVkhZVzFsSWp0ek9qRTBPaUowWldGdFgyeHBibXRmZEhsd1pTSTdjem94T2lJeklqdHpPakUzT2lKMFpXRnRYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hNam9pYm1GMmFXZGhkR1ZVWldGdElqdHpPakUyT2lKd2JHRjVaWEpmYkdsdWExOTBlWEJsSWp0ek9qRTZJak1pTzNNNk1UazZJbkJzWVhsbGNsOXNhVzVyWDJoaGJtUnNaWElpTzNNNk1UUTZJbTVoZG1sbllYUmxVR3hoZVdWeUlqdHpPamc2SW5SbGJYQnNZWFJsSWp0ek9qSTZJbll5SWp0OScsCgkJCXBhcmFtczogbmFtZXNwYWNlLnBhcmFtcwoJCX0pLnJlbmRlclBhcnRpYWwobmFtZXNwYWNlLnBhcnRpYWwpOwoJfQoKCW5hbWVzcGFjZS50YWJzID0gW107CgoJbmFtZXNwYWNlLm1lbnVJdGVtcyA9IE1CVC5BUEkuZ2V0KCczMy02MDAtbWJ0LXYyLW5hdmlnYXRpb24nKS5jaGlsZE5vZGVzOwoKCWZvcih2YXIgaSA9IDA7IGkgPCAgbmFtZXNwYWNlLm1lbnVJdGVtcy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmKG5hbWVzcGFjZS5tZW51SXRlbXNbaV0ubm9kZVR5cGUgPT0gMSkgewogICAgICAgIAluYW1lc3BhY2UudGFicy5wdXNoKHsKICAgICAgICAJCXRhYklkOiBuYW1lc3BhY2UubWVudUl0ZW1zW2ldLmlkLAogICAgICAgIAkJbmVlZExvYWQ6IE1CVC5BUEkuRnVuY3Rpb24uY3JlYXRlRGVsZWdhdGUobmFtZXNwYWNlLm9uVGFiQ2xpY2ssIG51bGwsIG5hbWVzcGFjZS5tZW51SXRlbXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKSwgMiksCiAgICAgICAgCX0pOwogICAgICAgIH0KCX0KCgluYW1lc3BhY2UuVGFiQ29udHJvbGxlciA9IG5ldyBNQlQuQVBJLlVJLlRhYlBhbmVsKHsKCQljb250YWluZXI6ICczMy02MDAtdGFiLWNvbnRhaW5lcicsCgkJdGFiQ2xhc3M6ICdtYnQtdjItbmF2aWdhdGlvbi10YWInLAogICAgICAgIGFjdGl2ZVRhYkNsYXNzOiAnbWJ0LXYyLW5hdmlnYXRpb24tdGFiLWFjdGl2ZScsCiAgICAgICAgdGFiczogbmFtZXNwYWNlLnRhYnMsCiAgICAgICAgbm9DYWNoZTogdHJ1ZSwKCQlhY3RpdmVUYWI6IDAKCX0pOwoKCW5hbWVzcGFjZS5UYWJDb250cm9sbGVyLmFjdGl2ZVRhYiA9IDA7CgoJc3dpdGNoIChuYW1lc3BhY2UuVGFiQ29udHJvbGxlci5hY3RpdmVUYWIpIHsKCQljYXNlIDA6CgkJCW5hbWVzcGFjZS5wYXJ0aWFsID0gJ2F2ZXJhZ2VzJzsKCQkJYnJlYWs7CgkJY2FzZSAxOgoJCQluYW1lc3BhY2UucGFydGlhbCA9ICdoaWdocyc7CgkJCWJyZWFrOwoJICAgIGNhc2UgMjoKCQkJbmFtZXNwYWNlLnBhcnRpYWwgPSAndG90YWxzJzsKCQkJYnJlYWs7CgkJY2FzZSAzOgoJCQluYW1lc3BhY2UucGFydGlhbCA9ICc0MG1pbic7CgkJCWJyZWFrOwoJfQoKCU1CVC5BUEkuRXZlbnQub2JzZXJ2ZSgnMzMtNjAwLWZpbHRlci1zZWFzb24nLCAiY2hhbmdlIiwgTUJULkFQSS5GdW5jdGlvbi5jcmVhdGVEZWxlZ2F0ZShuYW1lc3BhY2Uub25GaWx0ZXJDaGFuZ2UsIG51bGwsIFsnc2Vhc29uX2lkJ10sIDEpKTsKCU1CVC5BUEkuRXZlbnQub2JzZXJ2ZSgnMzMtNjAwLWZpbHRlci1zdGF0cycsICJjaGFuZ2UiLCBNQlQuQVBJLkZ1bmN0aW9uLmNyZWF0ZURlbGVnYXRlKG5hbWVzcGFjZS5vbkZpbHRlckNoYW5nZSwgbnVsbCwgWydzdGF0X2NhdCddLCAxKSk7CglNQlQuQVBJLkV2ZW50Lm9ic2VydmUoJzMzLTYwMC1maWx0ZXItbW9udGgnLCAiY2hhbmdlIiwgTUJULkFQSS5GdW5jdGlvbi5jcmVhdGVEZWxlZ2F0ZShuYW1lc3BhY2Uub25GaWx0ZXJDaGFuZ2UsIG51bGwsIFsnbW9udGhfaWQnXSwgMSkpOwoJTUJULkFQSS5FdmVudC5vYnNlcnZlKCczMy02MDAtZmlsdGVyLXN0YWdlJywgImNoYW5nZSIsIE1CVC5BUEkuRnVuY3Rpb24uY3JlYXRlRGVsZWdhdGUobmFtZXNwYWNlLm9uRmlsdGVyQ2hhbmdlLCBudWxsLCBbJ3N0YWdlX2lkJ10sIDEpKTsKCU1CVC5BUEkuRXZlbnQub2JzZXJ2ZSgnMzMtNjAwLWZpbHRlci10ZWFtJywgImNoYW5nZSIsIE1CVC5BUEkuRnVuY3Rpb24uY3JlYXRlRGVsZWdhdGUobmFtZXNwYWNlLm9uRmlsdGVyQ2hhbmdlLCBudWxsLCBbJ3RlYW1faWQnXSwgMSkpOwoJTUJULkFQSS5FdmVudC5vYnNlcnZlKCczMy02MDAtZmlsdGVyLXBvc2l0aW9uJywgImNoYW5nZSIsIE1CVC5BUEkuRnVuY3Rpb24uY3JlYXRlRGVsZWdhdGUobmFtZXNwYWNlLm9uRmlsdGVyQ2hhbmdlLCBudWxsLCBbJ3Bvc2l0aW9uJ10sIDEpKTsKCgkKCgkvL11dPgo8L3NjcmlwdD48L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImNvbnRhaW5lciI+Cgk8ZGl2IGlkPSJzdGF0cy10ZWFtIiBtYnRfd2lkZ2V0PSI2MDEiPjxkaXYgaWQ9Im1idC12Mi10ZWFtcy1zdGF0cyIgY2xhc3M9Im1idC12Mi13aWRnZXQiPgoJPGRpdiBjbGFzcz0ibWJ0LXYyLWhlYWRlciI+CgkJCQkJU3RhdGlzdGlrYQoJCQkKCTwvZGl2PgoJPGRpdiBjbGFzcz0ibWJ0LXYyLXdpZGdldC1jb250ZW50Ij4KCQkJCQk8ZGl2IGlkPSIzMy02MDEtbW9iaWxlLW1lbnUiIGNsYXNzPSJtYnQtdjItbW9iaWxlLW1lbnUiPgoJCQkJUG92cHJlxI1qZQoJCQk8L2Rpdj4KCQkJPG5hdiBpZD0iMzMtNjAxLW1idC12Mi1uYXZpZ2F0aW9uIiBjbGFzcz0ibWJ0LXYyLW5hdmlnYXRpb24iPgoJCQkJPGRpdiBpZD0iMzMtNjAxLXRhYi0wIiBkYXRhLW5hbWU9ImF2ZXJhZ2VzIiBjbGFzcz0ibWJ0LXYyLW5hdmlnYXRpb24tdGFiLWFjdGl2ZSIgcHJldmNsYXNzbmFtZT0ibWJ0LXYyLW5hdmlnYXRpb24tdGFiLWFjdGl2ZSI+CgkJCQkJUG92cHJlxI1qZQoJCQkJPC9kaXY+CgkJCQk8ZGl2IGlkPSIzMy02MDEtdGFiLTEiIGRhdGEtbmFtZT0iaGlnaHMiIGNsYXNzPSJtYnQtdjItbmF2aWdhdGlvbi10YWIiPgoJCQkJCU5hanZlxI0KCQkJCTwvZGl2PgoJCQkJPGRpdiBpZD0iMzMtNjAxLXRhYi0yIiBkYXRhLW5hbWU9InRvdGFscyIgY2xhc3M9Im1idC12Mi1uYXZpZ2F0aW9uLXRhYiI+CgkJCQkJU2t1cG5vCgkJCQk8L2Rpdj4KCQkJPC9uYXY+CgkJCTxkaXYgY2xhc3M9Im1idC12Mi1kaXZpZGVyIj48L2Rpdj4KCQkJCgkJPGRpdiBpZD0iMzMtNjAxLWZpbHRlcnMtYmxvY2siIGNsYXNzPSJtYnQtdjItZmlsdGVycy1ibG9ja18iPgoJCQk8c2VsZWN0IGlkPSIzMy02MDEtY2F0ZWdvcnktc2VsZWN0b3IiIGNsYXNzPSJtYnQtdjItc2VsZWN0IiBkYXRhLW5hbWU9InN0YXRfY2F0Ij4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0icHRzIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPgoJCQkJCQlUb8SNa2UKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0icnQiPgoJCQkJCQlTa29raQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSJlcSI+CgkJCQkJCVZhbG9yaXphY2lqYQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSJhcyI+CgkJCQkJCUFzaXN0ZW5jZQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIyYSI+CgkJCQkJCcWgdC4gbWV0b3YgemEgMiB0b8SNa2kKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMm0iPgoJCQkJCQnFoHQuIHphZGV0aWggbWV0b3YgemEgMiB0b8SNa2kKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMnAiPgoJCQkJCQklIHphIDIgdG/EjWtpCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjNhIj4KCQkJCQkJxaB0LiBtZXRvdiB6YSAzIHRvxI1rZQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIzbSI+CgkJCQkJCVphZGV0aSBtZXRpIHphIDMgdG/EjWtlCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjNwIj4KCQkJCQkJJSB6YSAzIHRvxI1rZQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSJmZ2EiPgoJCQkJCQlNZXQgaXogaWdyZQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSJmZ20iPgoJCQkJCQlVc3BlxaFlbiBtZXQgaXogaWdyZQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSJmZ3AiPgoJCQkJCQklIG1ldGEgaXogaWdyZQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSIxYSI+CgkJCQkJCUl6dmVkZW5pIHByb3N0aSBtZXRpCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjFtIj4KCQkJCQkJWmFkZXRpIHByb3N0aSBtZXRpCgkJCQkJPC9vcHRpb24+CgkJCQkJCQkJCTxvcHRpb24gdmFsdWU9IjFwIj4KCQkJCQkJJSBwcm9zdGkgbWV0aQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSJybyI+CgkJCQkJCU5hcGFkYWxuaSBza29raQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSJyZCI+CgkJCQkJCVNrb2tpIHYgb2JyYW1iaQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSJwZl9jbSI+CgkJCQkJCU9zZWJuZSBuYXBha2UKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0icGZfcnYiPgoJCQkJCQlPc2VibmUgbmFwYWtlIG5hZCBpZ3JhbGNlbQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSJ0byI+CgkJCQkJCUl6Zy4gxb5vZ2UKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0ic3QiPgoJCQkJCQlQcmlkLiDFvm9nZQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSJibF9mdiI+CgkJCQkJCUJsb2thZGUKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iYmxfYWciPgoJCQkJCQlQcmVqZXRlIGJsb2thZGUKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iYXNfdG8iPgoJCQkJCQlBc2lzdGVuY2UvaXpnLiDFvm9nZQoJCQkJCTwvb3B0aW9uPgoJCQkJCQkJCQk8b3B0aW9uIHZhbHVlPSJzdF90byI+CgkJCQkJCVByaWQuL2l6Zy4gxb5vZ2UKCQkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iYXR0bmQiPgoJCQkJCQlHbGVkYWxjZXYKCQkJCQk8L29wdGlvbj4KCQkJCQkJCTwvc2VsZWN0PgoJCQkJCQkJPHNlbGVjdCBpZD0iMzMtNjAxLXNlYXNvbi1zZWxlY3RvciIgY2xhc3M9Im1idC12Mi1zZWxlY3QiIGRhdGEtbmFtZT0ic2Vhc29uX2lkIj4KCQkJCSAgICA8b3B0aW9uIHZhbHVlPSIiPlZzZSBzZXpvbmU8L29wdGlvbj4KCSAgICAgICAgICAgICAgICAgICAgCQkgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEwNDc4NSIgc2VsZWN0ZWQ9InNlbGVjdGVkIj4KCQkJICAgICAgICAgICAgICAgICAgICAyMDE4LTIwMTkKCQkgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPgoJCSAgICAgICAgICAgICAgICAJCSAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iOTc5NDciPgoJCQkgICAgICAgICAgICAgICAgICAgIDIwMTctMjAxOAoJCSAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CgkJICAgICAgICAgICAgICAgIAkJICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI5NDE2NSI+CgkJCSAgICAgICAgICAgICAgICAgICAgMjAxNi0yMDE3CgkJICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KCQkgICAgICAgICAgICAgICAgCQkgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjkxNDg3Ij4KCQkJICAgICAgICAgICAgICAgICAgICAyMDE1LTIwMTYKCQkgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPgoJCSAgICAgICAgICAgICAgICAJCSAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iODk2MTIiPgoJCQkgICAgICAgICAgICAgICAgICAgIDIwMTQtMjAxNQoJCSAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CgkJICAgICAgICAgICAgICAgIAkJICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI4NzIwMSI+CgkJCSAgICAgICAgICAgICAgICAgICAgMjAxMy0yMDE0CgkJICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KCQkgICAgICAgICAgICAgICAgCQkgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjYzMTkzIj4KCQkJICAgICAgICAgICAgICAgICAgICAyMDEyLTIwMTMKCQkgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPgoJCSAgICAgICAgICAgICAgICAJCSAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTU3OTMiPgoJCQkgICAgICAgICAgICAgICAgICAgIDIwMTEtMjAxMgoJCSAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CgkJICAgICAgICAgICAgICAgIAkJICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMTI4MyI+CgkJCSAgICAgICAgICAgICAgICAgICAgMjAxMC0yMDExCgkJICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KCQkgICAgICAgICAgICAgICAgCQkgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjExMjUzIj4KCQkJICAgICAgICAgICAgICAgICAgICAyMDA5LTIwMTAKCQkgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPgoJCSAgICAgICAgICAgICAgICAJCSAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTEyMTMiPgoJCQkgICAgICAgICAgICAgICAgICAgIDIwMDgtMjAwOQoJCSAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CgkJICAgICAgICAgICAgICAgIAkJICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxMTE3MyI+CgkJCSAgICAgICAgICAgICAgICAgICAgMjAwNy0yMDA4CgkJICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KCQkgICAgICAgICAgICAgICAgIAoJCQkJPC9zZWxlY3Q+CgkJCQkJCTxzZWxlY3QgaWQ9IjMzLTYwMS1zdGFnZS1zZWxlY3RvciIgY2xhc3M9Im1idC12Mi1zZWxlY3QiIGRhdGEtbmFtZT0ic3RhZ2VfaWQiPgoJCQkJPG9wdGlvbiB2YWx1ZT0iIj4KCQkJCQlWc2kgZGVsaSB0ZWttb3ZhbmphCgkJCQk8L29wdGlvbj4KCQkJCQkJCQkJPG9wdGlvbiB2YWx1ZT0iMjEyMzk1Ij4KCQkJCQkJMS4gZGVsCgkJCQkJPC9vcHRpb24+CgkJCQkJCQk8L3NlbGVjdD4gCgkJPC9kaXY+CgkJPGRpdiBjbGFzcz0ibWJ0LXYyLWRpdmlkZXIiPjwvZGl2PgoJCTxkaXYgaWQ9IjMzLTYwMS10YWItY29udGFpbmVyIj4JPGRpdiBpZD0ibWJ0LXYyLXRlYW1zLXN0YXRzLXRhYmxlLWF2ZXJhZ2VzLWNvbnRhaW5lciIgY2xhc3M9Im1idC12Mi1yZXNwb25zaXZlLXRhYmxlLWNvbnRhaW5lciI+Cgk8dGFibGUgaWQ9Im1idC12Mi10ZWFtcy1zdGF0cy1hdmVyYWdlcy10YWJsZSIgY2xhc3M9Im1idC12Mi10YWJsZSBtYnQtdjItdGVhbXMtc3RhdHMtdGFibGUiPgoJCTx0aGVhZD4KCQkJPHRyPgoJCQkJPHRoPgoJCQkJCcWgdC4KCQkJCTwvdGg+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KCSAgICAgICAgICAgICAgICAgICAgICAgIEVraXBhCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgoJICAgICAgICAgICAgICAgICAgICAgICAgVGVrbWUKCSAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+CgkgICAgICAgICAgICAgICAgICAgICAgICBUT8SMCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgoJICAgICAgICAgICAgICAgICAgICAgICAgUG92cHJlxI1qZQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQk8L3RyPgoJCTwvdGhlYWQ+CgkJPHRib2R5PgoJCQkJCQkJPHRyPgoJCQkJCTx0ZD4KCQkJCQkJMS4KCQkJCQk8L3RkPgoJCQkJCQkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2MzIzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2MzIzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45NDY3MDYwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPktya2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk0NjcwNjAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45NDY3MDYwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTQ2NzA2MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTQ2NzA2MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDQKCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkgICAgICAgICAgICAgICAgICAgICAgICAzNDkKCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA4Ny4yNQoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCTx0ZD4KCQkJCQkJMi4KCQkJCQk8L3RkPgoJCQkJCQkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTk4MzAzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTk4MzAzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45NDY4NTIwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlBldHJvbCBPbGltcGlqYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTQ2ODUyMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk0Njg1MjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45NDY4NTIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45NDY4NTIwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgNAoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDM0NgoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDg2LjUwCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJPHRkPgoJCQkJCQkzLgoJCQkJCTwvdGQ+CgkJCQkJCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjY1MDMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjY1MDMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk0Njk3MzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+xaBlbnRqdXI8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk0Njk3MzAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45NDY5NzMwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTQ2OTczMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTQ2OTczMDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDMKCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkgICAgICAgICAgICAgICAgICAgICAgICAyNDMKCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA4MS4wMAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCTx0ZD4KCQkJCQkJNC4KCQkJCQk8L3RkPgoJCQkJCQkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NTUzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2NTUzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45NDcwNzMwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlJvZ2HFoWthPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45NDcwNzMwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTQ3MDczMDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk0NzA3MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk0NzA3MzAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkgICAgICAgICAgICAgICAgICAgICAgICAzCgkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgMjMxCgkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgNzcuMDAKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgoJICAgICAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJCQkJPC90cj4KCQkJCQkJCTx0cj4KCQkJCQk8dGQ+CgkJCQkJCTUuCgkJCQkJPC90ZD4KCQkJCQkJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cua3pzLnNpL2luY2w/aWQ9OTY3JmFtcDt0ZWFtX2lkPTE5NDk5MyZhbXA7bGVhZ3VlX2lkPXVuZGVmaW5lZCZhbXA7c2Vhc29uX2lkPTEwNDc4NSIgc2Vhc29uX2lkPSIxMDQ3ODUiIHRlYW1faWQ9IjE5NDk5MyIgY2xpZW50X2hhc2g9IjM5ZjU2NDM3Zjk3MmRjNGNhOTFkMmM5OTdmODc0ZGNmYzIzMmE2ODgiIGlkPSJhLTAuOTQ3MjIxMDAxNTQxMjM0MTAyIiBvbmx5dXJsPSIxIj7FoGVuxI11ciBHb3Jlbmpza2EgZ3JhZGJlbmEgZHJ1xb5iYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTQ3MjIxMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk0NzIyMTAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45NDcyMjEwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45NDcyMjEwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgMwoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDIyNgoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDc1LjMzCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJPHRkPgoJCQkJCQk2LgoJCQkJCTwvdGQ+CgkJCQkJCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xNjU1ODMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxNjU1ODMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk0NzMyMDAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+SG9wc2kgUG9semVsYTwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTQ3MzIwMDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk0NzMyMDAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45NDczMjAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45NDczMjAwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgNAoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDI5MwoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDczLjI1CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJPHRkPgoJCQkJCQk3LgoJCQkJCTwvdGQ+CgkJCQkJCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmt6cy5zaS9pbmNsP2lkPTk2NyZhbXA7dGVhbV9pZD0xOTUzNjMmYW1wO2xlYWd1ZV9pZD11bmRlZmluZWQmYW1wO3NlYXNvbl9pZD0xMDQ3ODUiIHNlYXNvbl9pZD0iMTA0Nzg1IiB0ZWFtX2lkPSIxOTUzNjMiIGNsaWVudF9oYXNoPSIzOWY1NjQzN2Y5NzJkYzRjYTkxZDJjOTk3Zjg3NGRjZmMyMzJhNjg4IiBpZD0iYS0wLjk0NzQzNzAwMTU0MTIzNDEwMiIgb25seXVybD0iMSI+U2l4dCBQcmltb3Jza2E8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk0NzQzNzAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45NDc0MzcwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTQ3NDM3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTQ3NDM3MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDQKCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkgICAgICAgICAgICAgICAgICAgICAgICAyODQKCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA3MS4wMAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCTx0ZD4KCQkJCQkJOC4KCQkJCQk8L3RkPgoJCQkJCQkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MzA5MzczJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMzA5MzczIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45NDc1MzgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPklsaXJpamE8L2E+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk0NzUzODAwMTU0MTIzNDEwMiIpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45NDc1MzgwMDE1NDEyMzQxMDIiKS5ocmVmID0gbmF2aWdhdGVUZWFtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTQ3NTM4MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCd0ZWFtX2lkJyksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhLTAuOTQ3NTM4MDAxNTQxMjM0MTAyJykuZ2V0QXR0cmlidXRlKCdzZWFzb25faWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDMKCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkgICAgICAgICAgICAgICAgICAgICAgICAyMTMKCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA3MS4wMAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCTx0ZD4KCQkJCQkJOS4KCQkJCQk8L3RkPgoJCQkJCQkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NTIzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2NTIzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45NDc2MzYwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPlpsYXRvcm9nIExhxaFrbzwvYT48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTQ3NjM2MDAxNTQxMjM0MTAyIikgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYS0wLjk0NzYzNjAwMTU0MTIzNDEwMiIpLmhyZWYgPSBuYXZpZ2F0ZVRlYW0oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45NDc2MzYwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3RlYW1faWQnKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2EtMC45NDc2MzYwMDE1NDEyMzQxMDInKS5nZXRBdHRyaWJ1dGUoJ3NlYXNvbl9pZCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CgkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgMwoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDIwMQoJCSAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDY3LjAwCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KCSAgICAgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCQkJCTwvdHI+CgkJCQkJCQk8dHI+CgkJCQkJPHRkPgoJCQkJCQkxMC4KCQkJCQk8L3RkPgoJCQkJCQkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5renMuc2kvaW5jbD9pZD05NjcmYW1wO3RlYW1faWQ9MTY2NDkzJmFtcDtsZWFndWVfaWQ9dW5kZWZpbmVkJmFtcDtzZWFzb25faWQ9MTA0Nzg1IiBzZWFzb25faWQ9IjEwNDc4NSIgdGVhbV9pZD0iMTY2NDkzIiBjbGllbnRfaGFzaD0iMzlmNTY0MzdmOTcyZGM0Y2E5MWQyYzk5N2Y4NzRkY2ZjMjMyYTY4OCIgaWQ9ImEtMC45NDc3MjgwMDE1NDEyMzQxMDIiIG9ubHl1cmw9IjEiPkhlbGlvcyBTdW5zPC9hPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImEtMC45NDc3MjgwMDE1NDEyMzQxMDIiKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhLTAuOTQ3NzI4MDAxNTQxMjM0MTAyIikuaHJlZiA9IG5hdmlnYXRlVGVhbShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk0NzcyODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgndGVhbV9pZCcpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYS0wLjk0NzcyODAwMTU0MTIzNDEwMicpLmdldEF0dHJpYnV0ZSgnc2Vhc29uX2lkJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4KCQkgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkgICAgICAgICAgICAgICAgICAgICAgICAzCgkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CgkJICAgICAgICAgICAgICAgICAgICAgICAgMTk1CgkJICAgICAgICAgICAgICAgICAgICA8L3RkPgoJICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgNjUuMDAKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgoJICAgICAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAgICAJCQkJPC90cj4KCQkJCQk8L3Rib2R5PgoJPC90YWJsZT4KPC9kaXY+CgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgovLzwhW0NEQVRBWwoKCXZhciBuYW1lc3BhY2UgPSBNQlQuQVBJLlNhZmVOYW1lcy5Db250YWluZXIoJzMzLTYwMScpOwoJCgluYW1lc3BhY2Uub25QYWdlQ2xpY2sgPSBmdW5jdGlvbihlLCBwYWdlKSB7CgoJCW5hbWVzcGFjZS5wYXJhbXMucGFnZSA9IHBhZ2U7CgkJCgkJbmV3IE1CVC5BUEkuV2lkZ2V0cy5XaWRnZXQoewoJCQl3aWRnZXRJZDogNjAxLAoJCQljb250YWluZXI6ICczMy02MDEtdGFiLWNvbnRhaW5lcicsCgkJCXN0YXRlOiAnTXpnMk1qWTFORE0yT0dFNk1UTTZlM002TVRrNklteGxZV2QxWlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94TnpvaWRHVmhiVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hOem9pWjJGdFpWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE9Ub2ljR3hoZVdWeVgyeHBibXRmZG1semFXSnNaU0k3Y3pveE9pSXhJanR6T2prNklteGxZV2QxWlY5cFpDSTdjem8wT2lJNU16TXpJanR6T2pFME9pSm5ZVzFsWDJ4cGJtdGZkSGx3WlNJN2N6b3hPaUl6SWp0ek9qRTNPaUpuWVcxbFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVkhZVzFsSWp0ek9qRTBPaUowWldGdFgyeHBibXRmZEhsd1pTSTdjem94T2lJeklqdHpPakUzT2lKMFpXRnRYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hNam9pYm1GMmFXZGhkR1ZVWldGdElqdHpPakUyT2lKd2JHRjVaWEpmYkdsdWExOTBlWEJsSWp0ek9qRTZJak1pTzNNNk1UazZJbkJzWVhsbGNsOXNhVzVyWDJoaGJtUnNaWElpTzNNNk1UUTZJbTVoZG1sbllYUmxVR3hoZVdWeUlqdHpPamc2SW5SbGJYQnNZWFJsSWp0ek9qSTZJbll5SWp0ek9qazZJbk5sWVhOdmJsOXBaQ0k3Y3pvMk9pSXhNRFEzT0RVaU8zMD0nLAoJCQlwYXJhbXM6IG5hbWVzcGFjZS5wYXJhbXMKCQl9KS5yZW5kZXJQYXJ0aWFsKG5hbWVzcGFjZS5wYXJ0aWFsKTsKCX0KCgkvL11dPgo8L3NjcmlwdD4KPHAgY2xhc3M9Im1idC12Mi1pbmZvLXRleHQiPgogICAgCjwvcD4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KLy88IVtDREFUQVsKCiAgICBuZXcgTUJULkFQSS5yZXNwb25zaXZlVGFibGUgKHsKICAgICAgICB0YWJsZTogJ21idC12Mi10ZWFtcy1zdGF0cy1hdmVyYWdlcy10YWJsZScsCiAgICAgICAgdGFibGVzQ29udGFpbmVyOiAnbWJ0LXYyLXRlYW1zLXN0YXRzLXRhYmxlLWF2ZXJhZ2VzLWNvbnRhaW5lcicsCiAgICAgICAgY29sdW1uc1RvUGluOiAyCiAgICB9KS53YXRjaFRhYmxlKCk7CgovL11dPgo8L3NjcmlwdD48L2Rpdj4KCTwvZGl2Pgo8L2Rpdj4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KLy88IVtDREFUQVsKCQoJCXZhciBuYW1lc3BhY2UgPSBNQlQuQVBJLlNhZmVOYW1lcy5Db250YWluZXIoJzMzLTYwMScpOwoKCQluYW1lc3BhY2UucGFyYW1zID0ge307CgkJbmFtZXNwYWNlLnBhcnRpYWwgPSAnaGlnaHMnOwoKCQkKCQkJCQluYW1lc3BhY2UucGFyYW1zLnRlYW1Nb2RlID0gZmFsc2U7CgkJCQkgCgoJCW5hbWVzcGFjZS5wYXJhbXMuZmlsdGVyID0ge307CgkJbmFtZXNwYWNlLnBhcmFtcy51c2VfYWR2YW5jZWRfZmlsdGVyID0gdHJ1ZTsKCgkJbmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnMgPSBNQlQuQVBJLmdldCgnMzMtNjAxLWZpbHRlcnMtYmxvY2snKS5jaGlsZE5vZGVzOwoKCQluYW1lc3BhY2Uub25GaWx0ZXJDaGFuZ2UgPSBmdW5jdGlvbihlLCBmaWx0ZXIpIHsKCQkJCgkJCW5hbWVzcGFjZS5wYXJhbXMuZmlsdGVyW2ZpbHRlcl0gPSBlLnRhcmdldC52YWx1ZTsKCQkJbmFtZXNwYWNlLnBhcmFtcy5wYWdlID0gMDsKCgkJCWlmKGZpbHRlciA9PSAnc2Vhc29uX2lkJykgewoJCQkJZGVsZXRlIG5hbWVzcGFjZS5wYXJhbXMuZmlsdGVyLnN0YWdlX2lkOwoJCQkJbmV3IE1CVC5BUEkuV2lkZ2V0cy5XaWRnZXQoewoJCQkJCXdpZGdldElkOiA2MDEsCgkJCQkJY29udGFpbmVyOiAnMzMtNjAxLXN0YWdlLXNlbGVjdG9yJywKCQkJCQlzdGF0ZTogJ01UZ3lORFExT0RVNU5HRTZNVEk2ZTNNNk1UazZJbXhsWVdkMVpWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE56b2lkR1ZoYlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94TnpvaVoyRnRaVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hPVG9pY0d4aGVXVnlYMnhwYm10ZmRtbHphV0pzWlNJN2N6b3hPaUl4SWp0ek9qazZJbXhsWVdkMVpWOXBaQ0k3Y3pvME9pSTVNek16SWp0ek9qRTBPaUpuWVcxbFgyeHBibXRmZEhsd1pTSTdjem94T2lJeklqdHpPakUzT2lKbllXMWxYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hNam9pYm1GMmFXZGhkR1ZIWVcxbElqdHpPakUwT2lKMFpXRnRYMnhwYm10ZmRIbHdaU0k3Y3pveE9pSXpJanR6T2pFM09pSjBaV0Z0WDJ4cGJtdGZhR0Z1Wkd4bGNpSTdjem94TWpvaWJtRjJhV2RoZEdWVVpXRnRJanR6T2pFMk9pSndiR0Y1WlhKZmJHbHVhMTkwZVhCbElqdHpPakU2SWpNaU8zTTZNVGs2SW5Cc1lYbGxjbDlzYVc1clgyaGhibVJzWlhJaU8zTTZNVFE2SW01aGRtbG5ZWFJsVUd4aGVXVnlJanR6T2pnNkluUmxiWEJzWVhSbElqdHpPakk2SW5ZeUlqdDknLAoJCQkJCXBhcmFtczogewoJCQkJCQlzZWFzb25faWQ6IG5hbWVzcGFjZS5wYXJhbXMuZmlsdGVyLnNlYXNvbl9pZAoJCQkJCX0KCQkJCX0pLnJlbmRlclBhcnRpYWwoJ2dldC1zdGFnZXMnKTsKCQkJfQoKCQkJbmV3IE1CVC5BUEkuV2lkZ2V0cy5XaWRnZXQoewoJCQkJd2lkZ2V0SWQ6IDYwMSwKCQkJCWNvbnRhaW5lcjogJzMzLTYwMS10YWItY29udGFpbmVyJywKCQkJCXN0YXRlOiAnTVRneU5EUTFPRFU1TkdFNk1USTZlM002TVRrNklteGxZV2QxWlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94TnpvaWRHVmhiVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hOem9pWjJGdFpWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE9Ub2ljR3hoZVdWeVgyeHBibXRmZG1semFXSnNaU0k3Y3pveE9pSXhJanR6T2prNklteGxZV2QxWlY5cFpDSTdjem8wT2lJNU16TXpJanR6T2pFME9pSm5ZVzFsWDJ4cGJtdGZkSGx3WlNJN2N6b3hPaUl6SWp0ek9qRTNPaUpuWVcxbFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVkhZVzFsSWp0ek9qRTBPaUowWldGdFgyeHBibXRmZEhsd1pTSTdjem94T2lJeklqdHpPakUzT2lKMFpXRnRYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hNam9pYm1GMmFXZGhkR1ZVWldGdElqdHpPakUyT2lKd2JHRjVaWEpmYkdsdWExOTBlWEJsSWp0ek9qRTZJak1pTzNNNk1UazZJbkJzWVhsbGNsOXNhVzVyWDJoaGJtUnNaWElpTzNNNk1UUTZJbTVoZG1sbllYUmxVR3hoZVdWeUlqdHpPamc2SW5SbGJYQnNZWFJsSWp0ek9qSTZJbll5SWp0OScsCgkJCQlwYXJhbXM6IG5hbWVzcGFjZS5wYXJhbXMKCQkJfSkucmVuZGVyUGFydGlhbChuYW1lc3BhY2UucGFydGlhbCk7CgkJfQoKCQlmb3Ioa2V5IGluIG5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzKSB7CgkJCWlmKG5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzW2tleV0ubm9kZVR5cGUgPT0gMSkgewoJCQkJbmFtZXNwYWNlLnBhcmFtcy5maWx0ZXJbbmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnNba2V5XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpXSA9IG5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzW2tleV0udmFsdWU7CgkgICAgICAgICAgICBNQlQuQVBJLkV2ZW50Lm9ic2VydmUobmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnNba2V5XSwgJ2NoYW5nZScsIE1CVC5BUEkuRnVuY3Rpb24uY3JlYXRlRGVsZWdhdGUobmFtZXNwYWNlLm9uRmlsdGVyQ2hhbmdlLCBudWxsLCBbbmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnNba2V5XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpXSwgMSkpOwoJCQl9CgkJfQoKCQlpZighbmFtZXNwYWNlLnBhcmFtcy50ZWFtTW9kZSkgewoJCQluYW1lc3BhY2Uub25UYWJDbGljayA9IGZ1bmN0aW9uKHRhYlBhbmVsLCBpbmRleCwgcGFydCkgewoKCQkJCW5hbWVzcGFjZS5wYXJ0aWFsID0gcGFydDsKCQkJCW5hbWVzcGFjZS5wYXJhbXMucGFnZSA9IDA7CgoJCQkJZm9yKGtleSBpbiBuYW1lc3BhY2UuYXZhaWxhYmxlRmlsdGVycykgewoJCQkJCWlmKG5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzW2tleV0ubm9kZVR5cGUgPT0gMSkgewoJCQkJCQlpZihuYW1lc3BhY2UuYXZhaWxhYmxlRmlsdGVyc1trZXldLmdldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJykgPT0gJ3NlYXNvbl9pZCcpIHsKCQkJCQkJCWlmKG5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzW2tleV0ub3B0aW9uc1swXS52YWx1ZSA9PSAiIikgewoJCQkJCQkJCW5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzW2tleV0uc2VsZWN0ZWRJbmRleCA9IDE7CgkJCQkJCQkJbmFtZXNwYWNlLnBhcmFtcy5maWx0ZXIuc2Vhc29uX2lkID0gbmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnNba2V5XS5vcHRpb25zWzFdLnZhbHVlOwoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCSAgICBuYW1lc3BhY2UuYXZhaWxhYmxlRmlsdGVyc1sna2V5J10uc2VsZWN0ZWRJbmRleCA9IDE7CgkJCQkJCQkgICAgbmFtZXNwYWNlLnBhcmFtcy5maWx0ZXIuc2Vhc29uX2lkID0gbmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnNba2V5XS5vcHRpb25zWzFdLnZhbHVlOwoJCQkJCQkJfQoJCQkJCQl9IGVsc2UgewoJCQkJCQkJbmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnNba2V5XS5zZWxlY3RlZEluZGV4ID0wOwoJCQkJCQkJbmFtZXNwYWNlLnBhcmFtcy5maWx0ZXJbbmFtZXNwYWNlLmF2YWlsYWJsZUZpbHRlcnNba2V5XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpXSA9IG5hbWVzcGFjZS5hdmFpbGFibGVGaWx0ZXJzW2tleV0ub3B0aW9uc1swXS52YWx1ZTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCgkJICAgICAgICBuZXcgTUJULkFQSS5XaWRnZXRzLldpZGdldCh7CgkJICAgICAgICAJd2lkZ2V0SWQ6IDYwMSwgCgkJCQkJY29udGFpbmVyOiAnMzMtNjAxLXRhYi1jb250YWluZXInLAoJCQkJCXN0YXRlOiAnTVRneU5EUTFPRFU1TkdFNk1USTZlM002TVRrNklteGxZV2QxWlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94TnpvaWRHVmhiVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hOem9pWjJGdFpWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE9Ub2ljR3hoZVdWeVgyeHBibXRmZG1semFXSnNaU0k3Y3pveE9pSXhJanR6T2prNklteGxZV2QxWlY5cFpDSTdjem8wT2lJNU16TXpJanR6T2pFME9pSm5ZVzFsWDJ4cGJtdGZkSGx3WlNJN2N6b3hPaUl6SWp0ek9qRTNPaUpuWVcxbFgyeHBibXRmYUdGdVpHeGxjaUk3Y3pveE1qb2libUYyYVdkaGRHVkhZVzFsSWp0ek9qRTBPaUowWldGdFgyeHBibXRmZEhsd1pTSTdjem94T2lJeklqdHpPakUzT2lKMFpXRnRYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hNam9pYm1GMmFXZGhkR1ZVWldGdElqdHpPakUyT2lKd2JHRjVaWEpmYkdsdWExOTBlWEJsSWp0ek9qRTZJak1pTzNNNk1UazZJbkJzWVhsbGNsOXNhVzVyWDJoaGJtUnNaWElpTzNNNk1UUTZJbTVoZG1sbllYUmxVR3hoZVdWeUlqdHpPamc2SW5SbGJYQnNZWFJsSWp0ek9qSTZJbll5SWp0OScsCgkJCQkJcGFyYW1zOiB7CgkJCQkJCXNlYXNvbl9pZDogJzEwNDc4NScKCQkJCQl9CgkJCQl9KS5yZW5kZXJQYXJ0aWFsKHBhcnQpOwoJCSAgICB9CgoJCQluYW1lc3BhY2UudGFicyA9IFtdOwoKCQkJbmFtZXNwYWNlLm1lbnVJdGVtcyA9IE1CVC5BUEkuZ2V0KCczMy02MDEtbWJ0LXYyLW5hdmlnYXRpb24nKS5jaGlsZE5vZGVzOwoKCQkJZm9yKHZhciBpID0gMDsgaSA8ICBuYW1lc3BhY2UubWVudUl0ZW1zLmxlbmd0aDsgaSsrKSB7CgkJICAgICAgICBpZihuYW1lc3BhY2UubWVudUl0ZW1zW2ldLm5vZGVUeXBlID09IDEpIHsKCQkgICAgICAgIAluYW1lc3BhY2UudGFicy5wdXNoKHsKCQkgICAgICAgIAkJdGFiSWQ6IG5hbWVzcGFjZS5tZW51SXRlbXNbaV0uaWQsCgkJICAgICAgICAJCW5lZWRMb2FkOiBNQlQuQVBJLkZ1bmN0aW9uLmNyZWF0ZURlbGVnYXRlKG5hbWVzcGFjZS5vblRhYkNsaWNrLCBudWxsLCBuYW1lc3BhY2UubWVudUl0ZW1zW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJyksIDIpLAoJCSAgICAgICAgCX0pOwoJCSAgICAgICAgfQoJCQl9CgoJCQluYW1lc3BhY2UuVGFiQ29udHJvbGxlciA9IG5ldyBNQlQuQVBJLlVJLlRhYlBhbmVsKHsKCQkJCWNvbnRhaW5lcjogJzMzLTYwMS10YWItY29udGFpbmVyJywKCQkJCXRhYkNsYXNzOiAnbWJ0LXYyLW5hdmlnYXRpb24tdGFiJywKCQkgICAgICAgIGFjdGl2ZVRhYkNsYXNzOiAnbWJ0LXYyLW5hdmlnYXRpb24tdGFiLWFjdGl2ZScsCgkJICAgICAgICB0YWJzOiBuYW1lc3BhY2UudGFicywKCQkgICAgICAgIG5vQ2FjaGU6IHRydWUsCgkJICAgICAgICBhY3RpdmVUYWI6IDAKCQkJfSk7CgkJfSBlbHNlIHsKCQkJbmV3IE1CVC5BUEkuV2lkZ2V0cy5XaWRnZXQoewoJICAgICAgICAJd2lkZ2V0SWQ6IDYwMSwgCgkJCQljb250YWluZXI6ICczMy02MDEtdGFiLWNvbnRhaW5lcicsCgkJCQlzdGF0ZTogJ01UZ3lORFExT0RVNU5HRTZNVEk2ZTNNNk1UazZJbXhsWVdkMVpWOXNhVzVyWDNacGMybGliR1VpTzNNNk1Ub2lNU0k3Y3pveE56b2lkR1ZoYlY5c2FXNXJYM1pwYzJsaWJHVWlPM002TVRvaU1TSTdjem94TnpvaVoyRnRaVjlzYVc1clgzWnBjMmxpYkdVaU8zTTZNVG9pTVNJN2N6b3hPVG9pY0d4aGVXVnlYMnhwYm10ZmRtbHphV0pzWlNJN2N6b3hPaUl4SWp0ek9qazZJbXhsWVdkMVpWOXBaQ0k3Y3pvME9pSTVNek16SWp0ek9qRTBPaUpuWVcxbFgyeHBibXRmZEhsd1pTSTdjem94T2lJeklqdHpPakUzT2lKbllXMWxYMnhwYm10ZmFHRnVaR3hsY2lJN2N6b3hNam9pYm1GMmFXZGhkR1ZIWVcxbElqdHpPakUwT2lKMFpXRnRYMnhwYm10ZmRIbHdaU0k3Y3pveE9pSXpJanR6T2pFM09pSjBaV0Z0WDJ4cGJtdGZhR0Z1Wkd4bGNpSTdjem94TWpvaWJtRjJhV2RoZEdWVVpXRnRJanR6T2pFMk9pSndiR0Y1WlhKZmJHbHVhMTkwZVhCbElqdHpPakU2SWpNaU8zTTZNVGs2SW5Cc1lYbGxjbDlzYVc1clgyaGhibVJzWlhJaU8zTTZNVFE2SW01aGRtbG5ZWFJsVUd4aGVXVnlJanR6T2pnNkluUmxiWEJzWVhSbElqdHpPakk2SW5ZeUlqdDknLAoJCQkJcGFyYW1zOiB7CgkJCQkJc2Vhc29uX2lkOiAnMTA0Nzg1JwoJCQkJfQoJCQl9KS5yZW5kZXJQYXJ0aWFsKG5hbWVzcGFjZS5wYXJ0aWFsKTsKCQl9CgoJICAgIGlmKCFuYW1lc3BhY2UucGFyYW1zLnRlYW1Nb2RlKSB7CgkJICAgIG5hbWVzcGFjZS5tb2JpbGVOYXYgPSBuZXcgTUJULkFQSS5jcmVhdGVSZXNwb25zaXZlTmF2aWdhdGlvbih7CgkJCQltZW51Q29udGFpbmVyIDogIjMzLTYwMS1tYnQtdjItbmF2aWdhdGlvbiIsCgkJCQltb2JpbGVNZW51Q29udGFpbmVyIDogIjMzLTYwMS1tb2JpbGUtbWVudSIsCgkJCQltb2JpbGVNZW51T3BlbmVkQ2xhc3MgOiAnbWJ0LXYyLW1vYmlsZS1tZW51LW9wZW5lZCcsCgkJCQltb2JpbGVNZW51Q2xvc2VUZXh0OiAnSXpiZXJpJwoJCQl9KTsKCSAgICB9CgkKLy9dXT4KPC9zY3JpcHQ+CTwvZGl2Pgo8L2Rpdj4KPHNjcmlwdD4KICAgICAgICB2YXIgbGVhZ3VlID0gOTMzMzsKICAgIDwvc2NyaXB0PjwhLS0gTmVlZCBmb3Igc2NoZWR1bGUgd2lkZ2V0IC0tPjwhLS0gTG9hZCBzY2hlZHVsZSB3aWRnZXQgLS0+PHNjcmlwdD4KCiAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgTUJULkFQSS5XaWRnZXRzLlJlbmRlclJlcXVlc3QoKTsKICAgICAgICB2YXIgd2lkZ2V0ID0gbmV3IE1CVC5BUEkuV2lkZ2V0cy5XaWRnZXQoKTsKICAgICAgICB3aWRnZXQuc2V0Q29udGFpbmVyKCdzY2hlZHVsZScpOwogICAgICAgIHdpZGdldC5zZXRXaWRnZXRJZChNQlQuQVBJLldpZGdldHMuU0VBU09OX1NDSEVEVUxFX0xPTkdfV0lER0VUKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3RlYW1fbGlua192aXNpYmxlJywgMSk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdzaG93X3NlYXNvbl9zZWxlY3RvcicsIDEpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnZ2FtZV9saW5rX3Zpc2libGUnLCAxKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3BsYXllcl9saW5rX3Zpc2libGUnLCAxKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3RlYW1fbGlua190eXBlJywgTUJULkFQSS5OQVZJR0FUSU9OX1RZUEVfQ1VTVE9NKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2dhbWVfbGlua190eXBlJywgTUJULkFQSS5OQVZJR0FUSU9OX1RZUEVfQ1VTVE9NKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3BsYXllcl9saW5rX3R5cGUnLCBNQlQuQVBJLk5BVklHQVRJT05fVFlQRV9DVVNUT00pOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgndGVhbV9saW5rX2hhbmRsZXInLCAnbmF2aWdhdGVUZWFtJyk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdnYW1lX2xpbmtfaGFuZGxlcicsICduYXZpZ2F0ZUdhbWUnKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3BsYXllcl9saW5rX2hhbmRsZXInLCAnbmF2aWdhdGVQbGF5ZXInKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2FyZW5hX2xpbmtfdmlzaWJsZScsIDEpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnYXJlbmFfbGlua190eXBlJywgTUJULkFQSS5OQVZJR0FUSU9OX1RZUEVfQ1VTVE9NKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2FyZW5hX2xpbmtfaGFuZGxlcicsICduYXZpZ2F0ZUFyZW5hJyk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdsZWFndWVfaWQnLCBsZWFndWUpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnc2Vhc29uX2lkJywgc2Vhc29uKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2dhbWVfZGF5cycsIDEgKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3Nob3dfcmVmZXJlZV9jaXR5JywgJzEnKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2l0ZW1zX29uX3BhZ2UnLCAnMzAnKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3N0YWdlX2xldmVsc192aXNpYmxlJywgMik7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCd0ZW1wbGF0ZScsICd2MicpOwogICAgICAgIHJlcXVlc3QuYWRkV2lkZ2V0KHdpZGdldCk7CiAgICAgICAgcmVxdWVzdC5yZW5kZXIoKTsKICAgIDwvc2NyaXB0PjwhLS0gTmVlZCBmb3Igc3RhbmRpbmdzIHdpZGdldCAtLT48IS0tIExvYWQgc3RhbmRpbmdzIHdpZGdldCAtLT48c2NyaXB0PgogICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IE1CVC5BUEkuV2lkZ2V0cy5SZW5kZXJSZXF1ZXN0KCk7CiAgICAgICAgdmFyIHdpZGdldCA9IG5ldyBNQlQuQVBJLldpZGdldHMuV2lkZ2V0KCk7CiAgICAgICAgd2lkZ2V0LnNldENvbnRhaW5lcignc3RhbmRpbmdzJyk7CiAgICAgICAgd2lkZ2V0LnNldFdpZGdldElkKE1CVC5BUEkuV2lkZ2V0cy5TRUFTT05fU1RBTkRJTkdTX0xPTkdfV0lER0VUKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2xlYWd1ZV9saW5rX3Zpc2libGUnLCAyKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3RlYW1fbGlua192aXNpYmxlJywgMSk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdnYW1lX2xpbmtfdmlzaWJsZScsIDIpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgncGxheWVyX2xpbmtfdmlzaWJsZScsIDEpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnZnVsbF9zdGFuZGluZ3NfbGlua192aXNpYmxlJywgMik7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCJzdGFnZV9sZXZlbHNfdmlzaWJsZSIsIDIpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnbGVhZ3VlX2lkJywgbGVhZ3VlKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3NlYXNvbl9pZCcsIHNlYXNvbik7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCd0ZWFtX2xpbmtfdHlwZScsIE1CVC5BUEkuTkFWSUdBVElPTl9UWVBFX0NVU1RPTSk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCd0ZWFtX2xpbmtfaGFuZGxlcicsICduYXZpZ2F0ZVRlYW0nKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2Z1bGxfc3RhbmRpbmdzX2xpbmtfdHlwZScsIE1CVC5BUEkuTkFWSUdBVElPTl9UWVBFX0NVU1RPTSk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdmdWxsX3N0YW5kaW5nc19saW5rX2hhbmRsZXInLCAnbmF2aWdhdGVTdGFuZGluZ3MnKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3RlbXBsYXRlJywgJ3YyJyk7CiAgICAgICAgcmVxdWVzdC5hZGRXaWRnZXQod2lkZ2V0KTsKICAgICAgICByZXF1ZXN0LnJlbmRlcigpOwogICAgPC9zY3JpcHQ+PCEtLSBOZWVkIGZvciBzdGFuZGluZ3Mgd2lkZ2V0IC0tPjxzY3JpcHQ+CiAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgTUJULkFQSS5XaWRnZXRzLlJlbmRlclJlcXVlc3QoKTsKICAgICAgICB2YXIgd2lkZ2V0ID0gbmV3IE1CVC5BUEkuV2lkZ2V0cy5XaWRnZXQoKTsKICAgICAgICB3aWRnZXQuc2V0Q29udGFpbmVyKCdzdGFuZGluZ3MnKTsKICAgICAgICB3aWRnZXQuc2V0V2lkZ2V0SWQoTUJULkFQSS5XaWRnZXRzLlNFQVNPTl9TVEFORElOR1NfTE9OR19XSURHRVQpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnbGVhZ3VlX2xpbmtfdmlzaWJsZScsIDIpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgndGVhbV9saW5rX3Zpc2libGUnLCAxKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2dhbWVfbGlua192aXNpYmxlJywgMik7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdwbGF5ZXJfbGlua192aXNpYmxlJywgMSk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdmdWxsX3N0YW5kaW5nc19saW5rX3Zpc2libGUnLCAyKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oInN0YWdlX2xldmVsc192aXNpYmxlIiwgMik7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdsZWFndWVfaWQnLCBsZWFndWUpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnc2Vhc29uX2lkJywgc2Vhc29uKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3RlYW1fbGlua190eXBlJywgTUJULkFQSS5OQVZJR0FUSU9OX1RZUEVfQ1VTVE9NKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3RlYW1fbGlua19oYW5kbGVyJywgJ25hdmlnYXRlVGVhbScpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnZnVsbF9zdGFuZGluZ3NfbGlua190eXBlJywgTUJULkFQSS5OQVZJR0FUSU9OX1RZUEVfQ1VTVE9NKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2Z1bGxfc3RhbmRpbmdzX2xpbmtfaGFuZGxlcicsICduYXZpZ2F0ZVN0YW5kaW5ncycpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgndGVtcGxhdGUnLCAndjInKTsKICAgICAgICByZXF1ZXN0LmFkZFdpZGdldCh3aWRnZXQpOwogICAgICAgIHJlcXVlc3QucmVuZGVyKCk7CiAgICA8L3NjcmlwdD48IS0tIExvYWQgcGxheWVyIHN0YXRzIHdpZGdldCAtLT48c2NyaXB0PgogICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IE1CVC5BUEkuV2lkZ2V0cy5SZW5kZXJSZXF1ZXN0KCk7CiAgICAgICAgd2lkZ2V0ID0gbmV3IE1CVC5BUEkuV2lkZ2V0cy5XaWRnZXQoKTsKICAgICAgICB3aWRnZXQuc2V0Q29udGFpbmVyKCdzdGF0cy1wbGF5ZXInKTsKICAgICAgICB3aWRnZXQuc2V0V2lkZ2V0SWQoTUJULkFQSS5XaWRnZXRzLlNUQVRJU1RJQ1NfUExBWUVSU19XSURHRVQpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnbGVhZ3VlX2xpbmtfdmlzaWJsZScsIDEpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgndGVhbV9saW5rX3Zpc2libGUnLCAxKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2dhbWVfbGlua192aXNpYmxlJywgMSk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdwbGF5ZXJfbGlua192aXNpYmxlJywgMSk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdsZWFndWVfaWQnLCBsZWFndWUpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnc2Vhc29uX2lkJywgc2Vhc29uKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2dhbWVfbGlua190eXBlJywgTUJULkFQSS5OQVZJR0FUSU9OX1RZUEVfQ1VTVE9NKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2dhbWVfbGlua19oYW5kbGVyJywgJ25hdmlnYXRlR2FtZScpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgndGVhbV9saW5rX3R5cGUnLCBNQlQuQVBJLk5BVklHQVRJT05fVFlQRV9DVVNUT00pOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgndGVhbV9saW5rX2hhbmRsZXInLCAnbmF2aWdhdGVUZWFtJyk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdwbGF5ZXJfbGlua190eXBlJywgTUJULkFQSS5OQVZJR0FUSU9OX1RZUEVfQ1VTVE9NKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3BsYXllcl9saW5rX2hhbmRsZXInLCAnbmF2aWdhdGVQbGF5ZXInKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3RlbXBsYXRlJywgJ3YyJyk7CiAgICAgICAgcmVxdWVzdC5hZGRXaWRnZXQod2lkZ2V0KTsKICAgICAgICByZXF1ZXN0LnJlbmRlcigpOwogICAgPC9zY3JpcHQ+PCEtLSBMb2FkIHRlYW0gc3RhdHMgd2lkZ2V0IC0tPjxzY3JpcHQ+CiAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgTUJULkFQSS5XaWRnZXRzLlJlbmRlclJlcXVlc3QoKTsKICAgICAgICB2YXIgd2lkZ2V0ID0gbmV3IE1CVC5BUEkuV2lkZ2V0cy5XaWRnZXQoKTsKICAgICAgICB3aWRnZXQuc2V0Q29udGFpbmVyKCdzdGF0cy10ZWFtJyk7CiAgICAgICAgd2lkZ2V0LnNldFdpZGdldElkKE1CVC5BUEkuV2lkZ2V0cy5TVEFUSVNUSUNTX1RFQU1TX1dJREdFVCk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdsZWFndWVfbGlua192aXNpYmxlJywgMSk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCd0ZWFtX2xpbmtfdmlzaWJsZScsIDEpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnZ2FtZV9saW5rX3Zpc2libGUnLCAxKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3BsYXllcl9saW5rX3Zpc2libGUnLCAxKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ2xlYWd1ZV9pZCcsIGxlYWd1ZSk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCdzZWFzb25faWQnLCBzZWFzb24pOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnZ2FtZV9saW5rX3R5cGUnLCBNQlQuQVBJLk5BVklHQVRJT05fVFlQRV9DVVNUT00pOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgnZ2FtZV9saW5rX2hhbmRsZXInLCAnbmF2aWdhdGVHYW1lJyk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCd0ZWFtX2xpbmtfdHlwZScsIE1CVC5BUEkuTkFWSUdBVElPTl9UWVBFX0NVU1RPTSk7CiAgICAgICAgd2lkZ2V0LnNldFBhcmFtKCd0ZWFtX2xpbmtfaGFuZGxlcicsICduYXZpZ2F0ZVRlYW0nKTsKICAgICAgICB3aWRnZXQuc2V0UGFyYW0oJ3BsYXllcl9saW5rX3R5cGUnLCBNQlQuQVBJLk5BVklHQVRJT05fVFlQRV9DVVNUT00pOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgncGxheWVyX2xpbmtfaGFuZGxlcicsICduYXZpZ2F0ZVBsYXllcicpOwogICAgICAgIHdpZGdldC5zZXRQYXJhbSgndGVtcGxhdGUnLCAndjInKTsKICAgICAgICByZXF1ZXN0LmFkZFdpZGdldCh3aWRnZXQpOwogICAgICAgIHJlcXVlc3QucmVuZGVyKCk7CiAgICA8L3NjcmlwdD48aDI+R2FsZXJpamU8L2gyPjwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+PGRpdiBjbGFzcz0icm93Ij48ZGl2IGNsYXNzPSJjb2wtbWQtb2Zmc2V0LTIgY29sLW1kLTggY29sLXNtLTEyIj48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBjb2wteHMtNiBjb2wteHhzLTEyIiBzdHlsZT0icGFkZGluZzowIDE1cHg7Ij48YSBocmVmPSIvZ2FsZXJpamEvaWQvOTkiIGNsYXNzPSJwaG90byBzbWFsbCI+PGRpdiBjbGFzcz0iaW1hZ2UiPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC81ODU2L3J3LzI2MS9yaC8xNzQvcnAvdHJ1ZS9yZC90cnVlL2gvN2ZlODM5IiBhbHQ9IkltYWdlXzU4NTYiPjwvZGl2PjxkaXYgY2xhc3M9InN1bW1hcnkiPjxkaXYgY2xhc3M9ImRhdGUiPjxkaXYgY2xhc3M9ImRheSI+MTA8L2Rpdj48ZGl2IGNsYXNzPSJtb250aCI+YXByLjxkaXYgY2xhc3M9InllYXIiPjIwMTg8L2Rpdj48L2Rpdj48L2Rpdj48aDM+SWxpcmlqYSA6IEhlbGlvcyBTdW5zICg3LiBrb2xvIExpZ2UgTm92YSBLQk0gemEgcHJ2YWthKTwvaDM+PC9kaXY+PC9hPjwvZGl2PjxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IGNvbC14cy02IGNvbC14eHMtMTIiIHN0eWxlPSJwYWRkaW5nOjAgMTVweDsiPjxhIGhyZWY9Ii9nYWxlcmlqYS9pZC8xMDAiIGNsYXNzPSJwaG90byBzbWFsbCI+PGRpdiBjbGFzcz0iaW1hZ2UiPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC81ODk3L3J3LzI2MS9yaC8xNzQvcnAvdHJ1ZS9yZC90cnVlL2gvYjBlNDI1IiBhbHQ9IkltYWdlXzU4OTciPjwvZGl2PjxkaXYgY2xhc3M9InN1bW1hcnkiPjxkaXYgY2xhc3M9ImRhdGUiPjxkaXYgY2xhc3M9ImRheSI+MTE8L2Rpdj48ZGl2IGNsYXNzPSJtb250aCI+YXByLjxkaXYgY2xhc3M9InllYXIiPjIwMTg8L2Rpdj48L2Rpdj48L2Rpdj48aDM+xaBlbsSNdXIgR0dEIDogUGV0cm9sIE9saW1waWphICg3LiBrb2xvIExpZ2UgTm92YSBLQk0gemEgcHJ2YWthKTwvaDM+PC9kaXY+PC9hPjwvZGl2PjxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IGNvbC14cy02IGNvbC14eHMtMTIiIHN0eWxlPSJwYWRkaW5nOjAgMTVweDsiPjxhIGhyZWY9Ii9nYWxlcmlqYS9pZC8xMTEiIGNsYXNzPSJwaG90byBzbWFsbCI+PGRpdiBjbGFzcz0iaW1hZ2UiPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC82NDUyL3J3LzI2MS9yaC8xNzQvcnAvdHJ1ZS9yZC90cnVlL2gvNGYxMTBkIiBhbHQ9IkltYWdlXzY0NTIiPjwvZGl2PjxkaXYgY2xhc3M9InN1bW1hcnkiPjxkaXYgY2xhc3M9ImRhdGUiPjxkaXYgY2xhc3M9ImRheSI+MTU8L2Rpdj48ZGl2IGNsYXNzPSJtb250aCI+YXByLjxkaXYgY2xhc3M9InllYXIiPjIwMTg8L2Rpdj48L2Rpdj48L2Rpdj48aDM+SWxpcmlqYSA6IFBldHJvbCBPbGltcGlqYSAoOC4ga29sbyBMaWdlIE5vdmEgS0JNIHphIHBydmFrYSk8L2gzPjwvZGl2PjwvYT48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBjb2wteHMtNiBjb2wteHhzLTEyIiBzdHlsZT0icGFkZGluZzowIDE1cHg7Ij48YSBocmVmPSIvZ2FsZXJpamEvaWQvMTEyIiBjbGFzcz0icGhvdG8gc21hbGwiPjxkaXYgY2xhc3M9ImltYWdlIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNjUxMC9ydy8yNjEvcmgvMTc0L3JwL3RydWUvcmQvdHJ1ZS9oLzZjOGJjMCIgYWx0PSJJbWFnZV82NTEwIj48L2Rpdj48ZGl2IGNsYXNzPSJzdW1tYXJ5Ij48ZGl2IGNsYXNzPSJkYXRlIj48ZGl2IGNsYXNzPSJkYXkiPjE5PC9kaXY+PGRpdiBjbGFzcz0ibW9udGgiPmFwci48ZGl2IGNsYXNzPSJ5ZWFyIj4yMDE4PC9kaXY+PC9kaXY+PC9kaXY+PGgzPlBldHJvbCBPbGltcGlqYSA6IMWgZW50anVyICg5LiBrb2xvIExpZ2UgTm92YSBLQk0gemEgcHJ2YWthKTwvaDM+PC9kaXY+PC9hPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9ImNvbnRhaW5lci1ib290c3RyYXAiPjxkaXYgY2xhc3M9InJvdyI+PGRpdiBjbGFzcz0iIGFydC1jb250ZW50Ij48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPSJjb250YWluZXItYm9vdHN0cmFwIGJhbm5lci1oIj48ZGl2IGNsYXNzPSJyb3ciPjxkaXYgY2xhc3M9ImNvbC1tZC0xMiB0ZXh0LWNlbnRlciI+PHNjcmlwdCBsYW5ndWFnZT0iSmF2YVNjcmlwdCIgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vb2dsYXNpLmt6cy5zaS9hZHguanMiPjwvc2NyaXB0PjxzY3JpcHQgbGFuZ3VhZ2U9IkphdmFTY3JpcHQiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PCEtLQppZiAoIWRvY3VtZW50LnBocEFkc191c2VkKSBkb2N1bWVudC5waHBBZHNfdXNlZCA9ICcsJztwaHBBZHNfcmFuZG9tID0gbmV3IFN0cmluZyAoTWF0aC5yYW5kb20oKSk7IHBocEFkc19yYW5kb20gPSBwaHBBZHNfcmFuZG9tLnN1YnN0cmluZygyLDExKTtkb2N1bWVudC53cml0ZSAoIjwiICsgInNjcmlwdCBsYW5ndWFnZT0nSmF2YVNjcmlwdCcgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9JyIpO2RvY3VtZW50LndyaXRlICgiaHR0cHM6Ly9vZ2xhc2kua3pzLnNpL2FkanMucGhwP249IiArIHBocEFkc19yYW5kb20pO2RvY3VtZW50LndyaXRlICgiJmFtcDt3aGF0PXpvbmU6MyIpO2RvY3VtZW50LndyaXRlICgiJmFtcDtleGNsdWRlPSIgKyBkb2N1bWVudC5waHBBZHNfdXNlZCk7aWYgKGRvY3VtZW50LnJlZmVycmVyKWRvY3VtZW50LndyaXRlICgiJmFtcDtyZWZlcmVyPSIgKyBlc2NhcGUoZG9jdW1lbnQucmVmZXJyZXIpKTtkb2N1bWVudC53cml0ZSAoIic+PCIgKyAiL3NjcmlwdD4iKTsKLy8tLT48L3NjcmlwdD48c2NyaXB0IGxhbmd1YWdlPSJKYXZhU2NyaXB0IiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9vZ2xhc2kua3pzLnNpL2FkanMucGhwP249MjIyOTMwMTUwJmFtcDt3aGF0PXpvbmU6MyZhbXA7ZXhjbHVkZT0sIj48L3NjcmlwdD48YSBocmVmPSJodHRwczovL29nbGFzaS5renMuc2kvYWRjbGljay5waHA/YmFubmVyaWQ9NjA0JmFtcDt6b25laWQ9MyZhbXA7c291cmNlPSZhbXA7ZGVzdD1odHRwcyUzQSUyRiUyRnd3dy5lLXN0YXZlLmNvbSUyRiIgdGFyZ2V0PSJfYmxhbmsiPjxpbWcgc3JjPSJodHRwczovL29nbGFzaS5renMuc2kvYWRpbWFnZS5waHA/ZmlsZW5hbWU9YmFubmVyLWt6cy03MTB4OTAuanBnJmFtcDtjb250ZW50dHlwZT1qcGVnIiB3aWR0aD0iNzEwIiBoZWlnaHQ9IjkwIiBhbHQ9IiIgdGl0bGU9IiIgYm9yZGVyPSIwIj48L2E+PGRpdiBpZD0iYmVhY29uXzYwNCIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogMHB4OyB0b3A6IDBweDsgdmlzaWJpbGl0eTogaGlkZGVuOyI+PGltZyBzcmM9Imh0dHBzOi8vb2dsYXNpLmt6cy5zaS9hZGxvZy5waHA/YmFubmVyaWQ9NjA0JmFtcDtjbGllbnRpZD0zNjAmYW1wO3pvbmVpZD0zJmFtcDtzb3VyY2U9JmFtcDtibG9jaz0wJmFtcDtjYXBwaW5nPTAmYW1wO2NiPTMyYzU3NDhmYmEwNzdhZGU4YjA4M2QxZjBjOWFkNWZjIiB3aWR0aD0iMCIgaGVpZ2h0PSIwIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiAwcHg7IGhlaWdodDogMHB4OyI+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvZmFuY3lib3gvanF1ZXJ5LmZhbmN5Ym94LnBhY2suanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvZmFuY3lib3gvanF1ZXJ5LmZhbmN5Ym94LWJ1dHRvbnMuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvanMvZmFuY3lib3gvanF1ZXJ5LmZhbmN5Ym94LW1lZGlhLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2pzL2ZhbmN5Ym94L2pxdWVyeS5mYW5jeWJveC10aHVtYnMuanMiPjwvc2NyaXB0PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgo8IS0tCmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CglqUXVlcnkoJy5hZ2FsJykuZmFuY3lib3goewoJCXR5cGUgOiAnaW1hZ2UnLAoJCXBhZGRpbmc6IDAsCgkJaGVscGVycyA6IHsKCSAgICAgbWVkaWEgOiB7fQoJICAgIH0KICAgIH0pOwp9KTsKLy8tLT4KPC9zY3JpcHQ+CgkJCQkJCQoJCQkJPGRpdiBzdHlsZT0iY2xlYXI6IGJvdGg7Ij48L2Rpdj4KCQkJPC9kaXY+CgkJPC9kaXY+Cgk8L2Rpdj48IS0tbWlkZGxlIHBhcnRzIGVuZHMtLT4KPC9kaXY+PCEtLWNvbnRhaW5lciBwYXJ0cyBlbmRzLS0+CgkJCgoKCgoKCgoKPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIHNwb25zb3ItY29udGFpbmVyIj48ZGl2IGNsYXNzPSJkaXZpZGVyIj48L2Rpdj48ZGl2IGNsYXNzPSJyb3ciPjxkaXYgY2xhc3M9ImNvbC1tZC0xMiBzcG9uc29yLWNvbnRhaW5lci1pbm5lciI+PGRpdiBpZD0ic3BvbnNvcnMiIGNsYXNzPSJjYXJvdXNlbCBzbGlkZSIgZGF0YS1yaWRlPSJjYXJvdXNlbCIgZGF0YS1pbnRlcnZhbD0iNzAwMCI+PGRpdiBjbGFzcz0icm93IGdlbmVyYWwtc3BvbnNvcnMiPjxkaXYgY2xhc3M9ImNvbC1tZC1vZmZzZXQtMiBjb2wtbWQtNCAgY29sLXNtLTYgY29sLXhzLTYgY29sLXh4cy0xMiBnLXNwLXJpZ2h0IHNwb24tZ2VuIj48YSBjbGFzcz0ic3Bvbi1nZW4tdHJhbnNmb3JtIj48L2E+PGEgaHJlZj0iaHR0cHM6Ly90ZWxlbWFjaC5zaS8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iVGVsZW1hY2giPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC84MDczL3J3LzIyMC9ycC90cnVlL2gvMzVhYmQ4Ij48L2E+PHAgY2xhc3M9Imdlbi1zcG9uIj5HZW5lcmFsbmkgc3BvbnpvcjwvcD48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtbWQtNCAgY29sLXNtLTYgY29sLXhzLTYgY29sLXh4cy0xMiBnLXNwLWxlZnQgc3Bvbi1wbGF0Ij48YSBocmVmPSJodHRwOi8vd3d3LmFkaWRhcy5jb20iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iQWRpZGFzIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNDQ1Mi9ydy8yMjAvcnAvdHJ1ZS9oLzU5MWFkOSI+PC9hPjxhIGhyZWY9Imh0dHA6Ly93d3cuc3Bhci5zaS8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iU3BhciI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzcwMjQvcncvMjIwL3JwL3RydWUvaC9kZWY0MGYiPjwvYT48cD5QbGF0aW5hc3RhIHNwb256b3JqYTwvcD48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPSJjYXJvdXNlbC1pbm5lciIgcm9sZT0ibGlzdGJveCI+PGRpdiBjbGFzcz0iaXRlbSBhY3RpdmUiPjxkaXYgY2xhc3M9InNsaWRlci1pbm5lciI+PGRpdiBjbGFzcz0ic3BvbnNvcnMgZ29sZGVuIj48ZGl2IGNsYXNzPSJsb2dvcyI+PGEgaHJlZj0iaHR0cDovL3d3dy5ua2JtLnNpLyIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJOS0JNIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNDY5OC9ydy8xNTQvcnAvdHJ1ZS9oLzZiMTI5NiI+PC9hPjxhIGhyZWY9Imh0dHA6Ly93d3cucGV0cm9sLnNpLyIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJQZXRyb2wiPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC80Njk3L3J3LzE1NC9ycC90cnVlL2gvYTAwNWQ2Ij48L2E+PC9kaXY+PHA+WmxhdGkgc3BvbnpvcmppPC9wPjwvZGl2PjxkaXYgY2xhc3M9InNwb25zb3JzIHNpbHZlciI+PGRpdiBjbGFzcz0ibG9nb3MiPjxhIGhyZWY9Imh0dHA6Ly93d3cuYS1jb3Ntb3Muc2kvIiB0YXJnZXQ9Il9ibGFuayIgdGl0bGU9IkEtQ29zbW9zIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvMTQzOTUvcncvMTU0L3JwL3RydWUvaC82NjRjMmUiPjwvYT48YSBocmVmPSJodHRwOi8vd3d3LnBpdm8tbGFza28uc2kvc2xvLyIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJMYcWha28iPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC8xNTA1Mi9ydy8xNTQvcnAvdHJ1ZS9oL2EyN2E5MiI+PC9hPjxhIGhyZWY9Imh0dHA6Ly93d3cuc3BhbGRpbmcuc2kvIiB0YXJnZXQ9Il9ibGFuayIgdGl0bGU9IlNwYWxkaW5nIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNTA1OS9ydy8xNTQvcnAvdHJ1ZS9oLzEyN2RiYyI+PC9hPjxhIGhyZWY9Imh0dHA6Ly93d3cuc29ueS5zaS9zZWN0aW9uL3phY2V0bmEtc3RyYW4iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iU29ueSI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzUwNjMvcncvMTU0L3JwL3RydWUvaC80YjMzZTciPjwvYT48L2Rpdj48cD5TcmVicm5pIHNwb256b3JqaTwvcD48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPSJpdGVtICI+PGRpdiBjbGFzcz0ic2xpZGVyLWlubmVyIj48ZGl2IGNsYXNzPSJzcG9uc29ycyBnb2xkZW4iPjxkaXYgY2xhc3M9ImxvZ29zIj48YSBocmVmPSJodHRwOi8vd3d3LmtvbXBhcy5zaS8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iS29tcGFzIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNDcwMC9ydy8xNTQvcnAvdHJ1ZS9oL2NjYjViZSI+PC9hPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmRtLWRyb2dlcmllbWFya3Quc2kvIiB0aXRsZT0iRE0iPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC81MDUzL3J3LzE1NC9ycC90cnVlL2gvZTcyZjBmIj48L2E+PC9kaXY+PHA+U3JlYnJuaSBzcG9uem9yamk8L3A+PC9kaXY+PGRpdiBjbGFzcz0ic3BvbnNvcnMgc2lsdmVyIj48ZGl2IGNsYXNzPSJsb2dvcyI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZS1zdGF2ZS5jb20vIiB0YXJnZXQ9Il9ibGFuayIgdGl0bGU9IsWgcG9ydG5hIGxvdGVyaWphIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvMTQyNDkvcncvMTU0L3JwL3RydWUvaC9mOGY0YTAiPjwvYT48YSBocmVmPSJodHRwOi8vd3d3LmVsZWt0cm8tZ29yZW5qc2thLnNpLyIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJFbGVrdHJvIEdvcmVuanNrYSI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzUwNTQvcncvMTU0L3JwL3RydWUvaC8xNDMyMTQiPjwvYT48YSBocmVmPSJodHRwOi8vbG90ZXJpamEuc2kvIiB0YXJnZXQ9Il9ibGFuayIgdGl0bGU9IkxvdGVyaWphIFNsb3ZlbmlqZSI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzU4MTMvcncvMTU0L3JwL3RydWUvaC85NDc4YjgiPjwvYT48YSBocmVmPSJodHRwOi8vd3d3LmhzZS5zaS9zaS8iIHRpdGxlPSJIU0UiPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC81MzI3L3J3LzE1NC9ycC90cnVlL2gvZmRlYzUzIj48L2E+PC9kaXY+PHA+QnJvbmFzdGkgc3BvbnpvcmppPC9wPjwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9Iml0ZW0gIj48ZGl2IGNsYXNzPSJzbGlkZXItaW5uZXIiPjxkaXYgY2xhc3M9InNwb25zb3JzIGdvbGRlbiI+PGRpdiBjbGFzcz0ibG9nb3MiPjxhIGhyZWY9Imh0dHA6Ly93d3cuZ29yZW5qZS5zaS8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iR29yZW5qZSI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzUwNjkvcncvMTU0L3JwL3RydWUvaC8wOGU0N2UiPjwvYT48YSBocmVmPSJodHRwOi8vd3d3LmtuYXVmaW5zdWxhdGlvbi5zaS8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iS25hdWYiPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC81MDY1L3J3LzE1NC9ycC90cnVlL2gvNGVmMmFjIj48L2E+PGEgaHJlZj0iaHR0cDovL3d3dy5zbG8temVsZXpuaWNlLnNpL3NsLyIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJTbG92ZW5za2Ugxb5lbGV6bmljZSI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzUwNTUvcncvMTU0L3JwL3RydWUvaC85NjM3ZGEiPjwvYT48YSBocmVmPSJodHRwOi8vd3d3Lmdlbi1lbmVyZ2lqYS5zaS8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iR0VOLUkiPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC81MDY2L3J3LzE1NC9ycC90cnVlL2gvMTAyYjJlIj48L2E+PC9kaXY+PHA+QnJvbmFzdGkgc3BvbnpvcmppPC9wPjwvZGl2PjxkaXYgY2xhc3M9InNwb25zb3JzIHNpbHZlciI+PGRpdiBjbGFzcz0ibG9nb3MiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmF1c3RyaWEtdHJlbmQuYXQvZW4vaG90ZWxzL2xqdWJsamFuYSIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJBVEgiPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC83NTAzL3J3LzE1NC9ycC90cnVlL2gvMjI5YzAwIj48L2E+PGEgaHJlZj0iaHR0cDovL3d3dy5mdW5kYWNpamF6YXNwb3J0Lm9yZy8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iRnVuZGFjaWphIHphIMWhcG9ydCI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzQ4ODMvcncvMTU0L3JwL3RydWUvaC85ZDlhN2EiPjwvYT48L2Rpdj48cD5QYXJ0bmVyamk8L3A+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz0iaXRlbSAiPjxkaXYgY2xhc3M9InNsaWRlci1pbm5lciI+PGRpdiBjbGFzcz0ic3BvbnNvcnMgZ29sZGVuIj48ZGl2IGNsYXNzPSJsb2dvcyI+PGEgaHJlZj0iaHR0cDovL3d3dy5tc3MuZ292LnNpLyIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJNSVpTIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNTA2OC9ydy8xNTQvcnAvdHJ1ZS9oLzc1ZDZkMyI+PC9hPjxhIGhyZWY9Imh0dHA6Ly93d3cuZXVyb3BsYWthdC5zaS8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iRXVyb3BsYWthdCI+PGltZyBzcmM9Ii9iaW5hcnkvc2hvd2ltYWdlL2lkLzU4MTUvcncvMTU0L3JwL3RydWUvaC9kYWZjM2IiPjwvYT48YSBocmVmPSJodHRwOi8vd3d3LnZ6aXZvLnNpLyIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJWIMW+aXZvIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNTgxNC9ydy8xNTQvcnAvdHJ1ZS9oLzRkYjBiOCI+PC9hPjxhIGhyZWY9Imh0dHA6Ly93d3cuYXJzcGhhcm1hZS5jb20vIiB0YXJnZXQ9Il9ibGFuayIgdGl0bGU9IkFyc3BoYXJtYWUiPjxpbWcgc3JjPSIvYmluYXJ5L3Nob3dpbWFnZS9pZC81MDY0L3J3LzE1NC9ycC90cnVlL2gvNGNhZWI5Ij48L2E+PGEgaHJlZj0iaHR0cDovL3d3dy5wcm9tZXRtZXNlYy5zaS8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iTm9tYWdvIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNjkxMS9ydy8xNTQvcnAvdHJ1ZS9oLzBhNTUyMyI+PC9hPjxhIGhyZWY9Imh0dHA6Ly9ldmVudGltLnNpLyIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJFdmVudGltIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNTA1Ny9ydy8xNTQvcnAvdHJ1ZS9oL2RlYWI5NSI+PC9hPjwvZGl2PjxwPlBhcnRuZXJqaTwvcD48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPSJpdGVtICI+PGRpdiBjbGFzcz0ic2xpZGVyLWlubmVyIj48ZGl2IGNsYXNzPSJzcG9uc29ycyBnb2xkZW4iPjxkaXYgY2xhc3M9ImxvZ29zIj48YSBocmVmPSJodHRwczovL3d3dy5tb2RpYW5hLnNpLyIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJNb2RpYW5hIj48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNTE0NS9ydy8xNTQvcnAvdHJ1ZS9oLzViMTAyZiI+PC9hPjwvZGl2PjxwPlBhcnRuZXJqaTwvcD48L2Rpdj48ZGl2IGNsYXNzPSJzcG9uc29ycyBzaWx2ZXIiPjxkaXYgY2xhc3M9ImxvZ29zIj48YSBocmVmPSJodHRwczovL3d3dy5ncm9zYmFza2V0LmNvbS9zbCIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJHcm9zYmFza2V0Ij48aW1nIHNyYz0iL2JpbmFyeS9zaG93aW1hZ2UvaWQvNzAyNS9ydy8xNTQvcnAvdHJ1ZS9oLzU0YTI3NSI+PC9hPjwvZGl2PjxwPkdlbmVyYWxuaSBzcG9uem9yIERQIDN4MzwvcD48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48YSBjbGFzcz0ibGVmdCBjYXJvdXNlbC1jb250cm9sIiBocmVmPSIjc3BvbnNvcnMiIHJvbGU9ImJ1dHRvbiIgZGF0YS1zbGlkZT0icHJldiI+PHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tdHJpYW5nbGUtbGVmdCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj48c3BhbiBjbGFzcz0ic3Itb25seSI+TmF6YWo8L3NwYW4+PC9hPjxhIGNsYXNzPSJyaWdodCBjYXJvdXNlbC1jb250cm9sIiBocmVmPSIjc3BvbnNvcnMiIHJvbGU9ImJ1dHRvbiIgZGF0YS1zbGlkZT0ibmV4dCI+PHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tdHJpYW5nbGUtcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+PHNwYW4gY2xhc3M9InNyLW9ubHkiPk5hcHJlajwvc3Bhbj48L2E+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+CjxkaXYgY2xhc3M9ImZvb3RlciI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWJvb3RzdHJhcCI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTAgY29sLW1kLW9mZnNldC0xIGNvbC1zbS0xMiI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KCQkgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS0zIGNvbC14cy0zIGNvbC14eHMtNiI+PGgzPk1lZGlqc2tvIHNyZWRpxaHEjWU8L2gzPjx1bD48bGk+PGEgaHJlZj0iaHR0cDovL2Ntcy5kYWctZmlsZXMuY29tL2FrcmVkaXRhY2lqZSI+QWtyZWRpdGFjaWplPC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvT3JnYW5pemFjaWphL0xvZ290aXBpL2NpZC8xMzAiPkxvZ290aXBpPC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvT3JnYW5pemFjaWphL1ZzZS1vLUtaUy9jaWQvMTI1Ij5Lb250YWt0PC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvVnN0b3BuaWNlL2NpZC8xNTEiPlZzdG9wbmljZTwvYT48L2xpPjxsaT48YSBocmVmPSJodHRwOi8vY21zLmRhZy1maWxlcy5jb20vY2xhbmVrL1ByZW5vc2kvY2lkLzE0MiI+UHJlbm9zaTwvYT48L2xpPjwvdWw+PC9kaXY+CgkJICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tMyBjb2wteHMtMyBjb2wteHhzLTYiPjxoMz5LWlM8L2gzPjx1bD48bGk+PGEgaHJlZj0iaHR0cDovL2Ntcy5kYWctZmlsZXMuY29tL2NsYW5lay9Pcmdhbml6YWNpamEvRG9rdW1lbnRpL2NpZC8xMzEiPkRva3VtZW50aTwvYT48L2xpPjxsaT48YSBocmVmPSJodHRwOi8vY21zLmRhZy1maWxlcy5jb20vYXJ0aWNsZS9pZC81MzEiPlNvZG5pxaFraSBpc2thbG5pazwvYT48L2xpPjxsaT48YSBocmVmPSJodHRwOi8vd3d3Lmtvc2Fya2Fyc2tpLXRyZW5lcmppLmNvbS8iIHRhcmdldD0iX2JsYW5rIj5aS1RTPC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvVHJnb3ZpbmEvY2lkLzE0MSI+VHJnb3ZpbmE8L2E+PC9saT48bGk+PGEgaHJlZj0iaHR0cDovL29sZC5renMuc2kvIiB0YXJnZXQ9Il9ibGFuayI+QXJoaXYgS1pTPC9hPjwvbGk+PC91bD48L2Rpdj4KCQkgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS0zIGNvbC14cy0zIGNvbC14eHMtNiI+PGgzPlJlcHJlemVudGFuY2U8L2gzPjx1bD48bGk+PGEgaHJlZj0iaHR0cDovL2Ntcy5kYWctZmlsZXMuY29tL2NsYW5lay9SZXByZXplbnRhbmNlL0NsYW5pL2NpZC8zNyI+xIxsYW5pPC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvUmVwcmV6ZW50YW5jZS9DbGFuaWNlL2NpZC84MyI+xIxsYW5pY2U8L2E+PC9saT48bGk+PGEgaHJlZj0iaHR0cDovL2Ntcy5kYWctZmlsZXMuY29tL2NsYW5lay9SZXByZXplbnRhbmNlL0ZhbnRqZS1VMjAvY2lkLzc4Ij5GYW50amUgVTIwPC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvUmVwcmV6ZW50YW5jZS9EZWtsZXRhLVUyMC9jaWQvODQiPkRla2xldGEgVTIwPC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvUmVwcmV6ZW50YW5jZS9GYW50amUtVTE4L2NpZC83OSI+RmFudGplIFUxODwvYT48L2xpPjxsaT48YSBocmVmPSJodHRwOi8vY21zLmRhZy1maWxlcy5jb20vY2xhbmVrL1JlcHJlemVudGFuY2UvRGVrbGV0YS1VMTgvY2lkLzg1Ij5EZWtsZXRhIFUxODwvYT48L2xpPjxsaT48YSBocmVmPSJodHRwOi8vY21zLmRhZy1maWxlcy5jb20vY2xhbmVrL1JlcHJlemVudGFuY2UvRmFudGplLVUxNi9jaWQvODAiPkZhbnRqZSBVMTY8L2E+PC9saT48bGk+PGEgaHJlZj0iaHR0cDovL2Ntcy5kYWctZmlsZXMuY29tL2NsYW5lay9SZXByZXplbnRhbmNlL0Rla2xldGEtVTE2L2NpZC84NiI+RGVrbGV0YSBVMTY8L2E+PC9saT48bGk+PGEgaHJlZj0iaHR0cDovL2Ntcy5kYWctZmlsZXMuY29tL2NsYW5lay9SZXByZXplbnRhbmNlL0ZhbnRqZS1VMTQvY2lkLzgyIj5GYW50amUgVTE0PC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvUmVwcmV6ZW50YW5jZS9EZWtsZXRhLVUxNC9jaWQvODgiPkRla2xldGEgVTE0PC9hPjwvbGk+PC91bD48L2Rpdj4KCQkgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS0zIGNvbC14cy0zIGNvbC14eHMtNiI+PGgzPlByb2pla3RpIGluIHRla21vdmFuamE8L2gzPjx1bD48bGk+PGEgaHJlZj0iaHR0cDovL2Ntcy5kYWctZmlsZXMuY29tL2NsYW5lay9Qcm9qZWt0aS9JZ3JpdmEta29zYXJrYS9jaWQvOTEiPklncml2YSBrb8WhYXJrYTwvYT48L2xpPjxsaT48YSBocmVmPSJodHRwOi8vY21zLmRhZy1maWxlcy5jb20vY2xhbmVrL1Byb2pla3RpL0xpcGtvL2NpZC8xNTUiPkxpcGtvPC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvUHJvamVrdGkvUmVnaWpza28tc2VsZWtjaW9uaXJhbmplL2NpZC85MyI+UmVnaWpza28gc2VsZWtjaW9uaXJhbmplPC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvUHJvamVrdGkvS1pTLXRhYm9yL2NpZC85MiI+VGFib3JpPC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvUHJvamVrdGkvS29zYXJrYXJza2ktc3VwZXJzb2xhci9jaWQvOTQiPktvxaFhcmthcnNraSBTdXBlcsWhb2xhcjwvYT48L2xpPjxsaT48YSBocmVmPSJodHRwOi8vY21zLmRhZy1maWxlcy5jb20vY2xhbmVrL1Byb2pla3RpL1UxNC1zbG92ZW5pYS1iYWxsL2NpZC85NSI+VTE0IFNsb3ZlbmlhIEJhbGw8L2E+PC9saT48bGk+PGEgaHJlZj0iaHR0cDovL2Ntcy5kYWctZmlsZXMuY29tL2NsYW5lay9Qcm9qZWt0aS9BbGwtU3RhcnMvY2lkLzk2Ij5BbGwgc3RhcnM8L2E+PC9saT48bGk+PGEgaHJlZj0iaHR0cDovL2Ntcy5kYWctZmlsZXMuY29tL2NsYW5lay9Qcm9qZWt0aS9Qb2thbC1FdXJvYmFza2V0LTIwMTcvY2lkLzIwMCI+UG9rYWwgRXVyb2Jhc2tldCAyMDE3PC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvVGVrbW92YW5qYS9MaWdhLU5vdmEtS0JNL2NpZC82NiI+TGlnYSBOb3ZhIEtCTTwvYT48L2xpPjxsaT48YSBocmVmPSJodHRwOi8vY21zLmRhZy1maWxlcy5jb20vY2xhbmVrL1Rla21vdmFuamEvMS4tU0tMLXphLXplbnNrZS9jaWQvNjciPjEuIFNLTCB6YSDFvmVuc2tlPC9hPjwvbGk+PGxpPjxhIGhyZWY9Imh0dHA6Ly9jbXMuZGFnLWZpbGVzLmNvbS9jbGFuZWsvVGVrbW92YW5qYS9Qb2thbC1TcGFyL2NpZC83MiNtYnQ6MzMtMzAzJHQmYW1wOzA9MSI+UG9rYWwgU3BhcjwvYT48L2xpPjxsaT48YSBocmVmPSJodHRwOi8vY21zLmRhZy1maWxlcy5jb20vY2xhbmVrLzN4My9TYW1zdW5nLWRyemF2bm8tcHJ2ZW5zdHZvL2NpZC8yMDkiPktvxaFhcmthIDN4MzwvYT48L2xpPjwvdWw+PC9kaXY+CgkJICA8ZGl2IGNsYXNzPSJjYiI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2PgkJCgoKIAoKCgoKPGRpdiBjbGFzcz0iY29va2llQ29udCIgaWQ9ImNvb2tpZGlvdCI+PGRpdiBjbGFzcz0ibW9yZUluZm9Db250Ij5UYSBzcGxldG5hIHN0cmFuIHVwb3JhYmxqYSBwacWha290a2UgeiBuYW1lbm9tLCBkYSB2YW0gcG9udWRpbW8gbmFqYm9sasWhbyBtb8W+bm8gdXBvcmFibmnFoWtvIGl6a3XFoW5qbyBuYSBuYcWhaWggc3BsZXRuaWggc3RyYW5laC4gPGEgaHJlZj0iL2NsYW5lay9QaXNrb3RraS9jaWQvMjgwIj5WZcSNPC9hPjwvZGl2PjxhIGNsYXNzPSJhZ3JlZUxpbmsiIGlkPSJjaV9hZ3JlZSIgb25jbGljaz0iQ29va2llSWRpb3Qub25BZ3JlZUxpbmtDbGljayh0aGlzLCB0cnVlKTsiPlN0cmluamFtIHNlPC9hPjxhIGNsYXNzPSJkaXNhZ3JlZUxpbmsiIGlkPSJjaV9ub3RhZ3JlZSIgb25jbGljaz0iQ29va2llSWRpb3Qub25BZ3JlZUxpbmtDbGljayh0aGlzLCBmYWxzZSk7Ij5OZSBzdHJpbmphbSBzZTwvYT48ZGl2IGNsYXNzPSJsbSIgaWQ9ImNvb2tJZGlvdExtIiBzdHlsZT0iZGlzcGxheTpub25lOyI+PC9kaXY+PC9kaXY+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CnZhciBDb29raWVJZGlvdCA9IENvb2tpZUlkaW90fHx7fTsKKGZ1bmN0aW9uKCkgewoJQ29va2llSWRpb3Qub25BZ3JlZUxpbmtDbGljayA9IGZ1bmN0aW9uKHNlbmRlciwgYWdyZWUpIHsKCQl2YXIgcmVxdWVzdERhdGEgPSB7fTsKCQlyZXF1ZXN0RGF0YVsnbSddID0gJ3RhJzsKCgkJaWYoYWdyZWUgPT09IHRydWUpIHsKCQkJdmFyIHRyYWNrQ2hlY2sgPSBqUXVlcnkoc2VuZGVyKS5jbG9zZXN0KCcjY29va2lkaW90JykuZmluZCgnI3RyYWNrQ2hlY2snKTsKCQkJaWYodHJhY2tDaGVjay5sZW5ndGggPT0gMCkgewoJCQkJcmVxdWVzdERhdGFbJ2FnJ10gPSBhZ3JlZT09PXRydWU/JzEnOicwJzsKCQkJfSBlbHNlIHsKCQkJCXJlcXVlc3REYXRhWydhZyddID0gdHJhY2tDaGVjay5nZXQoMCkuY2hlY2tlZD09PXRydWU/JzEnOicwJzsKCQkJfQoJCX0gZWxzZSB7CgkJCXJlcXVlc3REYXRhWydhZyddID0gYWdyZWU9PT10cnVlPycxJzonMCc7CgkJfQoJCQoJCWpRdWVyeS5hamF4KHsKCQkJdXJsOiAnL2FqYXgvY29va2llaWRpb3QnLAoJCQlkYXRhOiAocmVxdWVzdERhdGEpLAoJCQlkYXRhVHlwZTogJ3htbCcsCgkJCV9jb29raWVPblN1YzogcmVxdWVzdERhdGFbJ2FnJ109PScxJywKCQkJc3VjY2VzczogZnVuY3Rpb24oeG1sKSB7CgkJCQlpZihqUXVlcnkoeG1sKS5maW5kKCdzdGF0dXMnKS50ZXh0KCkgPT0gJzEnICYmICEhdGhpcy5fY29va2llT25TdWMpIHsKCQkJCQl2YXIgbmFtZSA9ICdjY2lkaW90JywgdmFsdWU9JzEnOwoJCQkJCXZhciBleHBpcmVzID0gIiI7CgkJCSAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpOwoJCQkgICAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArICgzNjUqMjQqNjAqNjAqMTAwMCkpOyAvLzEgeWVhcgoJCQkgICAgICAgIGV4cGlyZXMgPSAiOyBleHBpcmVzPSIgKyBkYXRlLnRvVVRDU3RyaW5nKCk7CgkJCQkgICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArICI9IiArICh2YWx1ZSB8fCAiIikgICsgZXhwaXJlcyArICI7IHBhdGg9LyI7CgkJCQl9CgkJCX0KCQl9KTsKCgkJalF1ZXJ5KHNlbmRlcikuY2xvc2VzdCgnI2Nvb2tpZGlvdCcpLnNsaWRlVXAoKTsJCQoJfTsKCglDb29raWVJZGlvdC5vbkxlYXJuTW9yZUxpbmtDbGljayA9IGZ1bmN0aW9uKHNlbmRlcikgewoJCXZhciByZXF1ZXN0RGF0YSA9IHt9OwoJCXJlcXVlc3REYXRhWydtJ10gPSAnbG0nOwoJCQoJCWpRdWVyeS5hamF4KHsKCQkJc25kOiBzZW5kZXIsCgkJCXVybDogJy9hamF4L2Nvb2tpZWlkaW90JywKCQkJZGF0YTogKHJlcXVlc3REYXRhKSwKCQkJZGF0YVR5cGU6ICd4bWwnLAoJCQllcnJvcjogZnVuY3Rpb24oKXtfb25MZWFybk1vcmVFcnJvcih0aGlzLnNuZCwgbnVsbCk7fSwKCQkJc3VjY2VzczogZnVuY3Rpb24oeG1sKSB7CgkJCQlpZihqUXVlcnkoeG1sKS5maW5kKCdzdGF0dXMnKS50ZXh0KCkgPT0gJzEnKSB7CgkJCQkJdmFyIGNpZGlvdCA9IGpRdWVyeSh0aGlzLnNuZCkuY2xvc2VzdCgnI2Nvb2tpZGlvdCcpOwoJCQkJCWNpZGlvdC5maW5kKCcjY2lfYWdyZWUsI2NpX25vdGFncmVlJykucmVtb3ZlKCk7CgkJCQkJY2lkaW90LmZpbmQoJyNjb29rSWRpb3RMbScpLmh0bWwoalF1ZXJ5KHhtbCkuZmluZCgnbG1odG1sJykudGV4dCgpKS5zaG93KCk7CgkJCQkJalF1ZXJ5KHRoaXMuc25kKS5yZW1vdmUoKTsKCQkJCX0gZWxzZSB7CgkJCQkJX29uTGVhcm5Nb3JlRXJyb3IodGhpcy5zbmQsIGpRdWVyeSh4bWwpLmZpbmQoJ2xtaHRtbCcpLnRleHQoKSk7CgkJCQl9CgkJCX0KCQl9KTsKCX07CgoJdmFyIF9vbkxlYXJuTW9yZUVycm9yID0gZnVuY3Rpb24oc2VuZGVyLCBtc2cpIHsKCQl2YXIgbG1EaXYgPSBqUXVlcnkoc2VuZGVyKS5jbG9zZXN0KCcjY29va2lkaW90JykuZmluZCgnI2Nvb2tJZGlvdExtJyk7CgkJaWYobXNnID09IG51bGwpIHsKCQkJbG1EaXYuaHRtbCgnPGRpdiBjbGFzcz0iZm9ybWVycm9yIj4nK1V0ZjguWmgrJ2FsIGplIHByaScrVXRmOC5zaCsnbG8gZG8gbmFwYWtlIHByaSBwcmlkb2JpdmFuanUgcG9kYXRrb3YuPC9kaXY+Jyk7CgkJfSBlbHNlIHsKCQkJbG1EaXYuaHRtbChtc2cpOwoJCX0KCQlsbURpdi5zaG93KCk7Cgl9Owp9KSgpOwo8L3NjcmlwdD4JCQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CjwhLS0KalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCWpRdWVyeShkb2N1bWVudCkuY2xpY2soZnVuY3Rpb24oKSB7Q29tbW9uLnNob3dHaXZlbkRpdkFuZENsb3NlT3RoZXJzKG51bGwpO30pOwp9KTsKLy8tLT4KPC9zY3JpcHQ+CgoKCjwvYm9keT48L2h0bWw+ #